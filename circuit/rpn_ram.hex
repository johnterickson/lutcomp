v2.0 raw
# ImageBaseAddress=0x00080400
# entry
# 80400 Init []
#       Initialzing flags and internal regs.
00 
# 80401 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 
# 80407 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 
# 8040d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 04 08 00 
# 80413 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 85 24 08 
# 80417 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 
# 8041d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 
# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([16])
# Var td45b (td45b Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([20, 21, 22, 23])
# Var tdaa (tdaa Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([20, 21, 22, 23])
# td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 80827 LoadImm32 [Register(0x14), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 14 00 10 0f 00 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8082d LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 10 00 
# mem[td45b] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# 80830 Store8 [Register(0x10), Register(0x14)]
#       mem[td45b] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
06 10 14 
# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 80833 LoadImm32 [Register(0x14), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 14 04 10 0f 00 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80839 LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 10 00 
# mem[tdaa] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 8083c Store8 [Register(0x10), Register(0x14)]
#       mem[tdaa] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 10 14 
# return None None
# Return { value: None }
# 8083f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 80841 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :Keyboard_poll
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_Keyboard_poll_queue_push_37_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_Keyboard_poll_queue_push_37_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_37_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var inline_Keyboard_poll_queue_push_37_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([40])
# Var inline_Keyboard_poll_queue_push_37_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t531d (t531d Ident("n")) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([44, 45, 46, 47])
# Var inline_Keyboard_poll_queue_push_37_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_Keyboard_poll_queue_push_37_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([36, 37, 38, 39])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "stdin") Reg(U32) Some([32, 33, 34, 35])
# Var t12ac (t12ac Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })) Reg(U8) Some([24])
# Var t23a (t23a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([52, 53, 54, 55])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([24])
# Var t3334 (t3334 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([52, 53, 54, 55])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([52, 53, 54, 55])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([28, 29, 30, 31])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([52, 53, 54, 55])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([56])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([57])
# Var tb62e (tb62e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([52, 53, 54, 55])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([52, 53, 54, 55])
# Var tdaa (tdaa Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([32, 33, 34, 35])
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([52, 53, 54, 55])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([57])
# Var tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([32, 33, 34, 35])
# Some(t861f) <= call io_ready_to_read() Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 80846 IoReadyToRead [Register(0x18)]
#       ReadyToRead
79 18 
# t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# 80848 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
04 00 04 
# 8084b And8 [Register(0x18), Register(0x00), Register(0x18)]
#       t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
1b 18 00 18 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Number(U8, 0)
# 8084f LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 
# if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# 80852 Cmp8 [Register(0x18), Register(0x39)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
15 18 39 
# 80855 JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
72 5d 08 08 
# 80859 JmpImm [Label24(Keyboard_poll_if_else_0_2)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
70 63 08 08 
# :Keyboard_poll_if_true_0_1 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 8085d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# goto Keyboard_poll_if_end_0 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# 8085f JmpImm [Label24(Keyboard_poll_if_end_0)]
#       goto Keyboard_poll_if_end_0 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
70 63 08 08 
# :Keyboard_poll_if_else_0_2 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/home/john/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 80863 In2 [Register(0x18)]
#       IoRead2
62 18 
# tf68c <- code U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }\nArithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# 80865 LoadImm32 [Register(0x34), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
20 34 00 00 00 00 
# 8086b Copy8 [Register(0x18), Register(0x34)]
#       t528d U32 <- tf68c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
0b 18 34 
# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# 8086e LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
20 00 04 00 00 00 
# 80874 Mul8_16 [Register(0x34), Register(0x00), Register(0x1c)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
11 34 00 1c 
# 80878 LoadImm8 [Register(0x1e), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1e 00 
# 8087b LoadImm8 [Register(0x1f), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1f 00 
# td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 8087e LoadImm32 [Register(0x34), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 34 00 10 0f 00 
# t379c <- mem[td45b] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# 80884 Load8 [Register(0x34), Register(0x18)]
#       t379c <- mem[td45b] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
05 34 18 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# Number(U8, 0)
# 80887 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 
# if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# 8088a Cmp8 [Register(0x18), Register(0x39)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
15 18 39 
# 8088d JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
72 ad 08 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80891 LoadImm32 [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 34 22 04 08 00 
# td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 1))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# 80897 Copy32 [Register(0x1c), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
21 1c 20 
# 8089a AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
32 20 01 00 00 00 
# t23a <- t4c8b Add Var(t674) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 808a0 ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
03 
# 808a1 AddCarry32_1 [Register(0x34), Register(0x20), Register(0x34)]
#       t23a <- t4c8b Add Var(t674) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
30 34 20 34 
# 808a5 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
31 
# c <- mem[t23a] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 808a6 Load8 [Register(0x34), Register(0x18)]
#       c <- mem[t23a] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
05 34 18 
# goto Keyboard_poll_if_end_3 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# 808a9 JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
70 bc 08 08 
# :Keyboard_poll_if_else_0_5 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 808ad LoadImm32 [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 34 22 04 08 00 
# td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 808b3 ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 
# 808b4 AddCarry32_1 [Register(0x34), Register(0x1c), Register(0x34)]
#       tb62e <- t4c8b Add Var(td18e) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 34 1c 34 
# 808b8 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 
# c <- mem[tb62e] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 808b9 Load8 [Register(0x34), Register(0x18)]
#       c <- mem[tb62e] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 34 18 
# :Keyboard_poll_if_end_3 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 808bc LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 
# t7ebd <- mem[tdaa] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 808c2 Load8 [Register(0x20), Register(0x38)]
#       t7ebd <- mem[tdaa] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 38 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 808c5 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 
# if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 808c8 Cmp8 [Register(0x38), Register(0x39)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 38 39 
# 808cb JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 d3 08 08 
# 808cf JmpImm [Label24(Keyboard_poll_if_else_0_8)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
70 1d 09 08 
# :Keyboard_poll_if_true_0_7 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# AddressOf(Ident("stdin"))
# 808d3 LoadImm32 [Register(0x20), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       AddressOf(Ident("stdin"))
20 20 5c 10 0f 00 
# tfff6 <- t0 U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# AddressOf(Ident("stdin"))
# optimized away noop copy Instruction { source: "tfff6 <- t0 U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nAddressOf(Ident(\"stdin\"))\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# tac13 <- c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_s <- tfff6 U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_s <- tfff6 U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_t565a <- inline_Keyboard_poll_queue_push_37_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t565a <- inline_Keyboard_poll_queue_push_37_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_values <- inline_Keyboard_poll_queue_push_37_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 808d9 Copy32 [Register(0x20), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_values <- inline_Keyboard_poll_queue_push_37_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 20 24 
# inline_Keyboard_poll_queue_push_37_t1d36 <- inline_Keyboard_poll_queue_push_37_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t1d36 <- inline_Keyboard_poll_queue_push_37_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x24), Register(0x24)], resolved: None }
# inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 808dc Copy32 [Register(0x20), Register(0x30)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 20 30 
# 808df AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000104=260)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 30 04 01 00 00 
# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 808e5 Load8 [Register(0x30), Register(0x28)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 30 28 
# inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 808e8 LoadImm32 [Register(0x2c), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 2c 00 00 00 00 
# 808ee Copy8 [Register(0x28), Register(0x2c)]
#       inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 28 2c 
# inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 808f1 ClearCarry []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 
# 808f2 AddCarry32_1 [Register(0x24), Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 24 2c 24 
# 808f6 AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_t1d36 Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 
# inline_Keyboard_poll_queue_push_37_t531d <- inline_Keyboard_poll_queue_push_37_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t531d <- inline_Keyboard_poll_queue_push_37_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 808f7 Store8 [Register(0x18), Register(0x24)]
#       mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 18 24 
# inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 808fa Copy32 [Register(0x20), Register(0x30)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 20 30 
# 808fd AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000104=260)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 30 04 01 00 00 
# inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x20), Register(0x20)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 80903 Copy32 [Register(0x20), Register(0x30)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 20 30 
# 80906 AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000104=260)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 30 04 01 00 00 
# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 8090c Load8 [Register(0x30), Register(0x28)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 30 28 
# inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 8090f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 
# 80912 Add8NoCarryIn [Register(0x28), Register(0x00), Register(0x18)]
#       inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 28 00 18 
# mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 80916 Store8 [Register(0x18), Register(0x30)]
#       mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 18 30 
# goto inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_Keyboard_poll_queue_push_37_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_Keyboard_poll_queue_push_37_function_end_queue_push)], resolved: None }
# :inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# inline_Keyboard_poll_queue_push_37_function_end_queue_push
# goto Keyboard_poll_if_end_6 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# 80919 JmpImm [Label24(Keyboard_poll_if_end_6)]
#       goto Keyboard_poll_if_end_6 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
70 1d 09 08 
# :Keyboard_poll_if_else_0_8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_end_6
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Number(U8, 0)
# 8091d LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Number(U8, 0)
04 39 00 
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80920 LoadImm32 [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 34 22 04 08 00 
# td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 2))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# 80926 Copy32 [Register(0x1c), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
21 1c 20 
# 80929 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
32 20 02 00 00 00 
# ted94 <- t4c8b Add Var(te5cf) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 8092f ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
03 
# 80930 AddCarry32_1 [Register(0x34), Register(0x20), Register(0x34)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
30 34 20 34 
# 80934 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
31 
# t2ca9 <- mem[ted94] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 80935 Load8 [Register(0x34), Register(0x18)]
#       t2ca9 <- mem[ted94] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
05 34 18 
# if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# 80938 Cmp8 [Register(0x39), Register(0x18)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
15 39 18 
# 8093b JzImm [Label24(Keyboard_poll_if_else_0_11)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
72 72 09 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 8093f LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 
# t7ebd <- mem[tdaa] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 80945 Load8 [Register(0x20), Register(0x38)]
#       t7ebd <- mem[tdaa] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 38 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 80948 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 
# if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 8094b Cmp8 [Register(0x38), Register(0x39)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 38 39 
# 8094e JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 62 09 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 80952 LoadImm32 [Register(0x34), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 34 00 10 0f 00 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80958 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 
# mem[td45b] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# 8095b Store8 [Register(0x39), Register(0x34)]
#       mem[td45b] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
06 39 34 
# goto Keyboard_poll_if_end_12 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# 8095e JmpImm [Label24(Keyboard_poll_if_end_12)]
#       goto Keyboard_poll_if_end_12 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
70 6e 09 08 
# :Keyboard_poll_if_else_0_14 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 80962 LoadImm32 [Register(0x34), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 34 00 10 0f 00 
# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 80968 LoadImm8 [Register(0x39), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 39 01 
# mem[td45b] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# 8096b Store8 [Register(0x39), Register(0x34)]
#       mem[td45b] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
06 39 34 
# :Keyboard_poll_if_end_12 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# 8096e JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
70 72 09 08 
# :Keyboard_poll_if_else_0_11 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Number(U8, 0)
# 80972 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Number(U8, 0)
04 39 00 
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80975 LoadImm32 [Register(0x34), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 34 22 04 08 00 
# td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 3))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# 8097b AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 3))
32 1c 03 00 00 00 
# t6cd9 <- t4c8b Add Var(t5e63) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 80981 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
03 
# 80982 AddCarry32_1 [Register(0x34), Register(0x1c), Register(0x34)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
30 34 1c 34 
# 80986 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
31 
# t7b09 <- mem[t6cd9] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 80987 Load8 [Register(0x34), Register(0x18)]
#       t7b09 <- mem[t6cd9] U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
05 34 18 
# if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# 8098a Cmp8 [Register(0x39), Register(0x18)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
15 39 18 
# 8098d JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
72 a1 09 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 80991 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 
# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 80997 LoadImm8 [Register(0x39), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 39 01 
# mem[tdaa] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# 8099a Store8 [Register(0x39), Register(0x20)]
#       mem[tdaa] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
06 39 20 
# goto Keyboard_poll_if_end_15 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# 8099d JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
70 ad 09 08 
# :Keyboard_poll_if_else_0_17 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 809a1 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 809a7 LoadImm8 [Register(0x39), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 39 00 
# mem[tdaa] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 809aa Store8 [Register(0x39), Register(0x20)]
#       mem[tdaa] <- tb36e U8 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 39 20 
# :Keyboard_poll_if_end_15 Some('/home/john/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 809ad JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 809af Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Local a Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([68, 69, 70, 71])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([72])
# Var diff (Local diff Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_init_50_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_init_50_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_init_50_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 (tb2e9 Ident("s")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_tf462 (tf462 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d (t531d Ident("n")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d (t531d Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d (t531d Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 (t4760 AddressOf(PtrFieldDeref("c", "stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t5fbe (t5fbe Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(USIZE)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([110])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([101])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([72])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([109])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_32_12_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_mul32_32_12_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_mul32_32_12_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_mul32_by10_13_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_putc_15_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_15_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_15_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_15_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_15_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_15_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_16_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_16_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_16_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_16_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_16_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_16_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_17_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_17_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_17_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_18_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_18_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_18_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_19_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_19_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_19_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_20_c (Arg0 c Number(U8)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_20_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_20_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_20_tac13 (tac13 Ident("c")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_21_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_21_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_21_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_21_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_22_c (Arg0 c Number(U8)) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_22_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_22_tac13 (tac13 Ident("c")) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_23_c (Arg0 c Number(U8)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_23_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_23_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_24_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_putc_24_c (Arg0 c Number(U8)) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_putc_24_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_putc_24_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var inline_RpnCalc_handle_putc_24_tac13 (tac13 Ident("c")) Reg(U8) Some([108])
# Var inline_RpnCalc_handle_stack_get_48_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_get_48_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_get_48_n (Arg1 n Number(USIZE)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_48_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_t531d (t531d Ident("n")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_48_t5abb (t5abb Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_get_48_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_get_48_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_pop_52_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_pop_52_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_pop_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_52_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_stack_pop_52_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_pop_53_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_pop_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_pop_53_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_pop_53_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_stack_pop_53_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_54_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_54_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_54_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_54_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_54_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_54_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_54_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_55_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_55_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_55_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_55_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_55_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_55_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_55_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_56_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_56_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_56_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_56_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_57_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_57_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_57_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_57_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_58_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_58_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_58_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_58_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_58_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_58_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_58_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_stack_push_58_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_59_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_handle_stack_push_59_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t531d (t531d Ident("n")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t587d (t587d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_stack_push_59_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_RpnCalc_handle_stack_push_59_tf90a (tf90a Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_59_values (Local values Ptr(Number(USIZE)) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var product (Local product Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var quotient (Local quotient Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var stack (Local stack Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([110])
# Var stack_count_usize (Local stack_count_usize Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([116])
# Var sum (Local sum Number(USIZE) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var t1501 (t1501 Number(U8, 113)) Reg(U8) Some([73])
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([60, 61, 62, 63])
# Var t18a9 (t18a9 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })) Reg(U8) Some([73])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([60, 61, 62, 63])
# Var t2398 (t2398 Call(Call { function: "print_dec32", parameters: [Ident("product")] })) Reg(U8) Some([73])
# Var t24a4 (t24a4 Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t2597 (t2597 Number(U8, 43)) Reg(U8) Some([117])
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([60, 61, 62, 63])
# Var t2ac9 (t2ac9 Number(U8, 57)) Reg(U8) Some([73])
# Var t2af9 (t2af9 Call(Call { function: "putc", parameters: [Number(U8, 69)] })) Reg(U8) Some([73])
# Var t2d0c (t2d0c Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })) Reg(U8) Some([73])
# Var t352b (t352b Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })) Reg(U8) Some([73])
# Var t39b5 (t39b5 Number(U8, 115)) Reg(U8) Some([117])
# Var t3f70 (t3f70 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) Reg(U32) Some([60, 61, 62, 63])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([64, 65, 66, 67])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([117])
# Var t49a (t49a Number(U8, 100)) Reg(U8) Some([73])
# Var t4e08 (t4e08 Number(U8, 99)) Reg(U8) Some([73])
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([100])
# Var t670d (t670d Ident("sum")) Reg(U32) Some([60, 61, 62, 63])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([76, 77, 78, 79])
# Var t701d (t701d Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })) Reg(U8) Some([73])
# Var t7e7f (t7e7f Call(Call { function: "putc", parameters: [Number(U8, 58)] })) Reg(U8) Some([73])
# Var t7f48 (t7f48 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }) Reg(U32) Some([76, 77, 78, 79])
# Var t7ff1 (t7ff1 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([73])
# Var t8103 (t8103 Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })) Reg(U8) Some([73])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([104, 105, 106, 107])
# Var t8b2f (t8b2f Number(U8, 45)) Reg(U8) Some([117])
# Var t9046 (t9046 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })) Reg(U8) Some([73])
# Var t969e (t969e Number(U8, 42)) Reg(U8) Some([117])
# Var t9c38 (t9c38 Number(U8, 82)) Reg(U8) Some([73])
# Var ta378 (ta378 Call(Call { function: "print_dec32", parameters: [Ident("sum")] })) Reg(U8) Some([73])
# Var ta622 (ta622 Call(Call { function: "print_dec8", parameters: [Ident("i")] })) Reg(U8) Some([73])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([73])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([68, 69, 70, 71])
# Var tacf6 (tacf6 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })) Reg(U32) Some([60, 61, 62, 63])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([60, 61, 62, 63])
# Var tb087 (tb087 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })) Reg(U8) Some([73])
# Var tb1ab (tb1ab Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })) Reg(U8) Some([73])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var tb303 (tb303 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([73])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })) Reg(U32) Some([64, 65, 66, 67])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100])
# Var tb507 (tb507 Number(U8, 69)) Reg(U8) Some([73])
# Var tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var tbf93 (tbf93 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var tca36 (tca36 Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })) Reg(U8) Some([73])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([73])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([64, 65, 66, 67])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([117])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([72])
# Var te25f (te25f Call(Call { function: "print_dec32", parameters: [Ident("diff")] })) Reg(U8) Some([73])
# Var te668 (te668 Number(U8, 47)) Reg(U8) Some([117])
# Var tebdf (tebdf Number(U8, 58)) Reg(U8) Some([108])
# Var tec99 (tec99 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([73])
# Var tf48d (tf48d Number(U8, 48)) Reg(U8) Some([73])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([100])
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([76, 77, 78, 79])
# 809b4 Copy32 [Register(0x00), Register(0x44)]
#       Save function parameter 'c' registers [0, 1, 2, 3] to locals [68, 69, 70, 71].
21 00 44 
# 809b7 Copy8 [Register(0x04), Register(0x48)]
#       Save function parameter 'ch' registers [4] to locals [72].
0b 04 48 
# tbc15 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(28,5))
# Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 809ba Copy32 [Register(0x44), Register(0x3c)]
#       tbc15 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(28,5))
#       Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 
# stack <- tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(28,5))
# Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# 809bd Copy32 [Register(0x3c), Register(0x70)]
#       stack <- tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(28,5))
#       Assign { target: Ident("stack"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 70 
# a <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(30,5))
# Assign { target: Ident("a"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
# Number(U8, 0)
# 809c0 LoadImm8 [Register(0x3c), Constant8(0x00=0)]
#       a <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(30,5))
#       Assign { target: Ident("a"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
#       Number(U8, 0)
04 3c 00 
# b <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(31,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
# Number(U8, 0)
# 809c3 LoadImm8 [Register(0x40), Constant8(0x00=0)]
#       b <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(31,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
#       Number(U8, 0)
04 40 00 
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2597 <- 0n43/0x2bu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Number(U8, 43)
# 809c6 LoadImm8 [Register(0x75), Constant8(0x2b=43)]
#       t2597 <- 0n43/0x2bu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
#       Number(U8, 43)
04 75 2b 
# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# 809c9 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
15 48 75 
# 809cc JzImm [Label24(RpnCalc_handle_if_true_0_1)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
72 d4 09 08 
# 809d0 JmpImm [Label24(RpnCalc_handle_if_else_0_2)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
70 db 09 08 
# :RpnCalc_handle_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 809d4 LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 
# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809d7 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 0a 08 
# :RpnCalc_handle_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t8b2f <- 0n45/0x2du8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Number(U8, 45)
# 809db LoadImm8 [Register(0x75), Constant8(0x2d=45)]
#       t8b2f <- 0n45/0x2du8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
#       Number(U8, 45)
04 75 2d 
# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# 809de Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
15 48 75 
# 809e1 JzImm [Label24(RpnCalc_handle_if_true_1_3)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
72 e9 09 08 
# 809e5 JmpImm [Label24(RpnCalc_handle_if_else_1_4)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
70 f0 09 08 
# :RpnCalc_handle_if_true_1_3 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 809e9 LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 
# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809ec JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 0a 08 
# :RpnCalc_handle_if_else_1_4 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t969e <- 0n42/0x2au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Number(U8, 42)
# 809f0 LoadImm8 [Register(0x75), Constant8(0x2a=42)]
#       t969e <- 0n42/0x2au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
#       Number(U8, 42)
04 75 2a 
# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# 809f3 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
15 48 75 
# 809f6 JzImm [Label24(RpnCalc_handle_if_true_2_5)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
72 fe 09 08 
# 809fa JmpImm [Label24(RpnCalc_handle_if_else_2_6)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
70 05 0a 08 
# :RpnCalc_handle_if_true_2_5 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 809fe LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 
# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 80a01 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 0a 08 
# :RpnCalc_handle_if_else_2_6 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# te668 <- 0n47/0x2fu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Number(U8, 47)
# 80a05 LoadImm8 [Register(0x75), Constant8(0x2f=47)]
#       te668 <- 0n47/0x2fu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
#       Number(U8, 47)
04 75 2f 
# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# 80a08 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
15 48 75 
# 80a0b JzImm [Label24(RpnCalc_handle_if_true_3_7)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
72 13 0a 08 
# 80a0f JmpImm [Label24(RpnCalc_handle_if_else_3_8)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
70 1a 0a 08 
# :RpnCalc_handle_if_true_3_7 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 80a13 LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 
# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 80a16 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 0a 08 
# :RpnCalc_handle_if_else_3_8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t39b5 <- 0n115/0x73u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Number(U8, 115)
# 80a1a LoadImm8 [Register(0x75), Constant8(0x73=115)]
#       t39b5 <- 0n115/0x73u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
#       Number(U8, 115)
04 75 73 
# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# 80a1d Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
15 48 75 
# 80a20 JzImm [Label24(RpnCalc_handle_if_true_4_9)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
72 28 0a 08 
# 80a24 JmpImm [Label24(RpnCalc_handle_if_else_4_10)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
70 2f 0a 08 
# :RpnCalc_handle_if_true_4_9 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 80a28 LoadImm8 [Register(0x74), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 74 02 
# goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# 80a2b JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
70 32 0a 08 
# :RpnCalc_handle_if_else_4_10 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80a2f LoadImm8 [Register(0x74), Constant8(0x00=0)]
#       stack_needed <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 74 00 
# :RpnCalc_handle_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Ident("stack_needed")
# 80a32 Copy8 [Register(0x74), Register(0x75)]
#       t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Ident("stack_needed")
0b 74 75 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Number(U8, 0)
# 80a35 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 
# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# 80a38 Cmp8 [Register(0x75), Register(0x64)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
15 75 64 
# 80a3b JcImm [Label24(RpnCalc_handle_if_else_0_13)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
71 e5 0a 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 80a3f Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 44 4c 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 80a42 Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 4c 50 
# 80a45 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 50 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 80a4b Load8 [Register(0x50), Register(0x64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 50 64 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 80a4e LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 80a51 Cmp8 [Register(0x64), Register(0x65)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 64 65 
# 80a54 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 e1 0a 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# 80a58 Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       AddressOf(PtrFieldDeref("c", "stack"))
21 4c 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 80a5b Copy32 [Register(0x4c), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 4c 54 
# 80a5e AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 54 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 80a64 Load32 [Register(0x54), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 54 58 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 80a67 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 50 54 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 80a6a Copy32 [Register(0x58), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 58 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 80a6d Copy32 [Register(0x54), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 54 58 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 80a70 Copy32 [Register(0x58), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 58 60 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80a73 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 54 5c 
# 80a76 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80a7c Load32 [Register(0x5c), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 5c 58 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80a7f LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 80a85 Mul8_16 [Register(0x58), Register(0x00), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 58 00 58 
# 80a89 LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 5a 00 
# 80a8c LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 5b 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80a8f ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 80a90 AddCarry32_1 [Register(0x60), Register(0x58), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 60 58 58 
# 80a94 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80a95 Store32_1 [Register(0x50), Register(0x58)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 50 58 
# 80a98 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80a99 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 54 5c 
# 80a9c AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80aa2 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 54 5c 
# 80aa5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80aab Load32 [Register(0x5c), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 5c 58 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80aae Copy32 [Register(0x58), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 58 50 
# 80ab1 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 50 01 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80ab7 Store32_1 [Register(0x50), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 50 5c 
# 80aba Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 80abb Copy32 [Register(0x4c), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 4c 54 
# 80abe AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 54 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 80ac4 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 50 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 80aca Store32_1 [Register(0x50), Register(0x54)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 50 54 
# 80acd Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 80ace Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 4c 50 
# 80ad1 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 50 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80ad7 LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 80ada Store8 [Register(0x65), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 65 50 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# 80add JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
70 e1 0a 08 
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# 80ae1 JmpImm [Label24(RpnCalc_handle_if_end_11)]
#       goto RpnCalc_handle_if_end_11 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
70 e5 0a 08 
# :RpnCalc_handle_if_else_0_13 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_end_11
# t7f48 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }
# Ident("stack")
# 80ae5 Copy32 [Register(0x70), Register(0x4c)]
#       t7f48 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }
#       Ident("stack")
21 70 4c 
# tbf93 <- t7f48 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
# 80ae8 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       tbf93 <- t7f48 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# stack_count_usize <- mem[tbf93] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# 80aee Load32 [Register(0x4c), Register(0x4c)]
#       stack_count_usize <- mem[tbf93] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
22 4c 4c 
# stack_count <- stack_count_usize[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(53,5))
# Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(U8, 0)) }
# Index("stack_count_usize", Number(U8, 0))
# 80af1 Copy8 [Register(0x4c), Register(0x6e)]
#       stack_count <- stack_count_usize[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(53,5))
#       Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(U8, 0)) }
#       Index("stack_count_usize", Number(U8, 0))
0b 4c 6e 
# t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_needed")
# 80af4 Copy8 [Register(0x74), Register(0x75)]
#       t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_needed")
0b 74 75 
# t6001 <- stack_count U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_count")
# 80af7 Copy8 [Register(0x6e), Register(0x64)]
#       t6001 <- stack_count U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 6e 64 
# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# 80afa Cmp8 [Register(0x75), Register(0x64)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
15 75 64 
# 80afd JcImm [Label24(RpnCalc_handle_if_else_0_16)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
71 88 0b 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# RpnCalc_handle_if_true_0_15
# tb507 <- 0n69/0x45u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 69)] })
# Number(U8, 69)
# 80b01 LoadImm8 [Register(0x49), Constant8(0x45=69)]
#       tb507 <- 0n69/0x45u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 69)] })
#       Number(U8, 69)
04 49 45 
# inline_RpnCalc_handle_putc_15_c <- tb507 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 69)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_15_c <- tb507 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 69)] })\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b04 Out0 [Register(0x49)]
#       IoWrite0
68 49 
# inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b06 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_15_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 80b09 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 80b0f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 19 0b 08 00 
# 80b15 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 80b19 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_15_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_15_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_15_function_end_putc None
# inline_RpnCalc_handle_putc_15_function_end_putc
# t9c38 <- 0n82/0x52u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 80b1f LoadImm8 [Register(0x49), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 49 52 
# inline_RpnCalc_handle_putc_16_c <- t9c38 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_16_c <- t9c38 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b22 Out0 [Register(0x49)]
#       IoWrite0
68 49 
# inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b24 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 80b27 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 80b2d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 37 0b 08 00 
# 80b33 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 80b37 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_16_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_16_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_16_function_end_putc None
# inline_RpnCalc_handle_putc_16_function_end_putc
# t9c38 <- 0n82/0x52u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 80b3d LoadImm8 [Register(0x49), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 49 52 
# inline_RpnCalc_handle_putc_17_c <- t9c38 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_c <- t9c38 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b40 Out0 [Register(0x49)]
#       IoWrite0
68 49 
# inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b42 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_17_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 80b45 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 80b4b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 55 0b 08 00 
# 80b51 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 80b55 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_17_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_17_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_17_function_end_putc None
# inline_RpnCalc_handle_putc_17_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 80b5b LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 
# inline_RpnCalc_handle_putc_18_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 80b5e Copy8 [Register(0x75), Register(0x49)]
#       inline_RpnCalc_handle_putc_18_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 49 
# inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b61 Out0 [Register(0x49)]
#       IoWrite0
68 49 
# inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b63 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 80b66 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 80b6c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 76 0b 08 00 
# 80b72 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 80b76 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_18_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_18_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_18_function_end_putc None
# inline_RpnCalc_handle_putc_18_function_end_putc
# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(U8, 1)) }
# Number(U8, 1)
# 80b7c LoadImm8 [Register(0x64), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(U8, 1)) }
#       Number(U8, 1)
04 64 01 
# return Some(tfcd) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(U8, 1)) }
# 80b7f Copy8 [Register(0x64), Register(0x00)]
#       return Some(tfcd) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(U8, 1)) }
0b 64 00 
# 80b82 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# goto RpnCalc_handle_if_end_14 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# 80b84 JmpImm [Label24(RpnCalc_handle_if_end_14)]
#       goto RpnCalc_handle_if_end_14 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
70 88 0b 08 
# :RpnCalc_handle_if_else_0_16 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Ident("stack_needed")
# 80b88 Copy8 [Register(0x74), Register(0x75)]
#       t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Ident("stack_needed")
0b 74 75 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Number(U8, 0)
# 80b8b LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 
# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# 80b8e Cmp8 [Register(0x75), Register(0x64)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
15 75 64 
# 80b91 JcImm [Label24(RpnCalc_handle_if_else_0_19)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
71 e9 0b 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# 80b95 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
#       Ident("stack")
21 70 4c 
# inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80b98 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 4c 3c 
# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80b9b Copy32 [Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 50 
# 80b9e AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80ba4 Copy32 [Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 50 
# 80ba7 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80bad Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 50 4c 
# inline_RpnCalc_handle_stack_pop_52_te089 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80bb0 AddImm32IgnoreCarry [Register(0x4c), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_52_te089 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 4c ff ff ff ff 
# mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80bb6 Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 4c 50 
# 80bb9 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# inline_RpnCalc_handle_stack_pop_52_t587d <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t587d <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_values <- inline_RpnCalc_handle_stack_pop_52_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 80bba Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_values <- inline_RpnCalc_handle_stack_pop_52_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 3c 4c 
# inline_RpnCalc_handle_stack_pop_52_tf90a <- inline_RpnCalc_handle_stack_pop_52_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 80bbd Copy32 [Register(0x4c), Register(0x54)]
#       inline_RpnCalc_handle_stack_pop_52_tf90a <- inline_RpnCalc_handle_stack_pop_52_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 4c 54 
# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80bc0 Copy32 [Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 50 
# 80bc3 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80bc9 Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 50 4c 
# inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80bcc LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 80bd2 Mul8_16 [Register(0x4c), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 4c 00 3c 
# 80bd6 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 3e 00 
# 80bd9 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 3f 00 
# inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80bdc ClearCarry []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 80bdd AddCarry32_1 [Register(0x54), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 54 3c 3c 
# 80be1 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_tf90a Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80be2 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 3c 3c 
# a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# goto RpnCalc_handle_if_end_17 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# 80be5 JmpImm [Label24(RpnCalc_handle_if_end_17)]
#       goto RpnCalc_handle_if_end_17 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
70 e9 0b 08 
# :RpnCalc_handle_if_else_0_19 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# Ident("stack_needed")
# 80be9 Copy8 [Register(0x74), Register(0x75)]
#       t4671 <- stack_needed U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
#       Ident("stack_needed")
0b 74 75 
# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# Number(U8, 1)
# 80bec LoadImm8 [Register(0x64), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
#       Number(U8, 1)
04 64 01 
# if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# 80bef Cmp8 [Register(0x75), Register(0x64)]
#       if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
15 75 64 
# 80bf2 JcImm [Label24(RpnCalc_handle_if_else_0_22)]
#       if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
71 4a 0c 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# 80bf6 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
#       Ident("stack")
21 70 4c 
# inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80bf9 Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 4c 40 
# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80bfc Copy32 [Register(0x40), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 50 
# 80bff AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80c05 Copy32 [Register(0x40), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 50 
# 80c08 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80c0e Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 50 4c 
# inline_RpnCalc_handle_stack_pop_53_te089 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80c11 AddImm32IgnoreCarry [Register(0x4c), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_53_te089 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 4c ff ff ff ff 
# mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80c17 Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 4c 50 
# 80c1a Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# inline_RpnCalc_handle_stack_pop_53_t587d <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t587d <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_values <- inline_RpnCalc_handle_stack_pop_53_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 80c1b Copy32 [Register(0x40), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_values <- inline_RpnCalc_handle_stack_pop_53_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(12,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 4c 
# inline_RpnCalc_handle_stack_pop_53_tf90a <- inline_RpnCalc_handle_stack_pop_53_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 80c1e Copy32 [Register(0x4c), Register(0x54)]
#       inline_RpnCalc_handle_stack_pop_53_tf90a <- inline_RpnCalc_handle_stack_pop_53_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 4c 54 
# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80c21 Copy32 [Register(0x40), Register(0x50)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 50 
# 80c24 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 50 40 00 00 00 
# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80c2a Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 50 4c 
# inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80c2d LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 80c33 Mul8_16 [Register(0x4c), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 4c 00 40 
# 80c37 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 
# 80c3a LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 
# inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80c3d ClearCarry []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 80c3e AddCarry32_1 [Register(0x54), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 54 40 40 
# 80c42 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_tf90a Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80c43 Load32 [Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 40 40 
# b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop Some('/home/john/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# goto RpnCalc_handle_if_end_20 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# 80c46 JmpImm [Label24(RpnCalc_handle_if_end_20)]
#       goto RpnCalc_handle_if_end_20 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
70 4a 0c 08 
# :RpnCalc_handle_if_else_0_22 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2597 <- 0n43/0x2bu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Number(U8, 43)
# 80c4a LoadImm8 [Register(0x75), Constant8(0x2b=43)]
#       t2597 <- 0n43/0x2bu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
#       Number(U8, 43)
04 75 2b 
# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# 80c4d Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
15 48 75 
# 80c50 JzImm [Label24(RpnCalc_handle_if_true_0_24)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
72 58 0c 08 
# 80c54 JmpImm [Label24(RpnCalc_handle_if_else_0_25)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
70 98 0d 08 
# :RpnCalc_handle_if_true_0_24 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# 80c58 Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("b")
21 40 44 
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# 80c5b Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("a")
21 3c 68 
# sum <- tace9 Add Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 80c5e ClearCarry []
#       sum <- tace9 Add Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 
# 80c5f AddCarry32_1 [Register(0x44), Register(0x68), Register(0x40)]
#       sum <- tace9 Add Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 44 68 40 
# 80c63 AddCarry32_2 []
#       sum <- tace9 Add Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 
# t670d <- sum U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# Ident("sum")
# 80c64 Copy32 [Register(0x40), Register(0x3c)]
#       t670d <- sum U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
#       Ident("sum")
21 40 3c 
# None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# 80c67 Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=t670d None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 80c6a Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 75 
# 80c6c Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 74 
# 80c6e Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 73 
# 80c70 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 72 
# 80c72 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 71 
# 80c74 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 70 
# 80c76 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6e 
# 80c78 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6d 
# 80c7a Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6c 
# 80c7c Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6b 
# 80c7e Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6a 
# 80c80 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 69 
# 80c82 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 68 
# 80c84 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 65 
# 80c86 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 64 
# 80c88 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 63 
# 80c8a Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 62 
# 80c8c Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 61 
# 80c8e Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 60 
# 80c90 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5f 
# 80c92 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5e 
# 80c94 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5d 
# 80c96 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5c 
# 80c98 Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5b 
# 80c9a Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5a 
# 80c9c Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 59 
# 80c9e Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 58 
# 80ca0 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 57 
# 80ca2 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 56 
# 80ca4 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 55 
# 80ca6 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 54 
# 80ca8 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 53 
# 80caa Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 52 
# 80cac Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 51 
# 80cae Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 50 
# 80cb0 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4f 
# 80cb2 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4e 
# 80cb4 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4d 
# 80cb6 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4c 
# 80cb8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 
# 80cbe StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c c8 0c 08 00 
# 80cc4 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 28 2a 08 
# 80cc8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 
# 80cce Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4c 
# 80cd0 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4d 
# 80cd2 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4e 
# 80cd4 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4f 
# 80cd6 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 50 
# 80cd8 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 51 
# 80cda Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 52 
# 80cdc Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 53 
# 80cde Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 54 
# 80ce0 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 55 
# 80ce2 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 56 
# 80ce4 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 57 
# 80ce6 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 58 
# 80ce8 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 59 
# 80cea Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5a 
# 80cec Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5b 
# 80cee Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5c 
# 80cf0 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5d 
# 80cf2 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5e 
# 80cf4 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5f 
# 80cf6 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 60 
# 80cf8 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 61 
# 80cfa Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 62 
# 80cfc Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 63 
# 80cfe Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 64 
# 80d00 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 65 
# 80d02 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 68 
# 80d04 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 69 
# 80d06 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6a 
# 80d08 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6b 
# 80d0a Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6c 
# 80d0c Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6d 
# 80d0e Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6e 
# 80d10 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 70 
# 80d12 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 71 
# 80d14 Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 72 
# 80d16 Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 73 
# 80d18 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 74 
# 80d1a Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(t670d,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 75 
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 80d1c LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 
# inline_RpnCalc_handle_putc_19_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 80d1f Copy8 [Register(0x75), Register(0x49)]
#       inline_RpnCalc_handle_putc_19_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 49 
# inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80d22 Out0 [Register(0x49)]
#       IoWrite0
68 49 
# inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80d24 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_19_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 80d27 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 80d2d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 37 0d 08 00 
# 80d33 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 80d37 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_19_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_19_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_19_function_end_putc None
# inline_RpnCalc_handle_putc_19_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("stack")
# 80d3d Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("stack")
21 70 4c 
# t670d <- sum U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("sum")
# 80d40 Copy32 [Register(0x40), Register(0x3c)]
#       t670d <- sum U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("sum")
21 40 3c 
# inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# 80d43 Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
21 4c 40 
# inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t587d <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t587d <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_values <- inline_RpnCalc_handle_stack_push_54_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 80d46 Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_54_values <- inline_RpnCalc_handle_stack_push_54_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 
# inline_RpnCalc_handle_stack_push_54_tf90a <- inline_RpnCalc_handle_stack_push_54_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 80d49 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_54_tf90a <- inline_RpnCalc_handle_stack_push_54_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80d4c Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 80d4f AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80d55 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80d58 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 80d5e Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 
# 80d62 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 
# 80d65 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 
# inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80d68 ClearCarry []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 80d69 AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 
# 80d6d AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_tf90a Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_stack_push_54_t531d <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t531d <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80d6e Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 
# 80d71 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80d72 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 80d75 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80d7b Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 80d7e AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80d84 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80d87 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 
# 80d8a AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80d90 Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 
# 80d93 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_54_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80d94 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_0_25 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t8b2f <- 0n45/0x2du8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Number(U8, 45)
# 80d98 LoadImm8 [Register(0x75), Constant8(0x2d=45)]
#       t8b2f <- 0n45/0x2du8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
#       Number(U8, 45)
04 75 2d 
# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# 80d9b Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
15 48 75 
# 80d9e JzImm [Label24(RpnCalc_handle_if_true_1_26)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
72 a6 0d 08 
# 80da2 JmpImm [Label24(RpnCalc_handle_if_else_1_27)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
70 f1 0e 08 
# :RpnCalc_handle_if_true_1_26 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("b")
# 80da6 Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("b")
21 40 44 
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("a")
# 80da9 Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("a")
21 3c 68 
# diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# 80dac Copy32 [Register(0x68), Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
21 68 00 
# 80daf Invert8 [Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 00 
# 80db1 Invert8 [Register(0x01)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 01 
# 80db3 Invert8 [Register(0x02)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 02 
# 80db5 Invert8 [Register(0x03)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 03 
# 80db7 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
32 00 01 00 00 00 
# 80dbd ClearCarry []
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
03 
# 80dbe AddCarry32_1 [Register(0x44), Register(0x00), Register(0x3c)]
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
30 44 00 3c 
# 80dc2 AddCarry32_2 []
#       diff <- tace9 Subtract Var(t8792) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
31 
# t17ee <- diff U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# 80dc3 Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=t17ee None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 80dc6 Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 75 
# 80dc8 Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 74 
# 80dca Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 73 
# 80dcc Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 72 
# 80dce Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 71 
# 80dd0 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 70 
# 80dd2 Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6e 
# 80dd4 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6d 
# 80dd6 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6c 
# 80dd8 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6b 
# 80dda Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6a 
# 80ddc Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 69 
# 80dde Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 68 
# 80de0 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 65 
# 80de2 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 64 
# 80de4 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 63 
# 80de6 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 62 
# 80de8 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 61 
# 80dea Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 60 
# 80dec Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5f 
# 80dee Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5e 
# 80df0 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5d 
# 80df2 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5c 
# 80df4 Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5b 
# 80df6 Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5a 
# 80df8 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 59 
# 80dfa Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 58 
# 80dfc Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 57 
# 80dfe Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 56 
# 80e00 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 55 
# 80e02 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 54 
# 80e04 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 53 
# 80e06 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 52 
# 80e08 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 51 
# 80e0a Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 50 
# 80e0c Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4f 
# 80e0e Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4e 
# 80e10 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4d 
# 80e12 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4c 
# 80e14 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 
# 80e1a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 24 0e 08 00 
# 80e20 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 28 2a 08 
# 80e24 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 
# 80e2a Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4c 
# 80e2c Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4d 
# 80e2e Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4e 
# 80e30 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4f 
# 80e32 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 50 
# 80e34 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 51 
# 80e36 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 52 
# 80e38 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 53 
# 80e3a Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 54 
# 80e3c Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 55 
# 80e3e Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 56 
# 80e40 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 57 
# 80e42 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 58 
# 80e44 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 59 
# 80e46 Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5a 
# 80e48 Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5b 
# 80e4a Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5c 
# 80e4c Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5d 
# 80e4e Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5e 
# 80e50 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5f 
# 80e52 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 60 
# 80e54 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 61 
# 80e56 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 62 
# 80e58 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 63 
# 80e5a Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 64 
# 80e5c Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 65 
# 80e5e Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 68 
# 80e60 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 69 
# 80e62 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6a 
# 80e64 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6b 
# 80e66 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6c 
# 80e68 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6d 
# 80e6a Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6e 
# 80e6c Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 70 
# 80e6e Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 71 
# 80e70 Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 72 
# 80e72 Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 73 
# 80e74 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 74 
# 80e76 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(t17ee,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 75 
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 80e78 LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 
# inline_RpnCalc_handle_putc_20_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 80e7b Copy8 [Register(0x75), Register(0x6c)]
#       inline_RpnCalc_handle_putc_20_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 6c 
# inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80e7e Out0 [Register(0x6c)]
#       IoWrite0
68 6c 
# inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80e80 Copy8 [Register(0x6c), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_20_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 6c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 80e83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 80e89 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 93 0e 08 00 
# 80e8f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 80e93 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_20_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_20_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_20_function_end_putc None
# inline_RpnCalc_handle_putc_20_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("stack")
# 80e99 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
#       Ident("stack")
21 70 4c 
# t17ee <- diff U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# 80e9c Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
21 4c 40 
# inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t587d <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t587d <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_values <- inline_RpnCalc_handle_stack_push_55_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 80e9f Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_55_values <- inline_RpnCalc_handle_stack_push_55_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 
# inline_RpnCalc_handle_stack_push_55_tf90a <- inline_RpnCalc_handle_stack_push_55_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 80ea2 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_55_tf90a <- inline_RpnCalc_handle_stack_push_55_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80ea5 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 80ea8 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80eae Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80eb1 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 80eb7 Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 
# 80ebb LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 
# 80ebe LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 
# inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80ec1 ClearCarry []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 80ec2 AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 
# 80ec6 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_tf90a Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_stack_push_55_t531d <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t531d <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80ec7 Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 
# 80eca Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80ecb Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 80ece AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80ed4 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 80ed7 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80edd Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80ee0 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 
# 80ee3 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80ee9 Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 
# 80eec Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_55_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80eed JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_1_27 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t969e <- 0n42/0x2au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Number(U8, 42)
# 80ef1 LoadImm8 [Register(0x75), Constant8(0x2a=42)]
#       t969e <- 0n42/0x2au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
#       Number(U8, 42)
04 75 2a 
# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# 80ef4 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
15 48 75 
# 80ef7 JzImm [Label24(RpnCalc_handle_if_true_2_28)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
72 ff 0e 08 
# 80efb JmpImm [Label24(RpnCalc_handle_if_else_2_29)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
70 7c 12 08 
# :RpnCalc_handle_if_true_2_28 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 80eff Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 40 44 
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 80f02 Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 3c 68 
# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f05 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 44 3c 
# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f08 Copy32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 68 44 
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f0b Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 3c 40 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f0e Copy32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 44 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 80f11 Mul8_16 [Register(0x40), Register(0x68), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 40 68 4c 
# 80f15 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 
# 80f18 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 80f1b Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 80f1e LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 
# 80f24 Copy8 [Register(0x6c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 6c 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 80f27 Copy8 [Register(0x69), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 69 48 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 80f2a LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 
# 80f30 Copy8 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 48 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 80f33 Mul8_16 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 54 50 50 
# 80f37 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 
# 80f3a LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 80f3d Copy8 [Register(0x51), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 51 64 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 80f40 Copy8 [Register(0x64), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 64 53 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 80f43 Copy8 [Register(0x50), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 50 64 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 80f46 Copy8 [Register(0x64), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 64 52 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80f49 LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 80f4c Copy8 [Register(0x65), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 65 51 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80f4f LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 80f52 Copy8 [Register(0x65), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 65 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 80f55 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 
# 80f56 AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 
# 80f5a AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 80f5b Copy8 [Register(0x69), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 69 48 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 80f5e LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 
# 80f64 Copy8 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 48 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 80f67 Mul8_16 [Register(0x40), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 40 50 50 
# 80f6b LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 
# 80f6e LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 80f71 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 80f74 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 
# 80f7a Copy8 [Register(0x6c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 6c 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 80f7d Mul8_16 [Register(0x54), Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 54 68 40 
# 80f81 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 42 00 
# 80f84 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 43 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 80f87 Copy32 [Register(0x50), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 80f8a ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 
# 80f8b AddCarry32_1 [Register(0x68), Register(0x40), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 68 40 50 
# 80f8f AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 80f90 Copy8 [Register(0x52), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 52 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 80f93 Copy8 [Register(0x6c), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 6c 53 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 80f96 Copy8 [Register(0x51), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 51 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 80f99 Copy8 [Register(0x6c), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 6c 52 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 80f9c Copy8 [Register(0x50), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 50 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 80f9f Copy8 [Register(0x6c), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 6c 51 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80fa2 LoadImm8 [Register(0x65), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 65 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 80fa5 Copy8 [Register(0x65), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 65 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 80fa8 Copy32 [Register(0x50), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 80fab ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 
# 80fac AddCarry32_1 [Register(0x4c), Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 68 40 
# 80fb0 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 
# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 80fb1 Copy32 [Register(0x40), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 40 4c 
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(32,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 80fb4 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(32,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# Index("a", Number(U8, 3))
# 80fba Copy8 [Register(0x3f), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
#       Index("a", Number(U8, 3))
0b 3f 49 
# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8 Some('/home/john/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# 80fbd Copy8 [Register(0x49), Register(0x41)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8 Some('/home/john/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
0b 49 41 
# inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# Index("a", Number(U8, 2))
# 80fc0 Copy8 [Register(0x3e), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
#       Index("a", Number(U8, 2))
0b 3e 49 
# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# 80fc3 Copy8 [Register(0x49), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
0b 49 40 
# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(36,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 80fc6 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(36,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 68 00 00 00 00 
# inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# Index("b", Number(U8, 3))
# 80fcc Copy8 [Register(0x47), Register(0x6d)]
#       inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
#       Index("b", Number(U8, 3))
0b 47 6d 
# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# 80fcf Copy8 [Register(0x6d), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
0b 6d 69 
# inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# Index("b", Number(U8, 2))
# 80fd2 Copy8 [Register(0x46), Register(0x6d)]
#       inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
#       Index("b", Number(U8, 2))
0b 46 6d 
# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8 Some('/home/john/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# 80fd5 Copy8 [Register(0x6d), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8 Some('/home/john/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
0b 6d 68 
# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 80fd8 Mul8_16 [Register(0x40), Register(0x44), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 40 44 50 
# 80fdc LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 
# 80fdf LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 80fe2 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 80fe5 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 58 00 00 00 00 
# 80feb Copy8 [Register(0x6c), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 6c 58 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 80fee Copy8 [Register(0x45), Register(0x6d)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 45 6d 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 80ff1 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 54 00 00 00 00 
# 80ff7 Copy8 [Register(0x6d), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 6d 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 80ffa Mul8_16 [Register(0x58), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 58 54 54 
# 80ffe LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 56 00 
# 81001 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 57 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 81004 Copy8 [Register(0x55), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 55 65 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 81007 Copy8 [Register(0x65), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 65 57 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 8100a Copy8 [Register(0x54), Register(0x65)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 54 65 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 8100d Copy8 [Register(0x65), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 65 56 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81010 LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6e 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 81013 Copy8 [Register(0x6e), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 6e 55 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81016 LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6e 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81019 Copy8 [Register(0x6e), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 6e 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 8101c ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 
# 8101d AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 
# 81021 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 81022 Copy8 [Register(0x45), Register(0x6d)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 45 6d 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 81025 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 54 00 00 00 00 
# 8102b Copy8 [Register(0x6d), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 6d 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 8102e Mul8_16 [Register(0x40), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 40 54 54 
# 81032 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 56 00 
# 81035 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 57 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 81038 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 8103b LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 58 00 00 00 00 
# 81041 Copy8 [Register(0x6c), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 6c 58 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 81044 Mul8_16 [Register(0x58), Register(0x44), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 58 44 40 
# 81048 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 42 00 
# 8104b LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 43 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 8104e Copy32 [Register(0x54), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 44 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81051 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 
# 81052 AddCarry32_1 [Register(0x44), Register(0x40), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 44 40 54 
# 81056 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 81057 Copy8 [Register(0x56), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 56 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 8105a Copy8 [Register(0x6c), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 6c 57 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 8105d Copy8 [Register(0x55), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 55 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 81060 Copy8 [Register(0x6c), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 6c 56 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 81063 Copy8 [Register(0x54), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 54 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 81066 Copy8 [Register(0x6c), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 6c 55 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81069 LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6e 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 8106c Copy8 [Register(0x6e), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 6e 54 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8106f Copy32 [Register(0x54), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 44 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81072 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 
# 81073 AddCarry32_1 [Register(0x50), Register(0x44), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 44 40 
# 81077 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 
# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 81078 Copy32 [Register(0x40), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 40 54 
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# 8107b Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
#       Ident("b_hi")
21 68 40 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 8107e Mul8_16 [Register(0x3c), Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 40 44 
# 81082 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 46 00 
# 81085 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 47 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 81088 Copy8 [Register(0x3d), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 8108b LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 50 00 00 00 00 
# 81091 Copy8 [Register(0x49), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 49 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 81094 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 81097 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 68 00 00 00 00 
# 8109d Copy8 [Register(0x6c), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 6c 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 810a0 Mul8_16 [Register(0x50), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 50 68 68 
# 810a4 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6a 00 
# 810a7 LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6b 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 810aa Copy8 [Register(0x69), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 69 48 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 810ad Copy8 [Register(0x48), Register(0x6b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 48 6b 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 810b0 Copy8 [Register(0x68), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 68 48 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 810b3 Copy8 [Register(0x48), Register(0x6a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 48 6a 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 810b6 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 810b9 Copy8 [Register(0x64), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 64 69 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 810bc LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 810bf Copy8 [Register(0x64), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 64 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 810c2 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 
# 810c3 AddCarry32_1 [Register(0x44), Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 44 68 44 
# 810c7 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 810c8 Copy8 [Register(0x41), Register(0x6c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 41 6c 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 810cb LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 68 00 00 00 00 
# 810d1 Copy8 [Register(0x6c), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 6c 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 810d4 Mul8_16 [Register(0x3c), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 3c 68 68 
# 810d8 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6a 00 
# 810db LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6b 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 810de Copy8 [Register(0x3d), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 810e1 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 50 00 00 00 00 
# 810e7 Copy8 [Register(0x49), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 49 50 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 810ea Mul8_16 [Register(0x50), Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 50 40 3c 
# 810ee LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3e 00 
# 810f1 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3f 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 810f4 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 68 40 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 810f7 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 
# 810f8 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 40 3c 68 
# 810fc AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 810fd Copy8 [Register(0x6a), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 6a 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 81100 Copy8 [Register(0x49), Register(0x6b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 49 6b 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 81103 Copy8 [Register(0x69), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 69 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 81106 Copy8 [Register(0x49), Register(0x6a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 49 6a 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 81109 Copy8 [Register(0x68), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 68 49 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 8110c Copy8 [Register(0x49), Register(0x69)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 49 69 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8110f LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81112 Copy8 [Register(0x64), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 64 68 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 81115 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 68 40 
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81118 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 
# 81119 AddCarry32_1 [Register(0x44), Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 44 40 3c 
# 8111d AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 
# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# 8111e ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
03 
# 8111f AddCarry32_1 [Register(0x54), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
30 54 3c 3c 
# 81123 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/home/john/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
31 
# inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 81124 Copy8 [Register(0x3d), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 3d 49 
# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
# 81127 Copy8 [Register(0x49), Register(0x3f)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 49 3f 
# inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 8112a Copy8 [Register(0x3c), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 3c 49 
# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
# 8112d Copy8 [Register(0x49), Register(0x3e)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 49 3e 
# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81130 LoadImm8 [Register(0x6c), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6c 00 
# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 81133 Copy8 [Register(0x6c), Register(0x3d)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 6c 3d 
# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81136 LoadImm8 [Register(0x6c), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6c 00 
# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81139 Copy8 [Register(0x6c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 6c 3c 
# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# 8113c Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("c")
21 4c 40 
# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"d\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8113f ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 
# 81140 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 40 3c 3c 
# 81144 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 
# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 81145 Copy32 [Register(0x3c), Register(0x40)]
#       product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 40 
# goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/home/john/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 None
# inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# t2754 <- product U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# Ident("product")
# 81148 Copy32 [Register(0x40), Register(0x3c)]
#       t2754 <- product U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
#       Ident("product")
21 40 3c 
# None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# 8114b Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=t2754 None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 8114e Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 75 
# 81150 Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 74 
# 81152 Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 73 
# 81154 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 72 
# 81156 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 71 
# 81158 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 70 
# 8115a Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6e 
# 8115c Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6d 
# 8115e Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6c 
# 81160 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6b 
# 81162 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6a 
# 81164 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 69 
# 81166 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 68 
# 81168 Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 65 
# 8116a Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 64 
# 8116c Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 63 
# 8116e Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 62 
# 81170 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 61 
# 81172 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 60 
# 81174 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5f 
# 81176 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5e 
# 81178 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5d 
# 8117a Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5c 
# 8117c Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5b 
# 8117e Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5a 
# 81180 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 59 
# 81182 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 58 
# 81184 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 57 
# 81186 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 56 
# 81188 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 55 
# 8118a Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 54 
# 8118c Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 53 
# 8118e Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 52 
# 81190 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 51 
# 81192 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 50 
# 81194 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4f 
# 81196 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4e 
# 81198 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4d 
# 8119a Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4c 
# 8119c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 
# 811a2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c ac 11 08 00 
# 811a8 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 28 2a 08 
# 811ac AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 
# 811b2 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4c 
# 811b4 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4d 
# 811b6 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4e 
# 811b8 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4f 
# 811ba Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 50 
# 811bc Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 51 
# 811be Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 52 
# 811c0 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 53 
# 811c2 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 54 
# 811c4 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 55 
# 811c6 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 56 
# 811c8 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 57 
# 811ca Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 58 
# 811cc Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 59 
# 811ce Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5a 
# 811d0 Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5b 
# 811d2 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5c 
# 811d4 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5d 
# 811d6 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5e 
# 811d8 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5f 
# 811da Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 60 
# 811dc Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 61 
# 811de Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 62 
# 811e0 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 63 
# 811e2 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 64 
# 811e4 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 65 
# 811e6 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 68 
# 811e8 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 69 
# 811ea Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6a 
# 811ec Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6b 
# 811ee Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6c 
# 811f0 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6d 
# 811f2 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6e 
# 811f4 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 70 
# 811f6 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 71 
# 811f8 Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 72 
# 811fa Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 73 
# 811fc Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 74 
# 811fe Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(t2754,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 75 
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 81200 LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 
# inline_RpnCalc_handle_putc_21_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 81203 Copy8 [Register(0x75), Register(0x49)]
#       inline_RpnCalc_handle_putc_21_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 49 
# inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 81206 Out0 [Register(0x49)]
#       IoWrite0
68 49 
# inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 81208 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_21_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 8120b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 81211 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 1b 12 08 00 
# 81217 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 8121b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_21_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_21_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_21_function_end_putc None
# inline_RpnCalc_handle_putc_21_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("stack")
# 81221 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("stack")
21 70 4c 
# t2754 <- product U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("product")
# 81224 Copy32 [Register(0x40), Register(0x3c)]
#       t2754 <- product U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("product")
21 40 3c 
# inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# 81227 Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
21 4c 40 
# inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t587d <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t587d <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_values <- inline_RpnCalc_handle_stack_push_56_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 8122a Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_56_values <- inline_RpnCalc_handle_stack_push_56_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 
# inline_RpnCalc_handle_stack_push_56_tf90a <- inline_RpnCalc_handle_stack_push_56_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 8122d Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_56_tf90a <- inline_RpnCalc_handle_stack_push_56_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81230 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 81233 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 81239 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 8123c LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 81242 Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 
# 81246 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 
# 81249 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 
# inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 8124c ClearCarry []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 8124d AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 
# 81251 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_tf90a Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_stack_push_56_t531d <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t531d <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81252 Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 
# 81255 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81256 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 81259 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 8125f Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 81262 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 81268 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 8126b Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 
# 8126e AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 81274 Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 
# 81277 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_56_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81278 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_2_29 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# te668 <- 0n47/0x2fu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Number(U8, 47)
# 8127c LoadImm8 [Register(0x75), Constant8(0x2f=47)]
#       te668 <- 0n47/0x2fu8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
#       Number(U8, 47)
04 75 2f 
# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# 8127f Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
15 48 75 
# 81282 JzImm [Label24(RpnCalc_handle_if_true_3_30)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
72 8a 12 08 
# 81286 JmpImm [Label24(RpnCalc_handle_if_else_3_31)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
70 7f 14 08 
# :RpnCalc_handle_if_true_3_30 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 8128a Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 40 44 
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 8128d Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 3c 68 
# Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# 81290 Copy32 [Register(0x44), Register(0x00)]
#       Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 44 00 
# 81293 Copy32 [Register(0x68), Register(0x04)]
#       Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 68 04 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228}
# Registers to save: [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 81296 Push8 [Register(0x75)]
#       Saving reg0x75 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 75 
# 81298 Push8 [Register(0x74)]
#       Saving reg0x74 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 74 
# 8129a Push8 [Register(0x73)]
#       Saving reg0x73 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 73 
# 8129c Push8 [Register(0x72)]
#       Saving reg0x72 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 72 
# 8129e Push8 [Register(0x71)]
#       Saving reg0x71 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 71 
# 812a0 Push8 [Register(0x70)]
#       Saving reg0x70 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 70 
# 812a2 Push8 [Register(0x6e)]
#       Saving reg0x6e before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6e 
# 812a4 Push8 [Register(0x6d)]
#       Saving reg0x6d before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6d 
# 812a6 Push8 [Register(0x6c)]
#       Saving reg0x6c before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6c 
# 812a8 Push8 [Register(0x6b)]
#       Saving reg0x6b before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6b 
# 812aa Push8 [Register(0x6a)]
#       Saving reg0x6a before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6a 
# 812ac Push8 [Register(0x69)]
#       Saving reg0x69 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 69 
# 812ae Push8 [Register(0x68)]
#       Saving reg0x68 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 68 
# 812b0 Push8 [Register(0x65)]
#       Saving reg0x65 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 65 
# 812b2 Push8 [Register(0x64)]
#       Saving reg0x64 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 64 
# 812b4 Push8 [Register(0x63)]
#       Saving reg0x63 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 63 
# 812b6 Push8 [Register(0x62)]
#       Saving reg0x62 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 62 
# 812b8 Push8 [Register(0x61)]
#       Saving reg0x61 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 61 
# 812ba Push8 [Register(0x60)]
#       Saving reg0x60 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 60 
# 812bc Push8 [Register(0x5f)]
#       Saving reg0x5f before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5f 
# 812be Push8 [Register(0x5e)]
#       Saving reg0x5e before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5e 
# 812c0 Push8 [Register(0x5d)]
#       Saving reg0x5d before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5d 
# 812c2 Push8 [Register(0x5c)]
#       Saving reg0x5c before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5c 
# 812c4 Push8 [Register(0x5b)]
#       Saving reg0x5b before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5b 
# 812c6 Push8 [Register(0x5a)]
#       Saving reg0x5a before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5a 
# 812c8 Push8 [Register(0x59)]
#       Saving reg0x59 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 59 
# 812ca Push8 [Register(0x58)]
#       Saving reg0x58 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 58 
# 812cc Push8 [Register(0x57)]
#       Saving reg0x57 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 57 
# 812ce Push8 [Register(0x56)]
#       Saving reg0x56 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 56 
# 812d0 Push8 [Register(0x55)]
#       Saving reg0x55 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 55 
# 812d2 Push8 [Register(0x54)]
#       Saving reg0x54 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 54 
# 812d4 Push8 [Register(0x53)]
#       Saving reg0x53 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 53 
# 812d6 Push8 [Register(0x52)]
#       Saving reg0x52 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 52 
# 812d8 Push8 [Register(0x51)]
#       Saving reg0x51 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 51 
# 812da Push8 [Register(0x50)]
#       Saving reg0x50 before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 50 
# 812dc Push8 [Register(0x4f)]
#       Saving reg0x4f before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4f 
# 812de Push8 [Register(0x4e)]
#       Saving reg0x4e before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4e 
# 812e0 Push8 [Register(0x4d)]
#       Saving reg0x4d before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4d 
# 812e2 Push8 [Register(0x4c)]
#       Saving reg0x4c before Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4c 
# 812e4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:div32))
32 0c fc ff ff ff 
# 812ea StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:div32))
25 0c f4 12 08 00 
# 812f0 JmpImm [Label24(:div32)]
#       PseudoCall(Label24(:div32))
70 15 1b 08 
# 812f4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:div32))
32 0c 04 00 00 00 
# 812fa Pop8 [Register(0x4c)]
#       Restoring reg0x4c after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4c 
# 812fc Pop8 [Register(0x4d)]
#       Restoring reg0x4d after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4d 
# 812fe Pop8 [Register(0x4e)]
#       Restoring reg0x4e after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4e 
# 81300 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4f 
# 81302 Pop8 [Register(0x50)]
#       Restoring reg0x50 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 50 
# 81304 Pop8 [Register(0x51)]
#       Restoring reg0x51 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 51 
# 81306 Pop8 [Register(0x52)]
#       Restoring reg0x52 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 52 
# 81308 Pop8 [Register(0x53)]
#       Restoring reg0x53 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 53 
# 8130a Pop8 [Register(0x54)]
#       Restoring reg0x54 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 54 
# 8130c Pop8 [Register(0x55)]
#       Restoring reg0x55 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 55 
# 8130e Pop8 [Register(0x56)]
#       Restoring reg0x56 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 56 
# 81310 Pop8 [Register(0x57)]
#       Restoring reg0x57 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 57 
# 81312 Pop8 [Register(0x58)]
#       Restoring reg0x58 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 58 
# 81314 Pop8 [Register(0x59)]
#       Restoring reg0x59 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 59 
# 81316 Pop8 [Register(0x5a)]
#       Restoring reg0x5a after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5a 
# 81318 Pop8 [Register(0x5b)]
#       Restoring reg0x5b after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5b 
# 8131a Pop8 [Register(0x5c)]
#       Restoring reg0x5c after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5c 
# 8131c Pop8 [Register(0x5d)]
#       Restoring reg0x5d after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5d 
# 8131e Pop8 [Register(0x5e)]
#       Restoring reg0x5e after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5e 
# 81320 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5f 
# 81322 Pop8 [Register(0x60)]
#       Restoring reg0x60 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 60 
# 81324 Pop8 [Register(0x61)]
#       Restoring reg0x61 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 61 
# 81326 Pop8 [Register(0x62)]
#       Restoring reg0x62 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 62 
# 81328 Pop8 [Register(0x63)]
#       Restoring reg0x63 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 63 
# 8132a Pop8 [Register(0x64)]
#       Restoring reg0x64 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 64 
# 8132c Pop8 [Register(0x65)]
#       Restoring reg0x65 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 65 
# 8132e Pop8 [Register(0x68)]
#       Restoring reg0x68 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 68 
# 81330 Pop8 [Register(0x69)]
#       Restoring reg0x69 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 69 
# 81332 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6a 
# 81334 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6b 
# 81336 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6c 
# 81338 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6d 
# 8133a Pop8 [Register(0x6e)]
#       Restoring reg0x6e after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6e 
# 8133c Pop8 [Register(0x70)]
#       Restoring reg0x70 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 70 
# 8133e Pop8 [Register(0x71)]
#       Restoring reg0x71 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 71 
# 81340 Pop8 [Register(0x72)]
#       Restoring reg0x72 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 72 
# 81342 Pop8 [Register(0x73)]
#       Restoring reg0x73 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 73 
# 81344 Pop8 [Register(0x74)]
#       Restoring reg0x74 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 74 
# 81346 Pop8 [Register(0x75)]
#       Restoring reg0x75 after Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 75 
# 81348 Copy32 [Register(0x00), Register(0x40)]
#       Some(quotient) <= call div32(tace9,t8792,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 00 40 
# t1ba9 <- quotient U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# Ident("quotient")
# 8134b Copy32 [Register(0x40), Register(0x3c)]
#       t1ba9 <- quotient U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
#       Ident("quotient")
21 40 3c 
# None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# 8134e Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 81351 Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 75 
# 81353 Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 74 
# 81355 Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 73 
# 81357 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 72 
# 81359 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 71 
# 8135b Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 70 
# 8135d Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6e 
# 8135f Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6d 
# 81361 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6c 
# 81363 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6b 
# 81365 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6a 
# 81367 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 69 
# 81369 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 68 
# 8136b Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 65 
# 8136d Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 64 
# 8136f Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 63 
# 81371 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 62 
# 81373 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 61 
# 81375 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 60 
# 81377 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5f 
# 81379 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5e 
# 8137b Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5d 
# 8137d Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5c 
# 8137f Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5b 
# 81381 Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5a 
# 81383 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 59 
# 81385 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 58 
# 81387 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 57 
# 81389 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 56 
# 8138b Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 55 
# 8138d Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 54 
# 8138f Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 53 
# 81391 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 52 
# 81393 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 51 
# 81395 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 50 
# 81397 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4f 
# 81399 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4e 
# 8139b Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4d 
# 8139d Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4c 
# 8139f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 
# 813a5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c af 13 08 00 
# 813ab JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 28 2a 08 
# 813af AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 
# 813b5 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4c 
# 813b7 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4d 
# 813b9 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4e 
# 813bb Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4f 
# 813bd Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 50 
# 813bf Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 51 
# 813c1 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 52 
# 813c3 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 53 
# 813c5 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 54 
# 813c7 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 55 
# 813c9 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 56 
# 813cb Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 57 
# 813cd Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 58 
# 813cf Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 59 
# 813d1 Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5a 
# 813d3 Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5b 
# 813d5 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5c 
# 813d7 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5d 
# 813d9 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5e 
# 813db Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5f 
# 813dd Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 60 
# 813df Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 61 
# 813e1 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 62 
# 813e3 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 63 
# 813e5 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 64 
# 813e7 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 65 
# 813e9 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 68 
# 813eb Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 69 
# 813ed Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6a 
# 813ef Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6b 
# 813f1 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6c 
# 813f3 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6d 
# 813f5 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6e 
# 813f7 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 70 
# 813f9 Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 71 
# 813fb Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 72 
# 813fd Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 73 
# 813ff Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 74 
# 81401 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(t1ba9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 75 
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 81403 LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 
# inline_RpnCalc_handle_putc_22_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 81406 Copy8 [Register(0x75), Register(0x49)]
#       inline_RpnCalc_handle_putc_22_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 49 
# inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 81409 Out0 [Register(0x49)]
#       IoWrite0
68 49 
# inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8140b Copy8 [Register(0x49), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_22_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 8140e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 81414 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 1e 14 08 00 
# 8141a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 8141e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_22_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_22_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_22_function_end_putc None
# inline_RpnCalc_handle_putc_22_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("stack")
# 81424 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("stack")
21 70 4c 
# t1ba9 <- quotient U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("quotient")
# 81427 Copy32 [Register(0x40), Register(0x3c)]
#       t1ba9 <- quotient U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("quotient")
21 40 3c 
# inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# 8142a Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
21 4c 40 
# inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t587d <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t587d <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_values <- inline_RpnCalc_handle_stack_push_57_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 8142d Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_57_values <- inline_RpnCalc_handle_stack_push_57_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 
# inline_RpnCalc_handle_stack_push_57_tf90a <- inline_RpnCalc_handle_stack_push_57_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 81430 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_57_tf90a <- inline_RpnCalc_handle_stack_push_57_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81433 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 81436 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 8143c Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 8143f LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 81445 Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 
# 81449 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 
# 8144c LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 
# inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 8144f ClearCarry []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 81450 AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 
# 81454 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_tf90a Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_stack_push_57_t531d <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t531d <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81455 Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 
# 81458 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81459 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 8145c AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81462 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 81465 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 8146b Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 8146e Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 
# 81471 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 81477 Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 
# 8147a Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_57_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8147b JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_3_31 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t39b5 <- 0n115/0x73u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Number(U8, 115)
# 8147f LoadImm8 [Register(0x75), Constant8(0x73=115)]
#       t39b5 <- 0n115/0x73u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
#       Number(U8, 115)
04 75 73 
# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# 81482 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
15 48 75 
# 81485 JzImm [Label24(RpnCalc_handle_if_true_4_32)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
72 8d 14 08 
# 81489 JmpImm [Label24(RpnCalc_handle_if_else_4_33)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
70 45 15 08 
# :RpnCalc_handle_if_true_4_32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_4_32
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("stack")
# 8148d Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("stack")
21 70 4c 
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("a")
# 81490 Copy32 [Register(0x3c), Register(0x68)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("a")
21 3c 68 
# inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 81493 Copy32 [Register(0x4c), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 4c 44 
# inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 81496 Copy32 [Register(0x68), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 68 3c 
# inline_RpnCalc_handle_stack_push_58_t587d <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t587d <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_values <- inline_RpnCalc_handle_stack_push_58_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 81499 Copy32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_58_values <- inline_RpnCalc_handle_stack_push_58_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 44 68 
# inline_RpnCalc_handle_stack_push_58_tf90a <- inline_RpnCalc_handle_stack_push_58_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 8149c Copy32 [Register(0x68), Register(0x50)]
#       inline_RpnCalc_handle_stack_push_58_tf90a <- inline_RpnCalc_handle_stack_push_58_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 68 50 
# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 8149f Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 
# 814a2 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 814a8 Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 68 
# inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 814ab LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 814b1 Mul8_16 [Register(0x68), Register(0x00), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 68 00 68 
# 814b5 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6a 00 
# 814b8 LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6b 00 
# inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 814bb ClearCarry []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 814bc AddCarry32_1 [Register(0x50), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 50 68 68 
# 814c0 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_tf90a Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_stack_push_58_t531d <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t531d <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 814c1 Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 68 
# 814c4 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 
# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 814c5 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 
# 814c8 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 814ce Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 
# 814d1 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 814d7 Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 68 
# inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 814da Copy32 [Register(0x68), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 68 3c 
# 814dd AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 814e3 Store32_1 [Register(0x3c), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 4c 
# 814e6 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_58_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("stack")
# 814e7 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("stack")
21 70 4c 
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("b")
# 814ea Copy32 [Register(0x40), Register(0x44)]
#       tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("b")
21 40 44 
# inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 814ed Copy32 [Register(0x4c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 4c 40 
# inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 814f0 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 44 3c 
# inline_RpnCalc_handle_stack_push_59_t587d <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t587d <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_values <- inline_RpnCalc_handle_stack_push_59_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 814f3 Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_59_values <- inline_RpnCalc_handle_stack_push_59_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 40 44 
# inline_RpnCalc_handle_stack_push_59_tf90a <- inline_RpnCalc_handle_stack_push_59_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 814f6 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_59_tf90a <- inline_RpnCalc_handle_stack_push_59_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 44 4c 
# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 814f9 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 814fc AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 81502 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 81505 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 8150b Mul8_16 [Register(0x44), Register(0x00), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 44 00 44 
# 8150f LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 46 00 
# 81512 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 47 00 
# inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 81515 ClearCarry []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 81516 AddCarry32_1 [Register(0x4c), Register(0x44), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 4c 44 44 
# 8151a AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_tf90a Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_stack_push_59_t531d <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t531d <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8151b Store32_1 [Register(0x3c), Register(0x44)]
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 44 
# 8151e Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 
# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 8151f Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 81522 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81528 Copy32 [Register(0x40), Register(0x68)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 68 
# 8152b AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 68 40 00 00 00 
# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 81531 Load32 [Register(0x68), Register(0x44)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 68 44 
# inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 81534 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 44 3c 
# 81537 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 
# mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 8153d Store32_1 [Register(0x3c), Register(0x68)]
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 68 
# 81540 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_59_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81541 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_4_33 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t1501 <- 0n113/0x71u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Number(U8, 113)
# 81545 LoadImm8 [Register(0x49), Constant8(0x71=113)]
#       t1501 <- 0n113/0x71u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
#       Number(U8, 113)
04 49 71 
# if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# 81548 Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
15 48 49 
# 8154b JzImm [Label24(RpnCalc_handle_if_true_5_34)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
72 53 15 08 
# 8154f JmpImm [Label24(RpnCalc_handle_if_else_5_35)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
70 5f 15 08 
# :RpnCalc_handle_if_true_5_34 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_5_34
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 81553 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 64 00 
# return Some(tb36e) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(U8, 0)) }
# 81556 Copy8 [Register(0x64), Register(0x00)]
#       return Some(tb36e) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(U8, 0)) }
0b 64 00 
# 81559 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8155b JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_5_35 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 8155f LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 75 0a 
# if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# 81562 Cmp8 [Register(0x48), Register(0x75)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
15 48 75 
# 81565 JzImm [Label24(RpnCalc_handle_if_true_6_36)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
72 6d 15 08 
# 81569 JmpImm [Label24(RpnCalc_handle_if_else_6_37)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
70 13 16 08 
# :RpnCalc_handle_if_true_6_36 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 8156d Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 44 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 81570 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 3c 40 
# 81573 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 81579 Load8 [Register(0x40), Register(0x6c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 40 6c 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 8157c LoadImm8 [Register(0x6d), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 6d 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 8157f Cmp8 [Register(0x6c), Register(0x6d)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 6c 6d 
# 81582 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 0f 16 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# 81586 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 81589 Copy32 [Register(0x3c), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 44 
# 8158c AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 44 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 81592 Load32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 44 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 81595 Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 40 44 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 81598 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 68 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 8159b Copy32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 44 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 8159e Copy32 [Register(0x68), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 68 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 815a1 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 
# 815a4 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 815aa Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 815ad LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 815b3 Mul8_16 [Register(0x68), Register(0x00), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 68 00 68 
# 815b7 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6a 00 
# 815ba LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6b 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 815bd ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 815be AddCarry32_1 [Register(0x50), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 50 68 68 
# 815c2 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 815c3 Store32_1 [Register(0x40), Register(0x68)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 40 68 
# 815c6 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 815c7 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 
# 815ca AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 815d0 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 
# 815d3 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 815d9 Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 815dc Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 68 40 
# 815df AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 40 01 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 815e5 Store32_1 [Register(0x40), Register(0x4c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 40 4c 
# 815e8 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 815e9 Copy32 [Register(0x3c), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 44 
# 815ec AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 44 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 815f2 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 815f8 Store32_1 [Register(0x40), Register(0x44)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 40 44 
# 815fb Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 815fc Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 3c 40 
# 815ff AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81605 LoadImm8 [Register(0x6d), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6d 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 81608 Store8 [Register(0x6d), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 6d 40 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# 8160b JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
70 0f 16 08 
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8160f JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_6_37 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# Number(U8, 32)
# 81613 LoadImm8 [Register(0x49), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
#       Number(U8, 32)
04 49 20 
# if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# 81616 Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
15 48 49 
# 81619 JzImm [Label24(RpnCalc_handle_if_true_7_38)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
72 21 16 08 
# 8161d JmpImm [Label24(RpnCalc_handle_if_else_7_39)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
70 c7 16 08 
# :RpnCalc_handle_if_true_7_38 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 81621 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 44 3c 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 81624 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 3c 40 
# 81627 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 8162d Load8 [Register(0x40), Register(0x6c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 40 6c 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 81630 LoadImm8 [Register(0x6d), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 6d 00 
# if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 81633 Cmp8 [Register(0x6c), Register(0x6d)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 6c 6d 
# 81636 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 c3 16 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# AddressOf(PtrFieldDeref("c", "stack"))
# 8163a Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 8163d Copy32 [Register(0x3c), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 44 
# 81640 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 44 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 81646 Load32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 44 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 81649 Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t4760 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 40 44 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# 8164c Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
21 68 40 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 8164f Copy32 [Register(0x44), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 44 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# 81652 Copy32 [Register(0x68), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
#       Ident("values")
21 68 50 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81655 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 
# 81658 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 8165e Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 81661 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 
# 81667 Mul8_16 [Register(0x68), Register(0x00), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 68 00 68 
# 8166b LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6a 00 
# 8166e LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 6b 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 81671 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 
# 81672 AddCarry32_1 [Register(0x50), Register(0x68), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 50 68 68 
# 81676 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf90a Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81677 Store32_1 [Register(0x40), Register(0x68)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 40 68 
# 8167a Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t531d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 8167b Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 
# 8167e AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81684 Copy32 [Register(0x44), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 44 4c 
# 81687 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 8168d Load32 [Register(0x4c), Register(0x68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 68 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 81690 Copy32 [Register(0x68), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 68 40 
# 81693 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 40 01 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 81699 Store32_1 [Register(0x40), Register(0x4c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 40 4c 
# 8169c Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 8169d Copy32 [Register(0x3c), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 44 
# 816a0 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 44 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 816a6 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 816ac Store32_1 [Register(0x40), Register(0x44)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 40 44 
# 816af Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 816b0 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 3c 40 
# 816b3 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 40 48 00 00 00 
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 816b9 LoadImm8 [Register(0x6d), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 6d 00 
# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 816bc Store8 [Register(0x6d), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 6d 40 
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# 816bf JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
70 c3 16 08 
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 816c3 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_7_39 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t4e08 <- 0n99/0x63u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# Number(U8, 99)
# 816c7 LoadImm8 [Register(0x49), Constant8(0x63=99)]
#       t4e08 <- 0n99/0x63u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
#       Number(U8, 99)
04 49 63 
# if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# 816ca Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
15 48 49 
# 816cd JzImm [Label24(RpnCalc_handle_if_true_8_40)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
72 d5 16 08 
# 816d1 JmpImm [Label24(RpnCalc_handle_if_else_8_41)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
70 05 17 08 
# :RpnCalc_handle_if_true_8_40 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# 816d5 Copy32 [Register(0x44), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
21 44 3c 
# inline_RpnCalc_handle_RpnCalc_init_50_tbc15 <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_tbc15 <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))\nAssign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_s <- inline_RpnCalc_handle_RpnCalc_init_50_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# 816d8 Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_init_50_s <- inline_RpnCalc_handle_RpnCalc_init_50_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
#       Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 40 
# inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 <- inline_RpnCalc_handle_RpnCalc_init_50_s U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 <- inline_RpnCalc_handle_RpnCalc_init_50_s U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_tb2e9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 816db Copy32 [Register(0x40), Register(0x44)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 44 
# 816de AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 44 40 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 816e4 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# 816ea Store32_1 [Register(0x40), Register(0x44)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
23 40 44 
# 816ed Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_50_tb1ed <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_tb1ed <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 816ee Copy32 [Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 40 
# 816f1 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 
# inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 816f7 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 
# mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 816fd Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 
# 81700 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 
# goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81701 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_8_41 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t49a <- 0n100/0x64u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# Number(U8, 100)
# 81705 LoadImm8 [Register(0x49), Constant8(0x64=100)]
#       t49a <- 0n100/0x64u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
#       Number(U8, 100)
04 49 64 
# if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# 81708 Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
15 48 49 
# 8170b JzImm [Label24(RpnCalc_handle_if_true_9_42)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
72 13 17 08 
# 8170f JmpImm [Label24(RpnCalc_handle_if_else_9_43)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
70 64 18 08 
# :RpnCalc_handle_if_true_9_42 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 81713 LoadImm8 [Register(0x49), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 49 00 
# :RpnCalc_handle_while_predicate_44 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# t6001 <- stack_count U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("stack_count")
# 81716 Copy8 [Register(0x6e), Register(0x64)]
#       t6001 <- stack_count U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 6e 64 
# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# 81719 Cmp8 [Register(0x64), Register(0x49)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
15 64 49 
# 8171c JcImm [Label24(RpnCalc_handle_while_end_46)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
71 60 18 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# None <= call print_dec8(td0f3,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# 81720 Copy8 [Register(0x49), Register(0x00)]
#       Arg0[a]=td0f3 None <= call print_dec8(td0f3,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0b 49 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 81723 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 
# 81729 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 33 17 08 00 
# 8172f JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 1d 2c 08 
# 81733 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 
# tebdf <- 0n58/0x3au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 58)] })
# Number(U8, 58)
# 81739 LoadImm8 [Register(0x6c), Constant8(0x3a=58)]
#       tebdf <- 0n58/0x3au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 58)] })
#       Number(U8, 58)
04 6c 3a 
# inline_RpnCalc_handle_putc_23_c <- tebdf U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 58)] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_c <- tebdf U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 58)] })\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8173c Out0 [Register(0x6c)]
#       IoWrite0
68 6c 
# inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8173e Copy8 [Register(0x6c), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 6c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 81741 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 81747 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 51 17 08 00 
# 8174d JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 81751 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_23_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_23_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_23_function_end_putc None
# inline_RpnCalc_handle_putc_23_function_end_putc
# tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Ident("stack")
# 81757 Copy32 [Register(0x70), Register(0x4c)]
#       tfe08 <- stack U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Ident("stack")
21 70 4c 
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })\nCast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# t4376 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
# 8175a LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       Zero-pad for t4376 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
20 40 00 00 00 00 
# 81760 Copy8 [Register(0x49), Register(0x40)]
#       t4376 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
0b 49 40 
# inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# 81763 Copy32 [Register(0x4c), Register(0x44)]
#       inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
21 4c 44 
# inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_t587d <- inline_RpnCalc_handle_stack_get_48_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(23,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_t587d <- inline_RpnCalc_handle_stack_get_48_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(23,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(USIZE), Some(16))), value: Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_values <- inline_RpnCalc_handle_stack_get_48_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(23,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_values <- inline_RpnCalc_handle_stack_get_48_t587d U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(23,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(USIZE))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_tf90a <- inline_RpnCalc_handle_stack_get_48_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_tf90a <- inline_RpnCalc_handle_stack_get_48_values U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\nIndex(\"values\", Ident(\"n\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))\nCast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_t531d <- inline_RpnCalc_handle_stack_get_48_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_t531d <- inline_RpnCalc_handle_stack_get_48_n U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\nIndex(\"values\", Ident(\"n\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4)))\nArithmetic(Multiply, Ident(\"n\"), Number(USIZE, 4))\nIdent(\"n\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
# 81766 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
20 00 04 00 00 00 
# 8176c Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
11 40 00 40 
# 81770 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
04 42 00 
# 81773 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_t531d Multiply Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
04 43 00 
# inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# 81776 ClearCarry []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
03 
# 81777 AddCarry32_1 [Register(0x44), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
30 44 40 40 
# 8177b AddCarry32_2 []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_tf90a Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
31 
# inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# 8177c Load32 [Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
22 40 40 
# tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get Some('/home/john/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_get_48_function_end_stack_get)], resolved: None }
# :inline_RpnCalc_handle_stack_get_48_function_end_stack_get None
# inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# 8177f Copy32 [Register(0x40), Register(0x00)]
#       Arg0[a]=tb336 None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
21 40 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117]
# 81782 Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 75 
# 81784 Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 74 
# 81786 Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 73 
# 81788 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 72 
# 8178a Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 71 
# 8178c Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 70 
# 8178e Push8 [Register(0x6e)]
#       Saving reg0x6e before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6e 
# 81790 Push8 [Register(0x6d)]
#       Saving reg0x6d before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6d 
# 81792 Push8 [Register(0x6c)]
#       Saving reg0x6c before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6c 
# 81794 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6b 
# 81796 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6a 
# 81798 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 69 
# 8179a Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 68 
# 8179c Push8 [Register(0x65)]
#       Saving reg0x65 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 65 
# 8179e Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 64 
# 817a0 Push8 [Register(0x63)]
#       Saving reg0x63 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 63 
# 817a2 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 62 
# 817a4 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 61 
# 817a6 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 60 
# 817a8 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5f 
# 817aa Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5e 
# 817ac Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5d 
# 817ae Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5c 
# 817b0 Push8 [Register(0x5b)]
#       Saving reg0x5b before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5b 
# 817b2 Push8 [Register(0x5a)]
#       Saving reg0x5a before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5a 
# 817b4 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 59 
# 817b6 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 58 
# 817b8 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 57 
# 817ba Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 56 
# 817bc Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 55 
# 817be Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 54 
# 817c0 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 53 
# 817c2 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 52 
# 817c4 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 51 
# 817c6 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 50 
# 817c8 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4f 
# 817ca Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4e 
# 817cc Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4d 
# 817ce Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4c 
# 817d0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 
# 817d6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c e0 17 08 00 
# 817dc JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 28 2a 08 
# 817e0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 
# 817e6 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4c 
# 817e8 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4d 
# 817ea Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4e 
# 817ec Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4f 
# 817ee Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 50 
# 817f0 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 51 
# 817f2 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 52 
# 817f4 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 53 
# 817f6 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 54 
# 817f8 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 55 
# 817fa Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 56 
# 817fc Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 57 
# 817fe Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 58 
# 81800 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 59 
# 81802 Pop8 [Register(0x5a)]
#       Restoring reg0x5a after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5a 
# 81804 Pop8 [Register(0x5b)]
#       Restoring reg0x5b after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5b 
# 81806 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5c 
# 81808 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5d 
# 8180a Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5e 
# 8180c Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5f 
# 8180e Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 60 
# 81810 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 61 
# 81812 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 62 
# 81814 Pop8 [Register(0x63)]
#       Restoring reg0x63 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 63 
# 81816 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 64 
# 81818 Pop8 [Register(0x65)]
#       Restoring reg0x65 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 65 
# 8181a Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 68 
# 8181c Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 69 
# 8181e Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6a 
# 81820 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6b 
# 81822 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6c 
# 81824 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6d 
# 81826 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6e 
# 81828 Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 70 
# 8182a Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 71 
# 8182c Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 72 
# 8182e Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 73 
# 81830 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 74 
# 81832 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(tb336,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 75 
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 81834 LoadImm8 [Register(0x75), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 75 0a 
# inline_RpnCalc_handle_putc_24_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# 81837 Copy8 [Register(0x75), Register(0x6c)]
#       inline_RpnCalc_handle_putc_24_c <- td7b5 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
0b 75 6c 
# inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8183a Out0 [Register(0x6c)]
#       IoWrite0
68 6c 
# inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x6c), Register(0x6c)], resolved: None }
# None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8183c Copy8 [Register(0x6c), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_24_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 6c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 8183f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 81845 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 4f 18 08 00 
# 8184b JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 8184f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_RpnCalc_handle_putc_24_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_24_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_24_function_end_putc None
# inline_RpnCalc_handle_putc_24_function_end_putc
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x49), Register(0x49)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 81855 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 
# 81858 Add8NoCarryIn [Register(0x49), Register(0x00), Register(0x49)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 49 00 49 
# goto RpnCalc_handle_while_predicate_44 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8185c JmpImm [Label24(RpnCalc_handle_while_predicate_44)]
#       goto RpnCalc_handle_while_predicate_44 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 16 17 08 
# :RpnCalc_handle_while_end_46 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81860 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_9_43 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Number(U8, 57)
# 81864 LoadImm8 [Register(0x49), Constant8(0x39=57)]
#       t2ac9 <- 0n57/0x39u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
#       Number(U8, 57)
04 49 39 
# if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# 81867 Cmp8 [Register(0x48), Register(0x49)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
15 48 49 
# 8186a JcImm [Label24(RpnCalc_handle_if_true_10_47)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
71 72 18 08 
# 8186e JmpImm [Label24(RpnCalc_handle_if_else_10_48)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
70 06 19 08 
# :RpnCalc_handle_if_true_10_47 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# Number(U8, 48)
# 81872 LoadImm8 [Register(0x49), Constant8(0x30=48)]
#       tf48d <- 0n48/0x30u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
#       Number(U8, 48)
04 49 30 
# if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# 81875 Cmp8 [Register(0x49), Register(0x48)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
15 49 48 
# 81878 JcImm [Label24(RpnCalc_handle_if_true_0_50)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
71 80 18 08 
# 8187c JmpImm [Label24(RpnCalc_handle_if_else_0_51)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
70 02 19 08 
# :RpnCalc_handle_if_true_0_50 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 81880 Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 
# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 81883 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 
# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 81889 LoadImm8 [Register(0x64), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 64 01 
# mem[tfdb7] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# 8188c Store8 [Register(0x64), Register(0x3c)]
#       mem[tfdb7] <- tfcd U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
06 64 3c 
# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 8188f Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 
# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 81892 Copy32 [Register(0x3c), Register(0x4c)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 4c 
# 81895 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 4c 44 00 00 00 
# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 8189b Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 
# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 8189e Copy32 [Register(0x3c), Register(0x4c)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 4c 
# 818a1 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 4c 44 00 00 00 
# td60 <- mem[t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 818a7 Load32 [Register(0x4c), Register(0x40)]
#       td60 <- mem[t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 4c 40 
# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# 818aa Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
21 40 3c 
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 818ad ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 
# 818ae AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 3c 3c 3c 
# 818b2 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 818b3 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 
# 818b4 AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x40)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 3c 3c 40 
# 818b8 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 818b9 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 
# 818ba AddCarry32_1 [Register(0x40), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 40 40 40 
# 818be AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 818bf ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 
# 818c0 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 40 3c 3c 
# 818c4 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 
# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 None
# inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# mem[t6e8e] <- tadd U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# 818c5 Store32_1 [Register(0x3c), Register(0x4c)]
#       mem[t6e8e] <- tadd U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
23 3c 4c 
# 818c8 Store32_2 []
#       mem[t6e8e] <- tadd U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
24 
# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 818c9 Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 
# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 818cc Copy32 [Register(0x3c), Register(0x4c)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 4c 
# 818cf AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 4c 44 00 00 00 
# tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 818d5 Copy32 [Register(0x44), Register(0x3c)]
#       tb1ed <- c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 44 3c 
# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 818d8 Copy32 [Register(0x3c), Register(0x4c)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 4c 
# 818db AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 4c 44 00 00 00 
# td60 <- mem[t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# 818e1 Load32 [Register(0x4c), Register(0x40)]
#       td60 <- mem[t6e8e] U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
22 4c 40 
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })\nCast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# 818e4 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
04 00 d0 
# 818e7 Add8NoCarryIn [Register(0x48), Register(0x00), Register(0x49)]
#       t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
14 48 00 49 
# t3f70 U32 <- t7ff1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# 818eb LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for t3f70 U32 <- t7ff1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
20 3c 00 00 00 00 
# 818f1 Copy8 [Register(0x49), Register(0x3c)]
#       t3f70 U32 <- t7ff1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
0b 49 3c 
# tacf6 <- td60 Add Var(t3f70) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# 818f4 ClearCarry []
#       tacf6 <- td60 Add Var(t3f70) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
03 
# 818f5 AddCarry32_1 [Register(0x40), Register(0x3c), Register(0x3c)]
#       tacf6 <- td60 Add Var(t3f70) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
30 40 3c 3c 
# 818f9 AddCarry32_2 []
#       tacf6 <- td60 Add Var(t3f70) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
31 
# mem[t6e8e] <- tacf6 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# 818fa Store32_1 [Register(0x3c), Register(0x4c)]
#       mem[t6e8e] <- tacf6 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
23 3c 4c 
# 818fd Store32_2 []
#       mem[t6e8e] <- tacf6 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
24 
# goto RpnCalc_handle_if_end_49 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 818fe JmpImm [Label24(RpnCalc_handle_if_end_49)]
#       goto RpnCalc_handle_if_end_49 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 02 19 08 
# :RpnCalc_handle_if_else_0_51 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81902 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
70 06 19 08 
# :RpnCalc_handle_if_else_10_48 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_23
# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(U8, 1)) }
# Number(U8, 1)
# 81906 LoadImm8 [Register(0x64), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(U8, 1)) }
#       Number(U8, 1)
04 64 01 
# return Some(tfcd) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(U8, 1)) }
# 81909 Copy8 [Register(0x64), Register(0x00)]
#       return Some(tfcd) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(U8, 1)) }
0b 64 00 
# 8190c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_RpnCalc_handle None
# function_end_RpnCalc_handle
# Unreachable None
# 8190e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([120, 121, 122, 123])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_39_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed (t44ed Ident("value")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([144])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n (Arg1 n Number(U8)) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 (t1d36 Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([152])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d (t531d Ident("n")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a (t565a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([156, 157, 158, 159])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values (Local values Ptr(Number(U8)) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var inline_RpnCalc_run_getchar_39_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_RpnCalc_run_getchar_39_t0 (static "stdin") Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_t1 (static "stdin") Reg(U32) Some([128, 129, 130, 131])
# Var inline_RpnCalc_run_getchar_39_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_39_tb816 (tb816 TtyIn) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_tc9d5 (tc9d5 Call(Call { function: "Keyboard_poll", parameters: [] })) Reg(U8) Some([160])
# Var inline_RpnCalc_run_getchar_39_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_te31 (te31 Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })) Reg(U8) Some([160])
# Var inline_RpnCalc_run_getchar_39_tf0b5 (tf0b5 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([124])
# Var inline_RpnCalc_run_getchar_39_tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([132, 133, 134, 135])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([124])
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([124])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([136])
# Var td337 (td337 Ident("calc")) Reg(U32) Some([120, 121, 122, 123])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([124])
# 81913 Copy32 [Register(0x00), Register(0x78)]
#       Save function parameter 'calc' registers [0, 1, 2, 3] to locals [120, 121, 122, 123].
21 00 78 
# :RpnCalc_run_while_predicate_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# RpnCalc_run_while_predicate_0
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 81916 LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 81919 LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 
# if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# 8191c Cmp8 [Register(0x88), Register(0x88)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
15 88 88 
# 8191f JzImm [Label24(RpnCalc_run_while_body_1)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
72 27 19 08 
# 81923 JmpImm [Label24(RpnCalc_run_while_end_2)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
70 e6 1a 08 
# :RpnCalc_run_while_body_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(15,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 81927 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(15,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 
# :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Number(U8, 0)
# 8192a LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 
# if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# 8192d Cmp8 [Register(0x7c), Register(0x88)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
15 7c 88 
# 81930 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
72 38 19 08 
# 81934 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_end_2)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
70 35 1a 08 
# :inline_RpnCalc_run_getchar_39_getchar_while_body_1 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 81938 IoReadyToRead [Register(0x7c)]
#       ReadyToRead
79 7c 
# inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# 8193a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
04 00 01 
# 8193d And8 [Register(0x7c), Register(0x00), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
1b 7c 00 7c 
# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Number(U8, 0)
# 81941 LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 
# if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# 81944 Cmp8 [Register(0x7c), Register(0x88)]
#       if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
15 7c 88 
# 81947 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_0_5)]
#       if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
72 9a 19 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }] }\nComparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }])], else_block: [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_39_t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# AddressOf(Ident("stdin"))
# 8194b LoadImm32 [Register(0x80), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_run_getchar_39_t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       AddressOf(Ident("stdin"))
20 80 5c 10 0f 00 
# inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# AddressOf(Ident("stdin"))
# 81951 Copy32 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       AddressOf(Ident("stdin"))
21 80 84 
# inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 81954 In0 [Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 7c 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 81956 Copy32 [Register(0x84), Register(0x8c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(24,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 84 8c 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x8c), Register(0x8c)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 81959 Copy32 [Register(0x84), Register(0x9c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 84 9c 
# 8195c AddImm32IgnoreCarry [Register(0x9c), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 9c 04 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 81962 Load8 [Register(0x9c), Register(0x98)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 9c 98 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 81965 LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 94 00 00 00 00 
# 8196b Copy8 [Register(0x98), Register(0x94)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 98 94 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 8196e ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 
# 8196f AddCarry32_1 [Register(0x8c), Register(0x94), Register(0x8c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 8c 94 8c 
# 81973 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Ident("n")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }\nIdent(\"n\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 81974 Store8 [Register(0x7c), Register(0x8c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t531d U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 7c 8c 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 81977 Copy32 [Register(0x84), Register(0x9c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 84 9c 
# 8197a AddImm32IgnoreCarry [Register(0x9c), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 9c 04 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 81980 Copy32 [Register(0x84), Register(0x9c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 84 9c 
# 81983 AddImm32IgnoreCarry [Register(0x9c), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 9c 04 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 81989 Load8 [Register(0x9c), Register(0x98)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 9c 98 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 8198c LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 
# 8198f Add8NoCarryIn [Register(0x98), Register(0x00), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 98 00 7c 
# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 81993 Store8 [Register(0x7c), Register(0x9c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 7c 9c 
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push)], resolved: None }
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# 81996 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
70 b0 19 08 
# :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# None <= call Keyboard_poll() Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57}
# Registers to save: []
# 8199a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 
# 819a0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c aa 19 08 00 
# 819a6 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 46 08 08 
# 819aa AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 
# :inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# inline_RpnCalc_run_getchar_39_getchar_if_end_3
# inline_RpnCalc_run_getchar_39_t1 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 819b0 LoadImm32 [Register(0x80), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_run_getchar_39_t1 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
20 80 5c 10 0f 00 
# inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t1 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 819b6 Copy32 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_tfff6 <- inline_RpnCalc_run_getchar_39_t1 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
21 80 84 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# 819b9 Copy32 [Register(0x84), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
21 84 80 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 819bc Copy32 [Register(0x80), Register(0x94)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 80 94 
# 819bf AddImm32IgnoreCarry [Register(0x94), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 94 00 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 819c5 Load8 [Register(0x94), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 94 90 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }\nPtrFieldDeref(\"s\", \"last\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 819c8 Copy32 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
21 80 84 
# 819cb AddImm32IgnoreCarry [Register(0x84), Constant32(0x00000104=260)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 84 04 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 819d1 Load8 [Register(0x84), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 84 88 
# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 819d4 Cmp8 [Register(0x90), Register(0x88)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 90 88 
# 819d7 JzImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 df 19 08 
# 819db JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 ea 19 08 
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 819df LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 7c 00 
# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 819e2 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 31 1a 08 
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# 819e6 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
70 ea 19 08 
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/home/john/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") } }
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))\nAssign { target: Ident(\"values\"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref(\"s\", \"values\")) }\nAddressOf(PtrFieldDeref(\"s\", \"values\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Array(Number(U8), Some(256))), value: Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") } }\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))
# Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
# AddressOf(PtrFieldDeref("s", "values"))
# 819ea Copy32 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t565a U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(17,5))
#       Assign { target: Ident("values"), var_type: Some(Ptr(Number(U8))), value: AddressOf(PtrFieldDeref("s", "values")) }
#       AddressOf(PtrFieldDeref("s", "values"))
21 80 84 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }
# Ident("values")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_values U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }\nIdent(\"values\")\n", opcode: Copy32, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))\nAssign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 819ed Copy32 [Register(0x80), Register(0x94)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 80 94 
# 819f0 AddImm32IgnoreCarry [Register(0x94), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 94 00 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 819f6 Load8 [Register(0x94), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 94 90 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 819f9 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 8c 00 00 00 00 
# 819ff Copy8 [Register(0x90), Register(0x8c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 90 8c 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 81a02 ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 
# 81a03 AddCarry32_1 [Register(0x84), Register(0x8c), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 84 8c 84 
# 81a07 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t1d36 Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 81a08 Load8 [Register(0x84), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 84 88 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 81a0b Copy32 [Register(0x80), Register(0x94)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 80 94 
# 81a0e AddImm32IgnoreCarry [Register(0x94), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 94 00 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x80), Register(0x80)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 81a14 Copy32 [Register(0x80), Register(0x94)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 80 94 
# 81a17 AddImm32IgnoreCarry [Register(0x94), Constant32(0x00000100=256)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 94 00 01 00 00 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 81a1d Load8 [Register(0x94), Register(0x90)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 94 90 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 81a20 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 
# 81a23 Add8NoCarryIn [Register(0x90), Register(0x00), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 90 00 7c 
# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 81a27 Store8 [Register(0x7c), Register(0x94)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 7c 94 
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 81a2a Copy8 [Register(0x88), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 88 7c 
# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 81a2d JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/home/john/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 31 1a 08 
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# 81a31 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_predicate_0)]
#       goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
70 2a 19 08 
# :inline_RpnCalc_run_getchar_39_getchar_while_end_2 Some('/home/john/lutcomp/programs/lib/stdio.j':(17,5))
# inline_RpnCalc_run_getchar_39_getchar_while_end_2
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_function_end_getchar Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))
# Return { value: Some(Ident("ch")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_function_end_getchar Some('/home/john/lutcomp/programs/lib/stdio.j':(27,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_function_end_getchar)], resolved: None }
# :inline_RpnCalc_run_getchar_39_function_end_getchar None
# inline_RpnCalc_run_getchar_39_function_end_getchar
# td337 <- calc U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("calc")
# optimized away noop copy Instruction { source: "td337 <- calc U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"calc\")\n", opcode: Copy32, args: [Register(0x78), Register(0x78)], resolved: None }
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# 81a35 Copy32 [Register(0x78), Register(0x00)]
#       Arg0[c]=td337 Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
21 78 00 
# 81a38 Copy8 [Register(0x7c), Register(0x04)]
#       Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 7c 04 
# Registers used by this function: {120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160]
# 81a3b Push8 [Register(0xa0)]
#       Saving reg0xa0 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 a0 
# 81a3d Push8 [Register(0x9f)]
#       Saving reg0x9f before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 9f 
# 81a3f Push8 [Register(0x9e)]
#       Saving reg0x9e before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 9e 
# 81a41 Push8 [Register(0x9d)]
#       Saving reg0x9d before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 9d 
# 81a43 Push8 [Register(0x9c)]
#       Saving reg0x9c before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 9c 
# 81a45 Push8 [Register(0x98)]
#       Saving reg0x98 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 98 
# 81a47 Push8 [Register(0x97)]
#       Saving reg0x97 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 97 
# 81a49 Push8 [Register(0x96)]
#       Saving reg0x96 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 96 
# 81a4b Push8 [Register(0x95)]
#       Saving reg0x95 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 95 
# 81a4d Push8 [Register(0x94)]
#       Saving reg0x94 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 94 
# 81a4f Push8 [Register(0x90)]
#       Saving reg0x90 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 90 
# 81a51 Push8 [Register(0x8f)]
#       Saving reg0x8f before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8f 
# 81a53 Push8 [Register(0x8e)]
#       Saving reg0x8e before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8e 
# 81a55 Push8 [Register(0x8d)]
#       Saving reg0x8d before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8d 
# 81a57 Push8 [Register(0x8c)]
#       Saving reg0x8c before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8c 
# 81a59 Push8 [Register(0x88)]
#       Saving reg0x88 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 88 
# 81a5b Push8 [Register(0x87)]
#       Saving reg0x87 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 87 
# 81a5d Push8 [Register(0x86)]
#       Saving reg0x86 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 86 
# 81a5f Push8 [Register(0x85)]
#       Saving reg0x85 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 85 
# 81a61 Push8 [Register(0x84)]
#       Saving reg0x84 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 84 
# 81a63 Push8 [Register(0x83)]
#       Saving reg0x83 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 83 
# 81a65 Push8 [Register(0x82)]
#       Saving reg0x82 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 82 
# 81a67 Push8 [Register(0x81)]
#       Saving reg0x81 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 81 
# 81a69 Push8 [Register(0x80)]
#       Saving reg0x80 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 80 
# 81a6b Push8 [Register(0x7c)]
#       Saving reg0x7c before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7c 
# 81a6d Push8 [Register(0x7b)]
#       Saving reg0x7b before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7b 
# 81a6f Push8 [Register(0x7a)]
#       Saving reg0x7a before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7a 
# 81a71 Push8 [Register(0x79)]
#       Saving reg0x79 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 79 
# 81a73 Push8 [Register(0x78)]
#       Saving reg0x78 before Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 78 
# 81a75 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c fc ff ff ff 
# 81a7b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_handle))
25 0c 85 1a 08 00 
# 81a81 JmpImm [Label24(:RpnCalc_handle)]
#       PseudoCall(Label24(:RpnCalc_handle))
70 b4 09 08 
# 81a85 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c 04 00 00 00 
# 81a8b Pop8 [Register(0x78)]
#       Restoring reg0x78 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 78 
# 81a8d Pop8 [Register(0x79)]
#       Restoring reg0x79 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 79 
# 81a8f Pop8 [Register(0x7a)]
#       Restoring reg0x7a after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7a 
# 81a91 Pop8 [Register(0x7b)]
#       Restoring reg0x7b after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7b 
# 81a93 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7c 
# 81a95 Pop8 [Register(0x80)]
#       Restoring reg0x80 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 80 
# 81a97 Pop8 [Register(0x81)]
#       Restoring reg0x81 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 81 
# 81a99 Pop8 [Register(0x82)]
#       Restoring reg0x82 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 82 
# 81a9b Pop8 [Register(0x83)]
#       Restoring reg0x83 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 83 
# 81a9d Pop8 [Register(0x84)]
#       Restoring reg0x84 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 84 
# 81a9f Pop8 [Register(0x85)]
#       Restoring reg0x85 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 85 
# 81aa1 Pop8 [Register(0x86)]
#       Restoring reg0x86 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 86 
# 81aa3 Pop8 [Register(0x87)]
#       Restoring reg0x87 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 87 
# 81aa5 Pop8 [Register(0x88)]
#       Restoring reg0x88 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 88 
# 81aa7 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8c 
# 81aa9 Pop8 [Register(0x8d)]
#       Restoring reg0x8d after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8d 
# 81aab Pop8 [Register(0x8e)]
#       Restoring reg0x8e after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8e 
# 81aad Pop8 [Register(0x8f)]
#       Restoring reg0x8f after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8f 
# 81aaf Pop8 [Register(0x90)]
#       Restoring reg0x90 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 90 
# 81ab1 Pop8 [Register(0x94)]
#       Restoring reg0x94 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 94 
# 81ab3 Pop8 [Register(0x95)]
#       Restoring reg0x95 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 95 
# 81ab5 Pop8 [Register(0x96)]
#       Restoring reg0x96 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 96 
# 81ab7 Pop8 [Register(0x97)]
#       Restoring reg0x97 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 97 
# 81ab9 Pop8 [Register(0x98)]
#       Restoring reg0x98 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 98 
# 81abb Pop8 [Register(0x9c)]
#       Restoring reg0x9c after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 9c 
# 81abd Pop8 [Register(0x9d)]
#       Restoring reg0x9d after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 9d 
# 81abf Pop8 [Register(0x9e)]
#       Restoring reg0x9e after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 9e 
# 81ac1 Pop8 [Register(0x9f)]
#       Restoring reg0x9f after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 9f 
# 81ac3 Pop8 [Register(0xa0)]
#       Restoring reg0xa0 after Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a a0 
# 81ac5 Copy8 [Register(0x00), Register(0x7c)]
#       Some(result) <= call RpnCalc_handle(td337,tdcd9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 00 7c 
# t57fd <- result U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# Ident("result")
# optimized away noop copy Instruction { source: "t57fd <- result U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }\nIdent(\"result\")\n", opcode: Copy8, args: [Register(0x7c), Register(0x7c)], resolved: None }
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# Number(U8, 0)
# 81ac8 LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
#       Number(U8, 0)
04 88 00 
# if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# 81acb Cmp8 [Register(0x7c), Register(0x88)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
15 7c 88 
# 81ace JzImm [Label24(RpnCalc_run_if_true_0_4)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
72 d6 1a 08 
# 81ad2 JmpImm [Label24(RpnCalc_run_if_else_0_5)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
70 e2 1a 08 
# :RpnCalc_run_if_true_0_4 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# RpnCalc_run_if_true_0_4
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 81ad6 LoadImm8 [Register(0x88), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 88 00 
# return Some(tb36e) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(U8, 0)) }
# 81ad9 Copy8 [Register(0x88), Register(0x00)]
#       return Some(tb36e) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(U8, 0)) }
0b 88 00 
# 81adc JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# goto RpnCalc_run_if_end_3 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# 81ade JmpImm [Label24(RpnCalc_run_if_end_3)]
#       goto RpnCalc_run_if_end_3 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
70 e2 1a 08 
# :RpnCalc_run_if_else_0_5 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# 81ae2 JmpImm [Label24(RpnCalc_run_while_predicate_0)]
#       goto RpnCalc_run_while_predicate_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
70 16 19 08 
# :RpnCalc_run_while_end_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run None
# function_end_RpnCalc_run
# Unreachable None
# 81ae6 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :delay
# Ret None
# Arg0=x
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([164, 165, 166, 167])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([168, 169, 170, 171])
# Var x (Arg0 x Number(USIZE)) Reg(U32) Some([168, 169, 170, 171])
# 81aeb Copy32 [Register(0x00), Register(0xa8)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [168, 169, 170, 171].
21 00 a8 
# :delay_while_predicate_0 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81aee LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 a4 00 00 00 00 
# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# 81af4 Cmp8 [Register(0xab), Register(0xa7)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
15 ab a7 
# 81af7 Cmp8IfZero [Register(0xaa), Register(0xa6)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 aa a6 
# 81afa Cmp8IfZero [Register(0xa9), Register(0xa5)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 a9 a5 
# 81afd Cmp8IfZero [Register(0xa8), Register(0xa4)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 a8 a4 
# 81b00 JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
72 0e 1b 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
# Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }\nArithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
# Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
# 81b04 AddImm32IgnoreCarry [Register(0xa8), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
#       Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
32 a8 ff ff ff ff 
# goto delay_while_predicate_0 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# 81b0a JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
70 ee 1a 08 
# :delay_while_end_2 Some('/home/john/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 81b0e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_delay None
# function_end_delay
# Unreachable None
# 81b10 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([176, 177, 178, 179])
# Var hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_43_a (Arg0 a Number(USIZE)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_b (Arg1 b Number(USIZE)) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_b (Arg1 b Number(USIZE)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([201])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([203])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([201])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([196, 197, 198, 199])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([204, 205, 206, 207])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([208])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_div16_43_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_div16_43_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([212, 213, 214, 215])
# Var inline_div32_div16_43_mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([216, 217, 218, 219])
# Var inline_div32_div16_43_r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_t1506 (t1506 Ident("lo")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_t3c0e (t3c0e Index("b", Number(U8, 0))) Reg(U8) Some([220])
# Var inline_div32_div16_43_t5508 (t5508 Ident("hi")) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_t8792 (t8792 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_tace9 (tace9 Ident("b")) Reg(U32) Some([176, 177, 178, 179])
# Var inline_div32_div16_43_tad57 (tad57 Ident("x")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_taee0 (taee0 Ident("r")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_tb0a8 (tb0a8 Index("x", Number(U8, 2))) Reg(U8) Some([200])
# Var inline_div32_div16_43_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([202])
# Var inline_div32_div16_43_tda9f (tda9f Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))) Reg(U8) Some([220])
# Var inline_div32_div16_43_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([221])
# Var inline_div32_div16_43_te264 (te264 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_tf944 (tf944 Index("x", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_div16_43_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_div16_43_x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_44_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_shiftright1_44_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_44_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_shiftright1_44_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_44_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_44_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_44_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_44_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_44_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_44_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_div32_shiftright1_45_a (Arg0 a Number(USIZE)) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_45_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_div32_shiftright1_45_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_45_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([200])
# Var inline_div32_shiftright1_45_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t8792 (t8792 Ident("a")) Reg(U32) Some([184, 185, 186, 187])
# Var inline_div32_shiftright1_45_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([202])
# Var inline_div32_shiftright1_45_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_45_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([208])
# Var inline_div32_shiftright1_45_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([202])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([196, 197, 198, 199])
# Var mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([184, 185, 186, 187])
# Var r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var t0 (Stack size negated) Reg(U32) Some([224, 225, 226, 227])
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([184, 185, 186, 187])
# Var t1a85 (t1a85 Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })) Reg(U8) Some([228])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([184, 185, 186, 187])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([188, 189, 190, 191])
# Var t4917 (t4917 Number(USIZE, 65536)) Reg(U32) Some([180, 181, 182, 183])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([188, 189, 190, 191])
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([180, 181, 182, 183])
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([188, 189, 190, 191])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([172, 173, 174, 175])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([204, 205, 206, 207])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([176, 177, 178, 179])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([188, 189, 190, 191])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([188, 189, 190, 191])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([188, 189, 190, 191])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([192, 193, 194, 195])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([224, 225, 226, 227])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([172, 173, 174, 175])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([224, 225, 226, 227])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([184, 185, 186, 187])
# Var x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var x64 (Local x64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# 81b15 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 
# 81b1b Copy32 [Register(0x00), Register(0xac)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [172, 173, 174, 175].
21 00 ac 
# 81b1e Copy32 [Register(0x04), Register(0xb0)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [176, 177, 178, 179].
21 04 b0 
# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 81b21 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81b27 Cmp8 [Register(0xb3), Register(0xaf)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 b3 af 
# 81b2a Cmp8IfZero [Register(0xb2), Register(0xae)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b2 ae 
# 81b2d Cmp8IfZero [Register(0xb1), Register(0xad)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b1 ad 
# 81b30 Cmp8IfZero [Register(0xb0), Register(0xac)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b0 ac 
# 81b33 JcImm [Label24(div32_if_else_0_2)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 52 1b 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# div32_if_true_0_1
# t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# Number(USIZE, 0)
# 81b37 LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
#       Number(USIZE, 0)
20 bc 00 00 00 00 
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# 81b3d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
32 0c 08 00 00 00 
# return Some(t60ec) Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# 81b43 Copy32 [Register(0xbc), Register(0x00)]
#       return Some(t60ec) Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
21 bc 00 
# 81b46 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 
# 81b4c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# goto div32_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# 81b4e JmpImm [Label24(div32_if_end_0)]
#       goto div32_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
70 52 1b 08 
# :div32_if_else_0_2 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# div32_if_else_0_2
# :div32_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(67,5))
# div32_if_end_0
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# t4917 <- 0n65536/0x00010000u32  Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# Number(USIZE, 65536)
# 81b52 LoadImm32 [Register(0xb4), Constant32(0x00010000=65536)]
#       t4917 <- 0n65536/0x00010000u32  Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
#       Number(USIZE, 65536)
20 b4 00 00 01 00 
# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# 81b58 Cmp8 [Register(0xb7), Register(0xaf)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
15 b7 af 
# 81b5b Cmp8IfZero [Register(0xb6), Register(0xae)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 b6 ae 
# 81b5e Cmp8IfZero [Register(0xb5), Register(0xad)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 b5 ad 
# 81b61 Cmp8IfZero [Register(0xb4), Register(0xac)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 b4 ac 
# 81b64 JcImm [Label24(div32_if_else_0_5)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
71 1c 1e 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# div32_if_true_0_4
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81b68 Cmp8 [Register(0xb3), Register(0xaf)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 b3 af 
# 81b6b Cmp8IfZero [Register(0xb2), Register(0xae)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b2 ae 
# 81b6e Cmp8IfZero [Register(0xb1), Register(0xad)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b1 ad 
# 81b71 Cmp8IfZero [Register(0xb0), Register(0xac)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 b0 ac 
# 81b74 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_2)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 86 1b 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/home/john/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_1 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# Number(USIZE, 0)
# 81b78 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(USIZE, 0)) }
#       Number(USIZE, 0)
20 ac 00 00 00 00 
# te81f <- inline_div32_div16_43_t60ec U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_t60ec U32 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))\nReturn { value: Some(Number(USIZE, 0)) }\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# 81b7e JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(USIZE, 0)) }
70 07 1e 08 
# goto inline_div32_div16_43_div16_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# 81b82 JmpImm [Label24(inline_div32_div16_43_div16_if_end_0)]
#       goto inline_div32_div16_43_div16_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
70 86 1b 08 
# :inline_div32_div16_43_div16_if_else_0_2 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_else_0_2
# :inline_div32_div16_43_div16_if_end_0 Some('/home/john/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_end_0
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Number(USIZE, 256)
# 81b86 LoadImm32 [Register(0xb4), Constant32(0x00000100=256)]
#       inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Number(USIZE, 256)
20 b4 00 01 00 00 
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# 81b8c Cmp8 [Register(0xb7), Register(0xaf)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
15 b7 af 
# 81b8f Cmp8IfZero [Register(0xb6), Register(0xae)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b6 ae 
# 81b92 Cmp8IfZero [Register(0xb5), Register(0xad)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b5 ad 
# 81b95 Cmp8IfZero [Register(0xb4), Register(0xac)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 b4 ac 
# 81b98 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_5)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
71 b7 1b 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/home/john/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_4 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_4
# inline_div32_div16_43_tdd9e <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# Index("a", Number(U8, 0))
# 81b9c Copy8 [Register(0xac), Register(0xdd)]
#       inline_div32_div16_43_tdd9e <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
#       Index("a", Number(U8, 0))
0b ac dd 
# inline_div32_div16_43_t3c0e <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# Index("b", Number(U8, 0))
# 81b9f Copy8 [Register(0xb0), Register(0xdc)]
#       inline_div32_div16_43_t3c0e <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
#       Index("b", Number(U8, 0))
0b b0 dc 
# inline_div32_div16_43_tda9f <- inline_div32_div16_43_tdd9e Divide Var(inline_div32_div16_43_t3c0e) Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# 81ba2 Divide8 [Register(0xdd), Register(0xdc), Register(0xdc)]
#       inline_div32_div16_43_tda9f <- inline_div32_div16_43_tdd9e Divide Var(inline_div32_div16_43_t3c0e) Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
17 dd dc dc 
# inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# 81ba6 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
20 ac 00 00 00 00 
# 81bac Copy8 [Register(0xdc), Register(0xac)]
#       inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
0b dc ac 
# te81f <- inline_div32_div16_43_te264 U32 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_te264 U32 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))\nReturn { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# 81baf JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
70 07 1e 08 
# goto inline_div32_div16_43_div16_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# 81bb3 JmpImm [Label24(inline_div32_div16_43_div16_if_end_3)]
#       goto inline_div32_div16_43_div16_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
70 b7 1b 08 
# :inline_div32_div16_43_div16_if_else_0_5 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_else_0_5
# :inline_div32_div16_43_div16_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_end_3
# inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(29,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81bb7 LoadImm32 [Register(0xd4), Constant32(0x00000000=0)]
#       inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(29,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 d4 00 00 00 00 
# inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/home/john/lutcomp/programs/lib/div.j':(30,5))
# Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }
# Number(USIZE, 65535)
# 81bbd LoadImm32 [Register(0xb4), Constant32(0x0000ffff=65535)]
#       inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/home/john/lutcomp/programs/lib/div.j':(30,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }
#       Number(USIZE, 65535)
20 b4 ff ff 00 00 
# :inline_div32_div16_43_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# inline_div32_div16_43_div16_while_predicate_6
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81bc3 Copy32 [Register(0xd4), Register(0xb8)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 d4 b8 
# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81bc6 Cmp8 [Register(0xb7), Register(0xbb)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 b7 bb 
# 81bc9 Cmp8IfZero [Register(0xb6), Register(0xba)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b6 ba 
# 81bcc Cmp8IfZero [Register(0xb5), Register(0xb9)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b5 b9 
# 81bcf Cmp8IfZero [Register(0xb4), Register(0xb8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b4 b8 
# 81bd2 JcImm [Label24(inline_div32_div16_43_div16_while_end_8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 fd 1d 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_body_7)], resolved: None }
# :inline_div32_div16_43_div16_while_body_7 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# inline_div32_div16_43_div16_while_body_7
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("lo")
# 81bd6 Copy32 [Register(0xd4), Register(0xb8)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
#       Ident("lo")
21 d4 b8 
# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\nArithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# 81bd9 ClearCarry []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
03 
# 81bda AddCarry32_1 [Register(0xb8), Register(0xb4), Register(0xb8)]
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
30 b8 b4 b8 
# 81bde AddCarry32_2 []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
31 
# inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 81bdf Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b b8 d0 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 81be2 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 
# 81be5 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xd0), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 d0 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 81bea Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b ca b8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 81bed Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 81bf0 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 
# 81bf3 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 c8 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 81bf8 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b ca b9 
# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 81bfb Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 81bfe LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 
# 81c01 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xca), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 ca ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 81c06 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b ca ba 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 81c09 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b bb c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 81c0c LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 
# 81c0f Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 c8 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 81c14 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b ca bb 
# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 81c17 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b b8 d0 
# inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 81c1a LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
04 00 7f 
# 81c1d And8 [Register(0xd0), Register(0x00), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
1b d0 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 81c21 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b ca b8 
# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 81c24 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b b8 d0 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 81c27 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 81c2a LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
04 00 80 
# 81c2d And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
1b c8 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_tf572 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 81c31 Or8 [Register(0xd0), Register(0xca), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf572 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c d0 ca ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 81c35 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b ca b8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 81c38 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 81c3b LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
04 00 7f 
# 81c3e And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
1b c8 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 81c42 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b ca b9 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 81c45 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 81c48 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 81c4b LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
04 00 80 
# 81c4e And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
1b ca 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 81c52 Or8 [Register(0xc8), Register(0xca), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c c8 ca ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 81c56 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b ca b9 
# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 81c59 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 81c5c LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
04 00 7f 
# 81c5f And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
1b ca 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 81c63 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b ca ba 
# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 81c66 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 81c69 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b bb c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 81c6c LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
04 00 80 
# 81c6f And8 [Register(0xc8), Register(0x00), Register(0xd0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
1b c8 00 d0 
# inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 81c73 Or8 [Register(0xca), Register(0xd0), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c ca d0 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 81c77 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b ca ba 
# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 81c7a Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b bb c8 
# inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 81c7d LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
04 00 7f 
# 81c80 And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
1b c8 00 ca 
# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 81c84 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b ca bb 
# inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81c87 Copy32 [Register(0xb8), Register(0xd8)]
#       inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 b8 d8 
# goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1)], resolved: None }
# :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 None
# inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("mid")
# 81c8a Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
#       Ident("mid")
21 d8 b8 
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# 81c8d Copy32 [Register(0xb0), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
21 b0 bc 
# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 81c90 Mul8_16 [Register(0xb8), Register(0xbc), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 b8 bc c0 
# 81c94 LoadImm8 [Register(0xc2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 c2 00 
# 81c97 LoadImm8 [Register(0xc3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 c3 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 81c9a Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 81c9d LoadImm32 [Register(0xcc), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 cc 00 00 00 00 
# 81ca3 Copy8 [Register(0xc8), Register(0xcc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b c8 cc 
# inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 81ca6 Copy8 [Register(0xbd), Register(0xca)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b bd ca 
# inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 81ca9 LoadImm32 [Register(0xc4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 c4 00 00 00 00 
# 81caf Copy8 [Register(0xca), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b ca c4 
# inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 81cb2 Mul8_16 [Register(0xcc), Register(0xc4), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 cc c4 c4 
# 81cb6 LoadImm8 [Register(0xc6), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c6 00 
# 81cb9 LoadImm8 [Register(0xc7), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c7 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 81cbc Copy8 [Register(0xc5), Register(0xc9)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b c5 c9 
# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 81cbf Copy8 [Register(0xc9), Register(0xc7)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b c9 c7 
# inline_div32_div16_43_inline_div16_mul16_32_4_te25f <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 81cc2 Copy8 [Register(0xc4), Register(0xc9)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te25f <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b c4 c9 
# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 81cc5 Copy8 [Register(0xc9), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b c9 c6 
# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81cc8 LoadImm8 [Register(0xcb), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 cb 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 81ccb Copy8 [Register(0xcb), Register(0xc5)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b cb c5 
# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81cce LoadImm8 [Register(0xcb), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 cb 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81cd1 Copy8 [Register(0xcb), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b cb c4 
# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0xc4), Register(0xc4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 81cd4 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 
# 81cd5 AddCarry32_1 [Register(0xc0), Register(0xc4), Register(0xc0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 c0 c4 c0 
# 81cd9 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 
# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 81cda Copy8 [Register(0xbd), Register(0xca)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b bd ca 
# inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 81cdd LoadImm32 [Register(0xc4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 c4 00 00 00 00 
# 81ce3 Copy8 [Register(0xca), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b ca c4 
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 81ce6 Mul8_16 [Register(0xb8), Register(0xc4), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 b8 c4 c4 
# 81cea LoadImm8 [Register(0xc6), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c6 00 
# 81ced LoadImm8 [Register(0xc7), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 c7 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 81cf0 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 81cf3 LoadImm32 [Register(0xcc), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 cc 00 00 00 00 
# 81cf9 Copy8 [Register(0xc8), Register(0xcc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b c8 cc 
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 81cfc Mul8_16 [Register(0xcc), Register(0xbc), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 cc bc b8 
# 81d00 LoadImm8 [Register(0xba), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 ba 00 
# 81d03 LoadImm8 [Register(0xbb), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 bb 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81d06 Copy32 [Register(0xc4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 c4 bc 
# inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81d09 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 
# 81d0a AddCarry32_1 [Register(0xbc), Register(0xb8), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 bc b8 c4 
# 81d0e AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 
# inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 81d0f Copy8 [Register(0xc6), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b c6 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 81d12 Copy8 [Register(0xc8), Register(0xc7)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b c8 c7 
# inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 81d15 Copy8 [Register(0xc5), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b c5 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 81d18 Copy8 [Register(0xc8), Register(0xc6)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b c8 c6 
# inline_div32_div16_43_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 81d1b Copy8 [Register(0xc4), Register(0xc8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b c4 c8 
# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 81d1e Copy8 [Register(0xc8), Register(0xc5)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b c8 c5 
# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81d21 LoadImm8 [Register(0xcb), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 cb 00 
# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81d24 Copy8 [Register(0xcb), Register(0xc4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b cb c4 
# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xc0), Register(0xc0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 81d27 Copy32 [Register(0xc4), Register(0xbc)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 c4 bc 
# inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81d2a ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 
# 81d2b AddCarry32_1 [Register(0xc0), Register(0xbc), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 c0 bc b8 
# 81d2f AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 
# inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32)], resolved: None }
# :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 None
# inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# inline_div32_div16_43_tb0a8 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# Index("x", Number(U8, 2))
# 81d30 Copy8 [Register(0xba), Register(0xc8)]
#       inline_div32_div16_43_tb0a8 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
#       Index("x", Number(U8, 2))
0b ba c8 
# inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# Number(U8, 0)
# 81d33 LoadImm8 [Register(0xca), Constant8(0x00=0)]
#       inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
#       Number(U8, 0)
04 ca 00 
# if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# 81d36 Cmp8 [Register(0xc8), Register(0xca)]
#       if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
15 c8 ca 
# 81d39 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_11)]
#       if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
71 51 1d 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_10 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_10
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 81d3d Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d8 b8 
# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 81d40 Copy32 [Register(0xb8), Register(0xb4)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 
# 81d43 AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 
# goto inline_div32_div16_43_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81d49 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 c3 1b 08 
# goto inline_div32_div16_43_div16_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 81d4d JmpImm [Label24(inline_div32_div16_43_div16_if_end_9)]
#       goto inline_div32_div16_43_div16_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 51 1d 08 
# :inline_div32_div16_43_div16_if_else_0_11 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_11
# :inline_div32_div16_43_div16_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_9
# inline_div32_div16_43_tf944 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# Index("x", Number(U8, 3))
# 81d51 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_div16_43_tf944 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
#       Index("x", Number(U8, 3))
0b bb c8 
# inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# Number(U8, 0)
# 81d54 LoadImm8 [Register(0xca), Constant8(0x00=0)]
#       inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
#       Number(U8, 0)
04 ca 00 
# if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# 81d57 Cmp8 [Register(0xc8), Register(0xca)]
#       if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
15 c8 ca 
# 81d5a JcImm [Label24(inline_div32_div16_43_div16_if_else_0_14)]
#       if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
71 72 1d 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_13 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_13
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 81d5e Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d8 b8 
# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 81d61 Copy32 [Register(0xb8), Register(0xb4)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 
# 81d64 AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 
# goto inline_div32_div16_43_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81d6a JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 c3 1b 08 
# goto inline_div32_div16_43_div16_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 81d6e JmpImm [Label24(inline_div32_div16_43_div16_if_end_12)]
#       goto inline_div32_div16_43_div16_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 72 1d 08 
# :inline_div32_div16_43_div16_if_else_0_14 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_14
# :inline_div32_div16_43_div16_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_12
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 81d72 Cmp8 [Register(0xbb), Register(0xaf)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 bb af 
# 81d75 Cmp8IfZero [Register(0xba), Register(0xae)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 ba ae 
# 81d78 Cmp8IfZero [Register(0xb9), Register(0xad)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 b9 ad 
# 81d7b Cmp8IfZero [Register(0xb8), Register(0xac)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 b8 ac 
# 81d7e JcImm [Label24(inline_div32_div16_43_div16_if_else_0_17)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 96 1d 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_16
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 81d82 Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d8 b8 
# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 81d85 Copy32 [Register(0xb8), Register(0xb4)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 
# 81d88 AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 
# goto inline_div32_div16_43_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81d8e JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 c3 1b 08 
# goto inline_div32_div16_43_div16_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 81d92 JmpImm [Label24(inline_div32_div16_43_div16_if_end_15)]
#       goto inline_div32_div16_43_div16_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 96 1d 08 
# :inline_div32_div16_43_div16_if_else_0_17 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_17
# :inline_div32_div16_43_div16_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_15
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 81d96 Cmp8 [Register(0xbb), Register(0xaf)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 bb af 
# 81d99 Cmp8IfZero [Register(0xba), Register(0xae)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 ba ae 
# 81d9c Cmp8IfZero [Register(0xb9), Register(0xad)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 b9 ad 
# 81d9f Cmp8IfZero [Register(0xb8), Register(0xac)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 b8 ac 
# 81da2 JzImm [Label24(inline_div32_div16_43_div16_if_true_0_19)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 aa 1d 08 
# 81da6 JmpImm [Label24(inline_div32_div16_43_div16_if_else_0_20)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 b8 1d 08 
# :inline_div32_div16_43_div16_if_true_0_19 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_19
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81daa Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 d8 b8 
# te81f <- inline_div32_div16_43_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81dad Copy32 [Register(0xb8), Register(0xac)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 b8 ac 
# goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81db0 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 07 1e 08 
# goto inline_div32_div16_43_div16_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 81db4 JmpImm [Label24(inline_div32_div16_43_div16_if_end_18)]
#       goto inline_div32_div16_43_div16_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 b8 1d 08 
# :inline_div32_div16_43_div16_if_else_0_20 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_20
# :inline_div32_div16_43_div16_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_18
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 81db8 Copy32 [Register(0xb8), Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 b8 00 
# 81dbb Invert8 [Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 
# 81dbd Invert8 [Register(0x01)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 
# 81dbf Invert8 [Register(0x02)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 
# 81dc1 Invert8 [Register(0x03)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 
# 81dc3 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 
# 81dc9 ClearCarry []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 
# 81dca AddCarry32_1 [Register(0xac), Register(0x00), Register(0xb8)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 ac 00 b8 
# 81dce AddCarry32_2 []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 
# inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 81dcf Cmp8 [Register(0xb3), Register(0xbb)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 b3 bb 
# 81dd2 Cmp8IfZero [Register(0xb2), Register(0xba)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b2 ba 
# 81dd5 Cmp8IfZero [Register(0xb1), Register(0xb9)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b1 b9 
# 81dd8 Cmp8IfZero [Register(0xb0), Register(0xb8)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b0 b8 
# 81ddb JcImm [Label24(inline_div32_div16_43_div16_if_else_0_23)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 ed 1d 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/home/john/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_22 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_22
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81ddf Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 d8 b8 
# te81f <- inline_div32_div16_43_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81de2 Copy32 [Register(0xb8), Register(0xac)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 b8 ac 
# goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81de5 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 07 1e 08 
# goto inline_div32_div16_43_div16_if_end_21 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 81de9 JmpImm [Label24(inline_div32_div16_43_div16_if_end_21)]
#       goto inline_div32_div16_43_div16_if_end_21 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 ed 1d 08 
# :inline_div32_div16_43_div16_if_else_0_23 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_23
# :inline_div32_div16_43_div16_if_end_21 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_21
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 81ded Copy32 [Register(0xd8), Register(0xb8)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 d8 b8 
# inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# 81df0 Copy32 [Register(0xb8), Register(0xd4)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
21 b8 d4 
# 81df3 AddImm32IgnoreCarry [Register(0xd4), Constant32(0x00000001=1)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
32 d4 01 00 00 00 
# goto inline_div32_div16_43_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# 81df9 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
70 c3 1b 08 
# :inline_div32_div16_43_div16_while_end_8 Some('/home/john/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_while_end_8
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 81dfd Copy32 [Register(0xd4), Register(0xb8)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 d4 b8 
# te81f <- inline_div32_div16_43_t1506 U32 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 81e00 Copy32 [Register(0xb8), Register(0xac)]
#       te81f <- inline_div32_div16_43_t1506 U32 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
21 b8 ac 
# goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 81e03 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/home/john/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
70 07 1e 08 
# :inline_div32_div16_43_function_end_div16 None
# inline_div32_div16_43_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81e07 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
32 0c 08 00 00 00 
# return Some(te81f) Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81e0d Copy32 [Register(0xac), Register(0x00)]
#       return Some(te81f) Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
21 ac 00 
# 81e10 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 
# 81e16 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# goto div32_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# 81e18 JmpImm [Label24(div32_if_end_3)]
#       goto div32_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
70 1c 1e 08 
# :div32_if_else_0_5 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# div32_if_else_0_5
# :div32_if_end_3 Some('/home/john/lutcomp/programs/lib/div.j':(71,5))
# div32_if_end_3
# lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(75,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81e1c LoadImm32 [Register(0xc4), Constant32(0x00000000=0)]
#       lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(75,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 c4 00 00 00 00 
# hi <- 0xffffffffu32  Some('/home/john/lutcomp/programs/lib/div.j':(76,5))
# Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }
# Number(USIZE, 4294967295)
# 81e22 LoadImm32 [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       hi <- 0xffffffffu32  Some('/home/john/lutcomp/programs/lib/div.j':(76,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }
#       Number(USIZE, 4294967295)
20 b4 ff ff ff ff 
# :div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# div32_while_predicate_6
# t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81e28 Copy32 [Register(0xc4), Register(0xb8)]
#       t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 c4 b8 
# t5508 <- hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81e2b Cmp8 [Register(0xb7), Register(0xbb)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 b7 bb 
# 81e2e Cmp8IfZero [Register(0xb6), Register(0xba)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b6 ba 
# 81e31 Cmp8IfZero [Register(0xb5), Register(0xb9)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b5 b9 
# 81e34 Cmp8IfZero [Register(0xb4), Register(0xb8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 b4 b8 
# 81e37 JcImm [Label24(div32_while_end_8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 94 20 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# div32_while_body_7
# t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# Ident("lo")
# 81e3b Copy32 [Register(0xc4), Register(0xb8)]
#       t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
#       Ident("lo")
21 c4 b8 
# inline_div32_shiftright1_44_a <- t1506 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_a <- t1506 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 81e3e Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b b8 d0 
# inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 81e41 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 
# 81e44 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xd0), Register(0xca)]
#       inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 d0 ca 
# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 81e49 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b ca b8 
# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 81e4c Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 81e4f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 
# 81e52 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 c8 ca 
# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 81e57 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b ca b9 
# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 81e5a Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 81e5d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 
# 81e60 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 ca ca 
# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 81e65 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b ca ba 
# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 81e68 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b bb c8 
# inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 81e6b LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 
# 81e6e Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 c8 ca 
# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 81e73 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b ca bb 
# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 81e76 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b b8 d0 
# inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 81e79 LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
04 00 7f 
# 81e7c And8 [Register(0xd0), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
1b d0 00 ca 
# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 81e80 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b ca b8 
# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 81e83 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b b8 d0 
# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 81e86 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 81e89 LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
04 00 80 
# 81e8c And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
1b c8 00 ca 
# inline_div32_shiftright1_44_tf572 <- inline_div32_shiftright1_44_tdd9e BitwiseOr Var(inline_div32_shiftright1_44_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 81e90 Or8 [Register(0xd0), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_44_tf572 <- inline_div32_shiftright1_44_tdd9e BitwiseOr Var(inline_div32_shiftright1_44_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c d0 ca ca 
# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 81e94 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b ca b8 
# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 81e97 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 81e9a LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
04 00 7f 
# 81e9d And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
1b c8 00 ca 
# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 81ea1 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b ca b9 
# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 81ea4 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 81ea7 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 81eaa LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
04 00 80 
# 81ead And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
1b ca 00 ca 
# inline_div32_shiftright1_44_t4d1a <- inline_div32_shiftright1_44_t1539 BitwiseOr Var(inline_div32_shiftright1_44_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 81eb1 Or8 [Register(0xc8), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_44_t4d1a <- inline_div32_shiftright1_44_t1539 BitwiseOr Var(inline_div32_shiftright1_44_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c c8 ca ca 
# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 81eb5 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b ca b9 
# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 81eb8 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 81ebb LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
04 00 7f 
# 81ebe And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
1b ca 00 ca 
# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 81ec2 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b ca ba 
# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 81ec5 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 81ec8 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b bb c8 
# inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 81ecb LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
04 00 80 
# 81ece And8 [Register(0xc8), Register(0x00), Register(0xd0)]
#       inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
1b c8 00 d0 
# inline_div32_shiftright1_44_t1bbf <- inline_div32_shiftright1_44_t577f BitwiseOr Var(inline_div32_shiftright1_44_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 81ed2 Or8 [Register(0xca), Register(0xd0), Register(0xca)]
#       inline_div32_shiftright1_44_t1bbf <- inline_div32_shiftright1_44_t577f BitwiseOr Var(inline_div32_shiftright1_44_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c ca d0 ca 
# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 81ed6 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b ca ba 
# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 81ed9 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b bb c8 
# inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 81edc LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
04 00 7f 
# 81edf And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
1b c8 00 ca 
# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 81ee3 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b ca bb 
# inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81ee6 Copy32 [Register(0xb8), Register(0xcc)]
#       t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 b8 cc 
# goto inline_div32_shiftright1_44_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_44_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_44_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_44_function_end_shiftright1 None
# inline_div32_shiftright1_44_function_end_shiftright1
# t5508 <- hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0xb4), Register(0xb4)], resolved: None }
# inline_div32_shiftright1_45_a <- t5508 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# 81ee9 Copy32 [Register(0xb4), Register(0xb8)]
#       inline_div32_shiftright1_45_a <- t5508 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
21 b4 b8 
# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 81eec Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b b8 d0 
# inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 81eef LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 
# 81ef2 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xd0), Register(0xca)]
#       inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 d0 ca 
# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 81ef7 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t5a19 U8 Some('/home/john/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b ca b8 
# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 81efa Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 81efd LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 
# 81f00 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 c8 ca 
# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 81f05 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_ta431 U8 Some('/home/john/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b ca b9 
# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 81f08 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 81f0b LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 
# 81f0e Shift8 [Constant8(0x04=4), Register(0x00), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 ca ca 
# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 81f13 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t350e U8 Some('/home/john/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b ca ba 
# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 81f16 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b bb c8 
# inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 81f19 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 
# 81f1c Shift8 [Constant8(0x04=4), Register(0x00), Register(0xc8), Register(0xca)]
#       inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 c8 ca 
# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 81f21 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_taa3e U8 Some('/home/john/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b ca bb 
# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 81f24 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b b8 d0 
# inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 81f27 LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
04 00 7f 
# 81f2a And8 [Register(0xd0), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
1b d0 00 ca 
# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 81f2e Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t9144 U8 Some('/home/john/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b ca b8 
# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 81f31 Copy8 [Register(0xb8), Register(0xd0)]
#       inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b b8 d0 
# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 81f34 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 81f37 LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
04 00 80 
# 81f3a And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
1b c8 00 ca 
# inline_div32_shiftright1_45_tf572 <- inline_div32_shiftright1_45_tdd9e BitwiseOr Var(inline_div32_shiftright1_45_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 81f3e Or8 [Register(0xd0), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_45_tf572 <- inline_div32_shiftright1_45_tdd9e BitwiseOr Var(inline_div32_shiftright1_45_t8384) Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c d0 ca ca 
# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 81f42 Copy8 [Register(0xca), Register(0xb8)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf572 U8 Some('/home/john/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b ca b8 
# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 81f45 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 81f48 LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
04 00 7f 
# 81f4b And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
1b c8 00 ca 
# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 81f4f Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t5a73 U8 Some('/home/john/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b ca b9 
# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 81f52 Copy8 [Register(0xb9), Register(0xc8)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b b9 c8 
# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 81f55 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 81f58 LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
04 00 80 
# 81f5b And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
1b ca 00 ca 
# inline_div32_shiftright1_45_t4d1a <- inline_div32_shiftright1_45_t1539 BitwiseOr Var(inline_div32_shiftright1_45_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 81f5f Or8 [Register(0xc8), Register(0xca), Register(0xca)]
#       inline_div32_shiftright1_45_t4d1a <- inline_div32_shiftright1_45_t1539 BitwiseOr Var(inline_div32_shiftright1_45_t1f15) Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c c8 ca ca 
# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 81f63 Copy8 [Register(0xca), Register(0xb9)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t4d1a U8 Some('/home/john/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b ca b9 
# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 81f66 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 81f69 LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
04 00 7f 
# 81f6c And8 [Register(0xca), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
1b ca 00 ca 
# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 81f70 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t887d U8 Some('/home/john/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b ca ba 
# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 81f73 Copy8 [Register(0xba), Register(0xca)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b ba ca 
# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 81f76 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b bb c8 
# inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 81f79 LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
04 00 80 
# 81f7c And8 [Register(0xc8), Register(0x00), Register(0xd0)]
#       inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
1b c8 00 d0 
# inline_div32_shiftright1_45_t1bbf <- inline_div32_shiftright1_45_t577f BitwiseOr Var(inline_div32_shiftright1_45_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 81f80 Or8 [Register(0xca), Register(0xd0), Register(0xca)]
#       inline_div32_shiftright1_45_t1bbf <- inline_div32_shiftright1_45_t577f BitwiseOr Var(inline_div32_shiftright1_45_tc29b) Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c ca d0 ca 
# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 81f84 Copy8 [Register(0xca), Register(0xba)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t1bbf U8 Some('/home/john/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b ca ba 
# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 81f87 Copy8 [Register(0xbb), Register(0xc8)]
#       inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b bb c8 
# inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 81f8a LoadImm8 [Register(0x00), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
04 00 7f 
# 81f8d And8 [Register(0xc8), Register(0x00), Register(0xca)]
#       inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
1b c8 00 ca 
# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 81f91 Copy8 [Register(0xca), Register(0xbb)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_tb911 U8 Some('/home/john/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b ca bb 
# inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# goto inline_div32_shiftright1_45_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_45_function_end_shiftright1 Some('/home/john/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_45_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_45_function_end_shiftright1 None
# inline_div32_shiftright1_45_function_end_shiftright1
# mid <- t9599 Add Var(t3803) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# 81f94 ClearCarry []
#       mid <- t9599 Add Var(t3803) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
03 
# 81f95 AddCarry32_1 [Register(0xcc), Register(0xb8), Register(0xb8)]
#       mid <- t9599 Add Var(t3803) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
30 cc b8 b8 
# 81f99 AddCarry32_2 []
#       mid <- t9599 Add Var(t3803) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
31 
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 81f9a Copy32 [Register(0x0c), Register(0xe0)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c e0 
# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 81f9d Copy32 [Register(0xe0), Register(0xbc)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 e0 bc 
# 81fa0 AddImm32IgnoreCarry [Register(0xbc), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 bc 00 00 00 00 
# tb608 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# optimized away noop copy Instruction { source: "tb608 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nAddressOf(Ident(\"x64\"))\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# 81fa6 Copy32 [Register(0xb8), Register(0x00)]
#       Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 b8 00 
# 81fa9 Copy32 [Register(0xb0), Register(0x04)]
#       Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 b0 04 
# 81fac Copy32 [Register(0xbc), Register(0x08)]
#       Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 bc 08 
# Registers used by this function: {172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228}
# Registers used by callee tree: {76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143}
# Registers to save: []
# 81faf AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 
# 81fb5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c bf 1f 08 00 
# 81fbb JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 a2 25 08 
# 81fbf AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 
# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 81fc5 Copy32 [Register(0x0c), Register(0xe0)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c e0 
# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 81fc8 Copy32 [Register(0xe0), Register(0xbc)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 e0 bc 
# 81fcb AddImm32IgnoreCarry [Register(0xbc), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 bc 04 00 00 00 
# tb973 <- mem[t3f2a] U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# 81fd1 Load32 [Register(0xbc), Register(0xc0)]
#       tb973 <- mem[t3f2a] U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
22 bc c0 
# t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81fd4 LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 bc 00 00 00 00 
# if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# 81fda Cmp8 [Register(0xc3), Register(0xbf)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
15 c3 bf 
# 81fdd Cmp8IfZero [Register(0xc2), Register(0xbe)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 c2 be 
# 81fe0 Cmp8IfZero [Register(0xc1), Register(0xbd)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 c1 bd 
# 81fe3 Cmp8IfZero [Register(0xc0), Register(0xbc)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 c0 bc 
# 81fe6 JcImm [Label24(div32_if_else_0_11)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
71 fb 1f 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# div32_if_true_0_10
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 81fea Copy32 [Register(0xb8), Register(0xb4)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 
# 81fed AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 
# goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 81ff3 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 28 1e 08 
# goto div32_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 81ff7 JmpImm [Label24(div32_if_end_9)]
#       goto div32_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 fb 1f 08 
# :div32_if_else_0_11 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_11
# :div32_if_end_9 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_9
# te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 81ffb Copy32 [Register(0x0c), Register(0xe0)]
#       te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c e0 
# x <- mem[te546] U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# 81ffe Load32 [Register(0xe0), Register(0xbc)]
#       x <- mem[te546] U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
22 e0 bc 
# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 82001 Cmp8 [Register(0xbf), Register(0xaf)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 bf af 
# 82004 Cmp8IfZero [Register(0xbe), Register(0xae)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 be ae 
# 82007 Cmp8IfZero [Register(0xbd), Register(0xad)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 bd ad 
# 8200a Cmp8IfZero [Register(0xbc), Register(0xac)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 bc ac 
# 8200d JcImm [Label24(div32_if_else_0_14)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 22 20 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# div32_if_true_0_13
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 82011 Copy32 [Register(0xb8), Register(0xb4)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 b8 b4 
# 82014 AddImm32IgnoreCarry [Register(0xb4), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 b4 ff ff ff ff 
# goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 8201a JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 28 1e 08 
# goto div32_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 8201e JmpImm [Label24(div32_if_end_12)]
#       goto div32_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 22 20 08 
# :div32_if_else_0_14 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_14
# :div32_if_end_12 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_12
# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 82022 Cmp8 [Register(0xbf), Register(0xaf)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 bf af 
# 82025 Cmp8IfZero [Register(0xbe), Register(0xae)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 be ae 
# 82028 Cmp8IfZero [Register(0xbd), Register(0xad)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 bd ad 
# 8202b Cmp8IfZero [Register(0xbc), Register(0xac)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 bc ac 
# 8202e JzImm [Label24(div32_if_true_0_16)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 36 20 08 
# 82032 JmpImm [Label24(div32_if_else_0_17)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 4b 20 08 
# :div32_if_true_0_16 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_16
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 82036 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 
# return Some(tfd7e) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 8203c Copy32 [Register(0xb8), Register(0x00)]
#       return Some(tfd7e) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 b8 00 
# 8203f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 
# 82045 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# goto div32_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 82047 JmpImm [Label24(div32_if_end_15)]
#       goto div32_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 4b 20 08 
# :div32_if_else_0_17 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_17
# :div32_if_end_15 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_15
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 8204b Copy32 [Register(0xbc), Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 bc 00 
# 8204e Invert8 [Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 
# 82050 Invert8 [Register(0x01)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 
# 82052 Invert8 [Register(0x02)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 
# 82054 Invert8 [Register(0x03)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 
# 82056 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 
# 8205c ClearCarry []
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 
# 8205d AddCarry32_1 [Register(0xac), Register(0x00), Register(0xbc)]
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 ac 00 bc 
# 82061 AddCarry32_2 []
#       r <- t8792 Subtract Var(tad57) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 
# taee0 <- r U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "taee0 <- r U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xbc), Register(0xbc)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xb0), Register(0xb0)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 82062 Cmp8 [Register(0xb3), Register(0xbf)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 b3 bf 
# 82065 Cmp8IfZero [Register(0xb2), Register(0xbe)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b2 be 
# 82068 Cmp8IfZero [Register(0xb1), Register(0xbd)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b1 bd 
# 8206b Cmp8IfZero [Register(0xb0), Register(0xbc)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 b0 bc 
# 8206e JcImm [Label24(div32_if_else_0_20)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 87 20 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_19
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 82072 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 
# return Some(tfd7e) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 82078 Copy32 [Register(0xb8), Register(0x00)]
#       return Some(tfd7e) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 b8 00 
# 8207b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 
# 82081 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# goto div32_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 82083 JmpImm [Label24(div32_if_end_18)]
#       goto div32_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 87 20 08 
# :div32_if_else_0_20 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_20
# :div32_if_end_18 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_18
# tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xb8), Register(0xb8)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# 82087 Copy32 [Register(0xb8), Register(0xc4)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
21 b8 c4 
# 8208a AddImm32IgnoreCarry [Register(0xc4), Constant32(0x00000001=1)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
32 c4 01 00 00 00 
# goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# 82090 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
70 28 1e 08 
# :div32_while_end_8 Some('/home/john/lutcomp/programs/lib/div.j':(78,5))
# div32_while_end_8
# t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 82094 Copy32 [Register(0xc4), Register(0xb8)]
#       t1506 <- lo U32 Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 c4 b8 
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 82097 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
32 0c 08 00 00 00 
# return Some(t1506) Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 8209d Copy32 [Register(0xb8), Register(0x00)]
#       return Some(t1506) Some('/home/john/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
21 b8 00 
# 820a0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 
# 820a6 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_div32 None
# function_end_div32
# Unreachable None
# 820a8 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([231])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_i (Arg0 i Number(U8)) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([233])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([233])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 (t38c7 Arithmetic(Multiply, Ident("row"), Number(U8, 20))) Reg(U8) Some([232])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) Reg(U32) Some([236, 237, 238, 239])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }) Reg(U32) Some([236, 237, 238, 239])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }) Reg(U32) Some([240, 241, 242, 243])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([233])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([244])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([232])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([232])
# Var t1261 (t1261 Arithmetic(And, Ident("ch"), Number(U8, 15))) Reg(U8) Some([231])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([232])
# Var t263d (t263d Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })) Reg(U8) Some([231])
# Var t38dc (t38dc Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })) Reg(U8) Some([231])
# Var t62fa (t62fa Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })) Reg(U8) Some([231])
# Var t6e3a (t6e3a Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))) Reg(U8) Some([233])
# Var t7d80 (t7d80 Arithmetic(And, Ident("pos"), Number(U8, 15))) Reg(U8) Some([232])
# Var t8d12 (t8d12 Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))) Reg(U8) Some([233])
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([248, 249, 250, 251])
# Var tb875 (tb875 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))) Reg(U8) Some([231])
# Var tbd94 (tbd94 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([231])
# Var tcd38 (tcd38 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))) Reg(U8) Some([232])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([232])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([231])
# Var tdf0 (tdf0 Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })) Reg(U8) Some([231])
# Var tec9e (tec9e Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))) Reg(U8) Some([232])
# 820ad Copy8 [Register(0x00), Register(0xe8)]
#       Save function parameter 'i' registers [0] to locals [232].
0b 00 e8 
# 820b0 Copy8 [Register(0x04), Register(0xe7)]
#       Save function parameter 'ch' registers [4] to locals [231].
0b 04 e7 
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(15,5))
# Assign { target: Ident("pos"), var_type: Some(Number(U8)), value: Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] }) }
# Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(15,5))\nAssign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_i <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(15,5))
# Assign { target: Ident("pos"), var_type: Some(Number(U8)), value: Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] }) }
# Call(Call { function: "lcd_logical_to_physical", parameters: [Ident("i")] })
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_i <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(15,5))\nAssign { target: Ident(\"pos\"), var_type: Some(Number(U8)), value: Call(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"lcd_logical_to_physical\", parameters: [Ident(\"i\")] })\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
# Arithmetic(Divide, Ident("i"), Number(U8, 20))
# Ident("i")
# 820b3 Copy8 [Register(0xe8), Register(0xf4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
#       Ident("i")
0b e8 f4 
# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
# Arithmetic(Divide, Ident("i"), Number(U8, 20))
# 820b6 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
04 00 14 
# 820b9 Divide8 [Register(0xf4), Register(0x00), Register(0xe9)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
17 f4 00 e9 
# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Ident("i")
# 820bd Copy8 [Register(0xe8), Register(0xf4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- inline_lcd_draw_char_lcd_logical_to_physical_3_i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Ident("i")
0b e8 f4 
# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Arithmetic(Multiply, Ident("row"), Number(U8, 20))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))\nArithmetic(Multiply, Ident(\"row\"), Number(U8, 20))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Arithmetic(Multiply, Ident("row"), Number(U8, 20))
# 820c0 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Arithmetic(Multiply, Ident("row"), Number(U8, 20))
04 00 14 
# 820c3 Mul8_8 [Register(0xe9), Register(0x00), Register(0xe8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Arithmetic(Multiply, Ident("row"), Number(U8, 20))
10 e9 00 e8 
# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# 820c7 Copy8 [Register(0xe8), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
0b e8 00 
# 820ca Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
02 00 
# 820cc Add8NoCarryIn [Register(0xf4), Register(0x00), Register(0xe8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/home/john/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
14 f4 00 e8 
# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 820d0 LoadImm32 [Register(0xf0), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 f0 23 08 08 00 
# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xe9), Register(0xe9)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
# 820d6 LoadImm32 [Register(0xec), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
20 ec 00 00 00 00 
# 820dc Copy8 [Register(0xe9), Register(0xec)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
0b e9 ec 
# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# 820df ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
03 
# 820e0 AddCarry32_1 [Register(0xf0), Register(0xec), Register(0xec)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
30 f0 ec ec 
# 820e4 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
31 
# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 820e5 Load8 [Register(0xec), Register(0xe9)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 ec e9 
# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 820e8 Add8NoCarryIn [Register(0xe9), Register(0xe8), Register(0xe8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 e9 e8 e8 
# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/home/john/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: JmpImm, args: [Label24(inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical None
# inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# t136d <- pos U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })\nArithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
# 820ec LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
04 00 04 
# 820ef Shift8 [Constant8(0x05=5), Register(0x00), Register(0xe8), Register(0xe9)]
#       t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
1e 05 00 e8 e9 
# t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# 820f4 LoadImm8 [Register(0x00), Constant8(0x08=8)]
#       t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
04 00 08 
# 820f7 Or8 [Register(0xe9), Register(0x00), Register(0xe9)]
#       t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
1c e9 00 e9 
# None <= call io_write1(t6e3a,) Some('/home/john/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# 820fb Out1 [Register(0xe9)]
#       IoWrite1
69 e9 
# t136d <- pos U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# Arithmetic(And, Ident("pos"), Number(U8, 15))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })\nArithmetic(And, Ident(\"pos\"), Number(U8, 15))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# Arithmetic(And, Ident("pos"), Number(U8, 15))
# 820fd LoadImm8 [Register(0x00), Constant8(0x0f=15)]
#       t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
#       Arithmetic(And, Ident("pos"), Number(U8, 15))
04 00 0f 
# 82100 And8 [Register(0xe8), Register(0x00), Register(0xe8)]
#       t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
#       Arithmetic(And, Ident("pos"), Number(U8, 15))
1b e8 00 e8 
# None <= call io_write1(t7d80,) Some('/home/john/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# 82104 Out1 [Register(0xe8)]
#       IoWrite1
69 e8 
# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 82106 LoadImm32 [Register(0xf8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 f8 02 00 00 00 
# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 8210c Copy32 [Register(0xf8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 f8 00 
# Registers used by this function: {231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 8210f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 
# 82115 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 1f 21 08 00 
# 8211b JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 eb 1a 08 
# 8211f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })\nArithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xe7), Register(0xe7)], resolved: None }
# tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
# 82125 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
04 00 04 
# 82128 Shift8 [Constant8(0x05=5), Register(0x00), Register(0xe7), Register(0xe8)]
#       tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
1e 05 00 e7 e8 
# tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# 8212d LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
04 00 80 
# 82130 Or8 [Register(0xe8), Register(0x00), Register(0xe8)]
#       tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
1c e8 00 e8 
# None <= call io_write1(tcd38,) Some('/home/john/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# 82134 Out1 [Register(0xe8)]
#       IoWrite1
69 e8 
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# Arithmetic(And, Ident("ch"), Number(U8, 15))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })\nArithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))\nArithmetic(And, Ident(\"ch\"), Number(U8, 15))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xe7), Register(0xe7)], resolved: None }
# t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# Arithmetic(And, Ident("ch"), Number(U8, 15))
# 82136 LoadImm8 [Register(0x00), Constant8(0x0f=15)]
#       t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
#       Arithmetic(And, Ident("ch"), Number(U8, 15))
04 00 0f 
# 82139 And8 [Register(0xe7), Register(0x00), Register(0xe7)]
#       t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
#       Arithmetic(And, Ident("ch"), Number(U8, 15))
1b e7 00 e7 
# tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# 8213d LoadImm8 [Register(0x00), Constant8(0x80=128)]
#       tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
04 00 80 
# 82140 Or8 [Register(0xe7), Register(0x00), Register(0xe7)]
#       tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
1c e7 00 e7 
# None <= call io_write1(tb875,) Some('/home/john/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# 82144 Out1 [Register(0xe7)]
#       IoWrite1
69 e7 
# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 82146 LoadImm32 [Register(0xf8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 f8 02 00 00 00 
# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 8214c Copy32 [Register(0xf8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 f8 00 
# Registers used by this function: {231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 8214f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 
# 82155 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 5f 21 08 00 
# 8215b JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 eb 1a 08 
# 8215f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 
# return None None
# Return { value: None }
# 82165 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 82167 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :lcd_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([252])
# Var lcd_current (Local lcd_current Number(U8) Reg(U8)) Reg(U8) Some([252])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t1f11 (t1f11 Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })) Reg(U8) Some([252])
# Var t2bc4 (t2bc4 Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })) Reg(U8) Some([252])
# Var t385d (t385d Number(USIZE, 1)) Reg(U32) Some([16, 17, 18, 19])
# Var t40c1 (t40c1 Number(U8, 2)) Reg(U8) Some([252])
# Var t7bb3 (t7bb3 Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })) Reg(U8) Some([252])
# Var t80a1 (t80a1 Number(U8, 12)) Reg(U8) Some([252])
# Var t8820 (t8820 Number(U8, 3)) Reg(U8) Some([252])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([20])
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([16, 17, 18, 19])
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([24, 25, 26, 27])
# Var t9bbb (t9bbb Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })) Reg(U8) Some([252])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([24, 25, 26, 27])
# Var t9f32 (t9f32 Number(U8, 8)) Reg(U8) Some([252])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([28])
# Var tb018 (tb018 Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })) Reg(U8) Some([252])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([252])
# Var tb9f6 (tb9f6 Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })) Reg(U8) Some([252])
# Var tbd94 (tbd94 Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })) Reg(U8) Some([252])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([252])
# Var td623 (td623 Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })) Reg(U8) Some([252])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([252])
# lcd_current <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(65,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8216c LoadImm8 [Register(0xfc), Constant8(0x00=0)]
#       lcd_current <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(65,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 fc 00 
# i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(68,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 8216f LoadImm8 [Register(0xfc), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(68,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 fc 00 
# :lcd_init_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xfc), Register(0xfc)], resolved: None }
# t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Number(U8, 80)
# 82172 LoadImm8 [Register(0x14), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
#       Number(U8, 80)
04 14 50 
# if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# 82175 Cmp8 [Register(0x14), Register(0xfc)]
#       if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
15 14 fc 
# 82178 JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
71 9c 21 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xfc), Register(0xfc)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 8217c LoadImm32 [Register(0x18), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 18 00 00 00 00 
# 82182 Copy8 [Register(0xfc), Register(0x18)]
#       t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b fc 18 
# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 82185 AddImm32IgnoreCarry [Register(0x18), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 18 0c 10 0f 00 
# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 8218b LoadImm8 [Register(0x1c), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 1c 20 
# mem[t9e70] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# 8218e Store8 [Register(0x1c), Register(0x18)]
#       mem[t9e70] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
06 1c 18 
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xfc), Register(0xfc)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 82191 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 
# 82194 Add8NoCarryIn [Register(0xfc), Register(0x00), Register(0xfc)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 fc 00 fc 
# goto lcd_init_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# 82198 JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
70 72 21 08 
# :lcd_init_while_end_2 Some('/home/john/lutcomp/programs/lib/lcd.j':(69,5))
# lcd_init_while_end_2
# t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(74,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 8219c LoadImm8 [Register(0xfc), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(74,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 fc 03 
# None <= call io_write1(t8820,) Some('/home/john/lutcomp/programs/lib/lcd.j':(74,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 8219f Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(75,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 821a1 LoadImm32 [Register(0x10), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(75,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 10 01 00 00 00 
# None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(75,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 821a7 Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(75,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 821aa AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 
# 821b0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c ba 21 08 00 
# 821b6 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 eb 1a 08 
# 821ba AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 
# t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(76,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 821c0 LoadImm8 [Register(0xfc), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(76,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 fc 03 
# None <= call io_write1(t8820,) Some('/home/john/lutcomp/programs/lib/lcd.j':(76,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 821c3 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(77,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 821c5 LoadImm32 [Register(0x10), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(77,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 10 01 00 00 00 
# None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(77,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 821cb Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(77,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 821ce AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 
# 821d4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c de 21 08 00 
# 821da JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 eb 1a 08 
# 821de AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 
# t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 821e4 LoadImm8 [Register(0xfc), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 fc 03 
# None <= call io_write1(t8820,) Some('/home/john/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 821e7 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 821e9 LoadImm32 [Register(0x10), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 10 01 00 00 00 
# None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 821ef Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/home/john/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 821f2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 
# 821f8 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 02 22 08 00 
# 821fe JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 eb 1a 08 
# 82202 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 
# t40c1 <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# Number(U8, 2)
# 82208 LoadImm8 [Register(0xfc), Constant8(0x02=2)]
#       t40c1 <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
#       Number(U8, 2)
04 fc 02 
# None <= call io_write1(t40c1,) Some('/home/john/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# 8220b Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 8220d LoadImm32 [Register(0x10), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 10 02 00 00 00 
# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 82213 Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 82216 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 
# 8221c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 26 22 08 00 
# 82222 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 eb 1a 08 
# 82226 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 
# t40c1 <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(84,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# Number(U8, 2)
# 8222c LoadImm8 [Register(0xfc), Constant8(0x02=2)]
#       t40c1 <- 0n2/0x02u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(84,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
#       Number(U8, 2)
04 fc 02 
# None <= call io_write1(t40c1,) Some('/home/john/lutcomp/programs/lib/lcd.j':(84,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# 8222f Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# t9f32 <- 0n8/0x08u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
# Number(U8, 8)
# 82231 LoadImm8 [Register(0xfc), Constant8(0x08=8)]
#       t9f32 <- 0n8/0x08u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
#       Number(U8, 8)
04 fc 08 
# None <= call io_write1(t9f32,) Some('/home/john/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
# 82234 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 82236 LoadImm32 [Register(0x10), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 10 02 00 00 00 
# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 8223c Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 8223f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 
# 82245 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 4f 22 08 00 
# 8224b JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 eb 1a 08 
# 8224f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# Number(U8, 0)
# 82255 LoadImm8 [Register(0xfc), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(88,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
#       Number(U8, 0)
04 fc 00 
# None <= call io_write1(tb36e,) Some('/home/john/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# 82258 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# t80a1 <- 0n12/0x0cu8  Some('/home/john/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
# Number(U8, 12)
# 8225a LoadImm8 [Register(0xfc), Constant8(0x0c=12)]
#       t80a1 <- 0n12/0x0cu8  Some('/home/john/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
#       Number(U8, 12)
04 fc 0c 
# None <= call io_write1(t80a1,) Some('/home/john/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
# 8225d Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 8225f LoadImm32 [Register(0x10), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 10 02 00 00 00 
# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 82265 Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 82268 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 
# 8226e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 78 22 08 00 
# 82274 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 eb 1a 08 
# 82278 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 
# tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# Number(U8, 0)
# 8227e LoadImm8 [Register(0xfc), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
#       Number(U8, 0)
04 fc 00 
# None <= call io_write1(tb36e,) Some('/home/john/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# 82281 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
# Number(U8, 1)
# 82283 LoadImm8 [Register(0xfc), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
#       Number(U8, 1)
04 fc 01 
# None <= call io_write1(tfcd,) Some('/home/john/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
# 82286 Out1 [Register(0xfc)]
#       IoWrite1
69 fc 
# t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 82288 LoadImm32 [Register(0x10), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 10 02 00 00 00 
# None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 8228e Copy32 [Register(0x10), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/home/john/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 10 00 
# Registers used by this function: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 252}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171}
# Registers to save: []
# 82291 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 
# 82297 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c a1 22 08 00 
# 8229d JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 eb 1a 08 
# 822a1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 
# return None None
# Return { value: None }
# 822a7 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 822a9 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :lcd_putc
# Ret None
# Arg0=ch
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([29])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([29])
# Var t0 (static "lcd_current") Reg(U32) Some([32, 33, 34, 35])
# Var t1 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t164d (t164d Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }) Reg(U32) Some([36, 37, 38, 39])
# Var t2 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t3 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t31c0 (t31c0 Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })) Reg(U8) Some([29])
# Var t4 (static "lcd_current") Reg(U32) Some([40, 41, 42, 43])
# Var t4584 (t4584 Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))) Reg(U8) Some([44])
# Var t5 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t5880 (t5880 Call(Call { function: "lcd_scroll_up", parameters: [] })) Reg(U8) Some([29])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([44])
# Var t6 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t7 (static "lcd_current") Reg(U32) Some([32, 33, 34, 35])
# Var t8 (static "lcd_current") Reg(U32) Some([36, 37, 38, 39])
# Var t8658 (t8658 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))) Reg(U8) Some([29])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([29])
# Var t9 (static "lcd_current") Reg(U32) Some([32, 33, 34, 35])
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([29])
# Var tab78 (tab78 Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([29])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([44])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) Reg(U32) Some([36, 37, 38, 39])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([45])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([29])
# 822ae Copy8 [Register(0x00), Register(0x1d)]
#       Save function parameter 'ch' registers [0] to locals [29].
0b 00 1d 
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 822b1 LoadImm8 [Register(0x2d), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 2d 0a 
# if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# 822b4 Cmp8 [Register(0x1d), Register(0x2d)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
15 1d 2d 
# 822b7 JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
72 bf 22 08 
# 822bb JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
70 2c 23 08 
# :lcd_putc_if_true_0_1 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 822bf LoadImm32 [Register(0x20), Constant32(0x000f1008=987144)]
#       t0 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
20 20 08 10 0f 00 
# t5dda <- mem[t0] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 822c5 Load8 [Register(0x20), Register(0x2c)]
#       t5dda <- mem[t0] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
05 20 2c 
# tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# 822c8 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
04 00 14 
# 822cb Divide8 [Register(0x2c), Register(0x00), Register(0x1d)]
#       tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
17 2c 00 1d 
# t8658 <- tab78 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# 822cf LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t8658 <- tab78 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
04 00 01 
# 822d2 Add8NoCarryIn [Register(0x1d), Register(0x00), Register(0x1d)]
#       t8658 <- tab78 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
14 1d 00 1d 
# next <- t8658 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# 822d6 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- t8658 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
04 00 14 
# 822d9 Mul8_8 [Register(0x1d), Register(0x00), Register(0x1d)]
#       next <- t8658 Multiply Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
10 1d 00 1d 
# :lcd_putc_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_while_predicate_3
# t1 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 822dd LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
20 24 08 10 0f 00 
# t5dda <- mem[t1] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 822e3 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t1] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
05 24 2c 
# ta5ff <- next U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 822e6 Cmp8 [Register(0x1d), Register(0x2c)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 1d 2c 
# 822e9 JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 28 23 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_while_body_4
# t2 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 822ed LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t2 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 24 08 10 0f 00 
# t5dda <- mem[t2] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 822f3 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t2] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 24 2c 
# tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# 822f6 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
20 24 00 00 00 00 
# 822fc Copy8 [Register(0x2c), Register(0x24)]
#       tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
0b 2c 24 
# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# 822ff AddImm32IgnoreCarry [Register(0x24), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
32 24 0c 10 0f 00 
# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 82305 LoadImm8 [Register(0x2c), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 2c 20 
# mem[t164d] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# 82308 Store8 [Register(0x2c), Register(0x24)]
#       mem[t164d] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
06 2c 24 
# t3 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 8230b LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t3 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
20 24 08 10 0f 00 
# t4 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 82311 LoadImm32 [Register(0x28), Constant32(0x000f1008=987144)]
#       t4 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
20 28 08 10 0f 00 
# t5dda <- mem[t4] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 82317 Load8 [Register(0x28), Register(0x2c)]
#       t5dda <- mem[t4] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
05 28 2c 
# t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# 8231a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
04 00 01 
# 8231d Add8NoCarryIn [Register(0x2c), Register(0x00), Register(0x2c)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
14 2c 00 2c 
# mem[t3] <- t4584 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 82321 Store8 [Register(0x2c), Register(0x24)]
#       mem[t3] <- t4584 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
06 2c 24 
# goto lcd_putc_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# 82324 JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
70 dd 22 08 
# :lcd_putc_while_end_5 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# 82328 JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
70 85 23 08 
# :lcd_putc_if_else_0_2 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# lcd_putc_if_else_0_2
# t5 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 8232c LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t5 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 24 08 10 0f 00 
# t5dda <- mem[t5] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 82332 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t5] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 24 2c 
# tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# 82335 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
20 24 00 00 00 00 
# 8233b Copy8 [Register(0x2c), Register(0x24)]
#       tad4e U32 <- t5dda U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
0b 2c 24 
# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# 8233e AddImm32IgnoreCarry [Register(0x24), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
32 24 0c 10 0f 00 
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# mem[t164d] <- tdcd9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 82344 Store8 [Register(0x1d), Register(0x24)]
#       mem[t164d] <- tdcd9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 1d 24 
# t6 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 82347 LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t6 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
20 24 08 10 0f 00 
# t5dda <- mem[t6] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 8234d Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t6] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
05 24 2c 
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x1d), Register(0x1d)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 82350 Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 2c 00 
# 82353 Copy8 [Register(0x1d), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 1d 04 
# Registers used by this function: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 82356 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 
# 8235c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 66 23 08 00 
# 82362 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 ad 20 08 
# 82366 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 
# t7 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 8236c LoadImm32 [Register(0x20), Constant32(0x000f1008=987144)]
#       t7 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
20 20 08 10 0f 00 
# t8 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 82372 LoadImm32 [Register(0x24), Constant32(0x000f1008=987144)]
#       t8 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
20 24 08 10 0f 00 
# t5dda <- mem[t8] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 82378 Load8 [Register(0x24), Register(0x2c)]
#       t5dda <- mem[t8] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
05 24 2c 
# t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# 8237b LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
04 00 01 
# 8237e Add8NoCarryIn [Register(0x2c), Register(0x00), Register(0x2c)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
14 2c 00 2c 
# mem[t7] <- t4584 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 82382 Store8 [Register(0x2c), Register(0x20)]
#       mem[t7] <- t4584 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
06 2c 20 
# :lcd_putc_if_end_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(47,5))
# lcd_putc_if_end_0
# t9 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Ident("lcd_current")
# 82385 LoadImm32 [Register(0x20), Constant32(0x000f1008=987144)]
#       t9 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Ident("lcd_current")
20 20 08 10 0f 00 
# t5dda <- mem[t9] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Ident("lcd_current")
# 8238b Load8 [Register(0x20), Register(0x2c)]
#       t5dda <- mem[t9] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Ident("lcd_current")
05 20 2c 
# t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Number(U8, 80)
# 8238e LoadImm8 [Register(0x1d), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Number(U8, 80)
04 1d 50 
# if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# 82391 Cmp8 [Register(0x1d), Register(0x2c)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
15 1d 2c 
# 82394 JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
71 9c 23 08 
# 82398 JmpImm [Label24(lcd_putc_if_else_0_8)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
70 b6 23 08 
# :lcd_putc_if_true_0_7 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 8239c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 
# 823a2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c ac 23 08 00 
# 823a8 JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 bd 23 08 
# 823ac AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 
# goto lcd_putc_if_end_6 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# 823b2 JmpImm [Label24(lcd_putc_if_end_6)]
#       goto lcd_putc_if_end_6 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
70 b6 23 08 
# :lcd_putc_if_else_0_8 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# lcd_putc_if_else_0_8
# :lcd_putc_if_end_6 Some('/home/john/lutcomp/programs/lib/lcd.j':(59,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 823b6 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 823b8 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :lcd_scroll_up
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([46])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([47])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "lcd_current") Reg(U32) Some([48, 49, 50, 51])
# Var t1 (static "lcd_current") Reg(U32) Some([52, 53, 54, 55])
# Var t21b4 (t21b4 Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })) Reg(U8) Some([46])
# Var t2aa3 (t2aa3 Number(U8, 60)) Reg(U8) Some([46])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([47])
# Var t763a (t763a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7e9 (t7e9 Arithmetic(Add, Ident("i"), Number(U8, 20))) Reg(U8) Some([46])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([46])
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([56, 57, 58, 59])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([56, 57, 58, 59])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([46])
# Var tb02d (tb02d Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })) Reg(U8) Some([46])
# Var tb175 (tb175 Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([47])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([47])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([46])
# Var tfd7d (tfd7d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) Reg(U32) Some([48, 49, 50, 51])
# t0 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# 823bd LoadImm32 [Register(0x30), Constant32(0x000f1008=987144)]
#       t0 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
20 30 08 10 0f 00 
# t1 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 823c3 LoadImm32 [Register(0x34), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
20 34 08 10 0f 00 
# t5dda <- mem[t1] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 823c9 Load8 [Register(0x34), Register(0x2f)]
#       t5dda <- mem[t1] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
05 34 2f 
# tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# 823cc LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
04 00 ec 
# 823cf Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2f)]
#       tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
14 2f 00 2f 
# mem[t0] <- tb175 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# 823d3 Store8 [Register(0x2f), Register(0x30)]
#       mem[t0] <- tb175 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
06 2f 30 
# i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 823d6 LoadImm8 [Register(0x2f), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 2f 00 
# :lcd_scroll_up_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t2aa3 <- 0n60/0x3cu8  Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# Number(U8, 60)
# 823d9 LoadImm8 [Register(0x2e), Constant8(0x3c=60)]
#       t2aa3 <- 0n60/0x3cu8  Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
#       Number(U8, 60)
04 2e 3c 
# if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# 823dc Cmp8 [Register(0x2e), Register(0x2f)]
#       if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
15 2e 2f 
# 823df JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
71 35 24 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# Arithmetic(Add, Ident("i"), Number(U8, 20))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }\nArithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 20))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# Arithmetic(Add, Ident("i"), Number(U8, 20))
# 823e3 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 20))
04 00 14 
# 823e6 Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2e)]
#       t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 20))
14 2f 00 2e 
# tfd7d U32 <- t7e9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# 823ea LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for tfd7d U32 <- t7e9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
20 30 00 00 00 00 
# 823f0 Copy8 [Register(0x2e), Register(0x30)]
#       tfd7d U32 <- t7e9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
0b 2e 30 
# t763a <- tfd7d Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# 823f3 AddImm32IgnoreCarry [Register(0x30), Constant32(0x000f100c=987148)]
#       t763a <- tfd7d Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
32 30 0c 10 0f 00 
# ch <- mem[t763a] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# 823f9 Load8 [Register(0x30), Register(0x2e)]
#       ch <- mem[t763a] U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
05 30 2e 
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 823fc LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 38 00 00 00 00 
# 82402 Copy8 [Register(0x2f), Register(0x38)]
#       t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 2f 38 
# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 82405 AddImm32IgnoreCarry [Register(0x38), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 38 0c 10 0f 00 
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x2e), Register(0x2e)], resolved: None }
# mem[t9e70] <- tdcd9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 8240b Store8 [Register(0x2e), Register(0x38)]
#       mem[t9e70] <- tdcd9 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 2e 38 
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x2e), Register(0x2e)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 8240e Copy8 [Register(0x2f), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 2f 00 
# 82411 Copy8 [Register(0x2e), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 2e 04 
# Registers used by this function: {46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 82414 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 
# 8241a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 24 24 08 00 
# 82420 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 ad 20 08 
# 82424 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 8242a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 
# 8242d Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2f)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 2f 00 2f 
# goto lcd_scroll_up_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# 82431 JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
70 d9 23 08 
# :lcd_scroll_up_while_end_2 Some('/home/john/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_predicate_3
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Number(U8, 80)
# 82435 LoadImm8 [Register(0x2e), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
#       Number(U8, 80)
04 2e 50 
# if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# 82438 Cmp8 [Register(0x2e), Register(0x2f)]
#       if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
15 2e 2f 
# 8243b JcImm [Label24(lcd_scroll_up_while_end_5)]
#       if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
71 7e 24 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_4' else 'lcd_scroll_up_while_end_5' Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_4)], resolved: None }
# :lcd_scroll_up_while_body_4 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_body_4
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 8243f LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 38 00 00 00 00 
# 82445 Copy8 [Register(0x2f), Register(0x38)]
#       t9725 U32 <- td0f3 U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 2f 38 
# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 82448 AddImm32IgnoreCarry [Register(0x38), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987148), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 38 0c 10 0f 00 
# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 8244e LoadImm8 [Register(0x2e), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 2e 20 
# mem[t9e70] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# 82451 Store8 [Register(0x2e), Register(0x38)]
#       mem[t9e70] <- tac5f U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
06 2e 38 
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# Number(U8, 32)
# 82454 LoadImm8 [Register(0x2e), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
#       Number(U8, 32)
04 2e 20 
# None <= call lcd_draw_char(td0f3,tac5f,) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# 82457 Copy8 [Register(0x2f), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tac5f,) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
0b 2f 00 
# 8245a Copy8 [Register(0x2e), Register(0x04)]
#       Arg1[ch]=tac5f None <= call lcd_draw_char(td0f3,tac5f,) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
0b 2e 04 
# Registers used by this function: {46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}
# Registers used by callee tree: {164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 8245d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 
# 82463 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 6d 24 08 00 
# 82469 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 ad 20 08 
# 8246d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 
# td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x2f), Register(0x2f)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 82473 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 
# 82476 Add8NoCarryIn [Register(0x2f), Register(0x00), Register(0x2f)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 2f 00 2f 
# goto lcd_scroll_up_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# 8247a JmpImm [Label24(lcd_scroll_up_while_predicate_3)]
#       goto lcd_scroll_up_while_predicate_3 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
70 35 24 08 
# :lcd_scroll_up_while_end_5 Some('/home/john/lutcomp/programs/lib/lcd.j':(39,5))
# lcd_scroll_up_while_end_5
# return None None
# Return { value: None }
# 8247e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 82480 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :main
# Ret Some(U8)
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var calc (Local calc Struct("RpnCalc") Static(987500)) Static(987500) None
# Var inline_main_RpnCalc_init_51_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_RpnCalc_init_51_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_main_RpnCalc_init_51_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_RpnCalc_init_51_s (Local s Ptr(Struct("Stack")) Reg(U32)) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_51_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_51_tb2e9 (tb2e9 Ident("s")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_main_RpnCalc_init_51_tbc15 (tbc15 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_main_RpnCalc_init_51_tf462 (tf462 Call(Call { function: "stack_init", parameters: [Ident("s")] })) Reg(U8) Some([72])
# Var inline_main_putc_25_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_25_c (Arg0 c Number(U8)) Reg(U8) Some([72])
# Var inline_main_putc_25_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_25_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_25_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([72])
# Var inline_main_putc_26_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_26_c (Arg0 c Number(U8)) Reg(U8) Some([72])
# Var inline_main_putc_26_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_26_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_26_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([72])
# Var inline_main_putc_27_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_27_c (Arg0 c Number(U8)) Reg(U8) Some([72])
# Var inline_main_putc_27_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_27_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_27_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([72])
# Var inline_main_putc_28_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_main_putc_28_c (Arg0 c Number(U8)) Reg(U8) Some([72])
# Var inline_main_putc_28_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_main_putc_28_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_28_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([72])
# Var inline_main_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([72])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "calc") Reg(U32) Some([60, 61, 62, 63])
# Var t1 (static "calc") Reg(U32) Some([60, 61, 62, 63])
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([72])
# Var t71d9 (t71d9 Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([72])
# Var t7ddc (t7ddc Call(Call { function: "putc", parameters: [Number(U8, 78)] })) Reg(U8) Some([72])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([72])
# Var t9c38 (t9c38 Number(U8, 82)) Reg(U8) Some([72])
# Var tb303 (tb303 Call(Call { function: "putc", parameters: [Number(U8, 82)] })) Reg(U8) Some([72])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([60, 61, 62, 63])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([72])
# Var tdcaa (tdcaa Call(Call { function: "stdio_init", parameters: [] })) Reg(U8) Some([72])
# Var te6fd (te6fd Number(U8, 78)) Reg(U8) Some([72])
# Var te7a4 (te7a4 Call(Call { function: "putc", parameters: [Number(U8, 80)] })) Reg(U8) Some([72])
# Var tec99 (tec99 Call(Call { function: "putc", parameters: [Number(U8, 10)] })) Reg(U8) Some([72])
# None <= call stdio_init() Some('programs/app/rpn.j':(4,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 164, 165, 166, 167, 168, 169, 170, 171, 172, 176, 177, 178, 179, 180, 230, 252}
# Registers to save: []
# 82485 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 
# 8248b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c 95 24 08 00 
# 82491 JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 af 2c 08 
# 82495 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 
# t9c38 <- 0n82/0x52u8  Some('programs/app/rpn.j':(6,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# Number(U8, 82)
# 8249b LoadImm8 [Register(0x48), Constant8(0x52=82)]
#       t9c38 <- 0n82/0x52u8  Some('programs/app/rpn.j':(6,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 82)] })
#       Number(U8, 82)
04 48 52 
# inline_main_putc_25_c <- t9c38 U8 Some('programs/app/rpn.j':(6,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 82)] })
# optimized away noop copy Instruction { source: "inline_main_putc_25_c <- t9c38 U8 Some('programs/app/rpn.j':(6,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 82)] })\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_putc_25_tac13 <- inline_main_putc_25_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_25_tac13 <- inline_main_putc_25_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call io_write0(inline_main_putc_25_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8249e Out0 [Register(0x48)]
#       IoWrite0
68 48 
# inline_main_putc_25_tac13 <- inline_main_putc_25_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_25_tac13 <- inline_main_putc_25_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 824a0 Copy8 [Register(0x48), Register(0x00)]
#       Arg0[ch]=inline_main_putc_25_tac13 None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 48 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 824a3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 824a9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c b3 24 08 00 
# 824af JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 824b3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_main_putc_25_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_25_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_function_end_putc)], resolved: None }
# :inline_main_putc_25_function_end_putc None
# inline_main_putc_25_function_end_putc
# t8fe0 <- 0n80/0x50u8  Some('programs/app/rpn.j':(10,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 80)] })
# Number(U8, 80)
# 824b9 LoadImm8 [Register(0x48), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('programs/app/rpn.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 80)] })
#       Number(U8, 80)
04 48 50 
# inline_main_putc_26_c <- t8fe0 U8 Some('programs/app/rpn.j':(10,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 80)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 80)] })
# optimized away noop copy Instruction { source: "inline_main_putc_26_c <- t8fe0 U8 Some('programs/app/rpn.j':(10,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 80)] })\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_putc_26_tac13 <- inline_main_putc_26_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_26_tac13 <- inline_main_putc_26_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call io_write0(inline_main_putc_26_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 824bc Out0 [Register(0x48)]
#       IoWrite0
68 48 
# inline_main_putc_26_tac13 <- inline_main_putc_26_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_26_tac13 <- inline_main_putc_26_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 824be Copy8 [Register(0x48), Register(0x00)]
#       Arg0[ch]=inline_main_putc_26_tac13 None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 48 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 824c1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 824c7 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c d1 24 08 00 
# 824cd JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 824d1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_main_putc_26_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_26_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_function_end_putc)], resolved: None }
# :inline_main_putc_26_function_end_putc None
# inline_main_putc_26_function_end_putc
# t0 <- 0n987500/0x000f116cu32  Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# 824d7 LoadImm32 [Register(0x3c), Constant32(0x000f116c=987500)]
#       t0 <- 0n987500/0x000f116cu32  Some('programs/app/rpn.j':(12,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
20 3c 6c 11 0f 00 
# tca8 <- t0 U32 Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# optimized away noop copy Instruction { source: "tca8 <- t0 U32 Some('programs/app/rpn.j':(12,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })\nAddressOf(Ident(\"calc\"))\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_51_c <- tca8 U32 Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_c <- tca8 U32 Some('programs/app/rpn.j':(12,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_51_tbc15 <- inline_main_RpnCalc_init_51_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct("Stack")), value: Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_tbc15 <- inline_main_RpnCalc_init_51_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))\nAssign { target: Ident(\"s\"), var_type: Some(Ptr(Struct(\"Stack\"))), value: AddressOf(PtrFieldDeref(\"c\", \"stack\")) }\nAddressOf(PtrFieldDeref(\"c\", \"stack\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Struct(\"Stack\")), value: Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_51_s <- inline_main_RpnCalc_init_51_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
# Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
# AddressOf(PtrFieldDeref("c", "stack"))
# 824dd Copy32 [Register(0x3c), Register(0x40)]
#       inline_main_RpnCalc_init_51_s <- inline_main_RpnCalc_init_51_tbc15 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(14,5))
#       Assign { target: Ident("s"), var_type: Some(Ptr(Struct("Stack"))), value: AddressOf(PtrFieldDeref("c", "stack")) }
#       AddressOf(PtrFieldDeref("c", "stack"))
21 3c 40 
# inline_main_RpnCalc_init_51_tb2e9 <- inline_main_RpnCalc_init_51_s U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_tb2e9 <- inline_main_RpnCalc_init_51_s U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_tb2e9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_tb2e9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 824e0 Copy32 [Register(0x40), Register(0x44)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 44 
# 824e3 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000040=64)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t4bb9 Add Number(0n64/0x00000040u32) Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 44 40 00 00 00 
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 824e9 LoadImm32 [Register(0x40), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 40 00 00 00 00 
# mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# 824ef Store32_1 [Register(0x40), Register(0x44)]
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
23 40 44 
# 824f2 Store32_2 []
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/home/john/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
24 
# goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_main_RpnCalc_init_51_tb1ed <- inline_main_RpnCalc_init_51_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_RpnCalc_init_51_tb1ed <- inline_main_RpnCalc_init_51_c U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 824f3 Copy32 [Register(0x3c), Register(0x40)]
#       inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 3c 40 
# 824f6 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_tb1ed Add Number(0n68/0x00000044u32) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 
# inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 824fc LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 
# mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 82502 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 
# 82505 Store32_2 []
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 
# goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_function_end_RpnCalc_init)], resolved: None }
# :inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# te6fd <- 0n78/0x4eu8  Some('programs/app/rpn.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 78)] })
# Number(U8, 78)
# 82506 LoadImm8 [Register(0x48), Constant8(0x4e=78)]
#       te6fd <- 0n78/0x4eu8  Some('programs/app/rpn.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 78)] })
#       Number(U8, 78)
04 48 4e 
# inline_main_putc_27_c <- te6fd U8 Some('programs/app/rpn.j':(14,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 78)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 78)] })
# optimized away noop copy Instruction { source: "inline_main_putc_27_c <- te6fd U8 Some('programs/app/rpn.j':(14,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 78)] })\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_putc_27_tac13 <- inline_main_putc_27_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_27_tac13 <- inline_main_putc_27_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call io_write0(inline_main_putc_27_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82509 Out0 [Register(0x48)]
#       IoWrite0
68 48 
# inline_main_putc_27_tac13 <- inline_main_putc_27_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_27_tac13 <- inline_main_putc_27_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8250b Copy8 [Register(0x48), Register(0x00)]
#       Arg0[ch]=inline_main_putc_27_tac13 None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 48 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 8250e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 82514 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 1e 25 08 00 
# 8251a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 8251e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_main_putc_27_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_27_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_function_end_putc)], resolved: None }
# :inline_main_putc_27_function_end_putc None
# inline_main_putc_27_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('programs/app/rpn.j':(15,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 82524 LoadImm8 [Register(0x48), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('programs/app/rpn.j':(15,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 48 0a 
# inline_main_putc_28_c <- td7b5 U8 Some('programs/app/rpn.j':(15,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# optimized away noop copy Instruction { source: "inline_main_putc_28_c <- td7b5 U8 Some('programs/app/rpn.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }\nCall(Call { function: \"putc\", parameters: [Number(U8, 10)] })\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_main_putc_28_tac13 <- inline_main_putc_28_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_28_tac13 <- inline_main_putc_28_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call io_write0(inline_main_putc_28_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82527 Out0 [Register(0x48)]
#       IoWrite0
68 48 
# inline_main_putc_28_tac13 <- inline_main_putc_28_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_main_putc_28_tac13 <- inline_main_putc_28_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x48), Register(0x48)], resolved: None }
# None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82529 Copy8 [Register(0x48), Register(0x00)]
#       Arg0[ch]=inline_main_putc_28_tac13 None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 48 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: []
# 8252c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 82532 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 3c 25 08 00 
# 82538 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 8253c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# goto inline_main_putc_28_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_28_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_function_end_putc)], resolved: None }
# :inline_main_putc_28_function_end_putc None
# inline_main_putc_28_function_end_putc
# t1 <- 0n987500/0x000f116cu32  Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# 82542 LoadImm32 [Register(0x3c), Constant32(0x000f116c=987500)]
#       t1 <- 0n987500/0x000f116cu32  Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
20 3c 6c 11 0f 00 
# tca8 <- t1 U32 Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# optimized away noop copy Instruction { source: "tca8 <- t1 U32 Some('programs/app/rpn.j':(17,5))\nReturn { value: Some(Call(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })) }\nCall(Call { function: \"RpnCalc_run\", parameters: [AddressOf(Ident(\"calc\"))] })\nAddressOf(Ident(\"calc\"))\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# 82548 Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
21 3c 00 
# Registers used by this function: {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72]
# 8254b Push8 [Register(0x48)]
#       Saving reg0x48 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 48 
# 8254d Push8 [Register(0x47)]
#       Saving reg0x47 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 47 
# 8254f Push8 [Register(0x46)]
#       Saving reg0x46 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 46 
# 82551 Push8 [Register(0x45)]
#       Saving reg0x45 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 45 
# 82553 Push8 [Register(0x44)]
#       Saving reg0x44 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 44 
# 82555 Push8 [Register(0x43)]
#       Saving reg0x43 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 43 
# 82557 Push8 [Register(0x42)]
#       Saving reg0x42 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 42 
# 82559 Push8 [Register(0x41)]
#       Saving reg0x41 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 41 
# 8255b Push8 [Register(0x40)]
#       Saving reg0x40 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 40 
# 8255d Push8 [Register(0x3f)]
#       Saving reg0x3f before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3f 
# 8255f Push8 [Register(0x3e)]
#       Saving reg0x3e before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3e 
# 82561 Push8 [Register(0x3d)]
#       Saving reg0x3d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3d 
# 82563 Push8 [Register(0x3c)]
#       Saving reg0x3c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 3c 
# 82565 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c fc ff ff ff 
# 8256b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_run))
25 0c 75 25 08 00 
# 82571 JmpImm [Label24(:RpnCalc_run)]
#       PseudoCall(Label24(:RpnCalc_run))
70 13 19 08 
# 82575 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c 04 00 00 00 
# 8257b Pop8 [Register(0x3c)]
#       Restoring reg0x3c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3c 
# 8257d Pop8 [Register(0x3d)]
#       Restoring reg0x3d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3d 
# 8257f Pop8 [Register(0x3e)]
#       Restoring reg0x3e after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3e 
# 82581 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 3f 
# 82583 Pop8 [Register(0x40)]
#       Restoring reg0x40 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 40 
# 82585 Pop8 [Register(0x41)]
#       Restoring reg0x41 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 41 
# 82587 Pop8 [Register(0x42)]
#       Restoring reg0x42 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 42 
# 82589 Pop8 [Register(0x43)]
#       Restoring reg0x43 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 43 
# 8258b Pop8 [Register(0x44)]
#       Restoring reg0x44 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 44 
# 8258d Pop8 [Register(0x45)]
#       Restoring reg0x45 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 45 
# 8258f Pop8 [Register(0x46)]
#       Restoring reg0x46 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 46 
# 82591 Pop8 [Register(0x47)]
#       Restoring reg0x47 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 47 
# 82593 Pop8 [Register(0x48)]
#       Restoring reg0x48 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 48 
# 82595 Copy8 [Register(0x00), Register(0x48)]
#       Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0b 00 48 
# return Some(t2a99) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# 82598 Copy8 [Register(0x48), Register(0x00)]
#       return Some(t2a99) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
0b 48 00 
# 8259b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_main None
# function_end_main
# Unreachable None
# 8259d Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_0_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_0_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_0_t24ae (t24ae Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_0_t3203 (t3203 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_add_U64_0_teec0 (teec0 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_1_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t24ae (t24ae Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_1_t3203 (t3203 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_add_U64_1_teec0 (teec0 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_10_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(USIZE)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_10_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_10_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_10_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([118])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_10_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_10_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([119])
# Var inline_mul32_64_mul16_32_10_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_10_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_10_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_11_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(USIZE)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_11_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_11_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_11_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_11_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([121])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([116])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_11_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_11_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_11_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([120])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_11_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([121])
# Var inline_mul32_64_mul16_32_11_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([88, 89, 90, 91])
# Var inline_mul32_64_mul16_32_11_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(USIZE)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(USIZE)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_8_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_8_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_8_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_8_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([123])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_8_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_8_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([124])
# Var inline_mul32_64_mul16_32_8_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_8_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([123])
# Var inline_mul32_64_mul16_32_8_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_8_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([112, 113, 114, 115])
# Var inline_mul32_64_mul16_32_9_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(USIZE)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(USIZE)) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_9_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_mul32_64_mul16_32_9_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_9_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_9_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([123])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([117])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([104, 105, 106, 107])
# Var inline_mul32_64_mul16_32_9_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([100, 101, 102, 103])
# Var inline_mul32_64_mul16_32_9_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([124])
# Var inline_mul32_64_mul16_32_9_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([122])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_9_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([123])
# Var inline_mul32_64_mul16_32_9_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([108, 109, 110, 111])
# Var inline_mul32_64_mul16_32_9_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([112, 113, 114, 115])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (Stack size negated) Reg(U32) Some([128, 129, 130, 131])
# Var t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([132, 133, 134, 135])
# Var t1f52 (t1f52 Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })) Reg(U8) Some([136])
# Var t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([92, 93, 94, 95])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([80, 81, 82, 83])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([80, 81, 82, 83])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([84, 85, 86, 87])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([80, 81, 82, 83])
# Var t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([120])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([96, 97, 98, 99])
# Var t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([120])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([88, 89, 90, 91])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([96, 97, 98, 99])
# Var t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([118])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([76, 77, 78, 79])
# Var t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([92, 93, 94, 95])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([80, 81, 82, 83])
# Var t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([118])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([84, 85, 86, 87])
# Var tb6b4 (tb6b4 Index("temp", Number(U8, 3))) Reg(U8) Some([116])
# Var tc89e (tc89e Index("temp", Number(U8, 0))) Reg(U8) Some([116])
# Var tdc08 (tdc08 Index("temp", Number(U8, 1))) Reg(U8) Some([116])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([128, 129, 130, 131])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([128, 129, 130, 131])
# Var temp (Local temp Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var temp64 (Local temp64 Struct("U64") FrameOffset(0)) FrameOffset(0) None
# Var temp_hi (Local temp_hi Number(USIZE) Reg(U32)) Reg(U32) Some([132, 133, 134, 135])
# Var temp_lo (Local temp_lo Number(USIZE) Reg(U32)) Reg(U32) Some([140, 141, 142, 143])
# Var tf338 (tf338 Index("temp", Number(U8, 2))) Reg(U8) Some([116])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([84, 85, 86, 87])
# 825a2 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 
# 825a8 Copy32 [Register(0x00), Register(0x4c)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [76, 77, 78, 79].
21 00 4c 
# 825ab Copy32 [Register(0x04), Register(0x54)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [84, 85, 86, 87].
21 04 54 
# 825ae Copy32 [Register(0x08), Register(0x5c)]
#       Save function parameter 'c' registers [8, 9, 10, 11] to locals [92, 93, 94, 95].
21 08 5c 
# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 825b1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 
# a_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(58,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 825b7 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       a_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(58,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 50 00 00 00 00 
# t5b7c <- a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# Index("a", Number(U8, 3))
# 825bd Copy8 [Register(0x4f), Register(0x78)]
#       t5b7c <- a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
#       Index("a", Number(U8, 3))
0b 4f 78 
# a_hi[0x01..0x02] <- t5b7c U8 Some('/home/john/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# 825c0 Copy8 [Register(0x78), Register(0x51)]
#       a_hi[0x01..0x02] <- t5b7c U8 Some('/home/john/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
0b 78 51 
# t577f <- a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# Index("a", Number(U8, 2))
# 825c3 Copy8 [Register(0x4e), Register(0x78)]
#       t577f <- a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
#       Index("a", Number(U8, 2))
0b 4e 78 
# a_hi[0x00..0x01] <- t577f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# 825c6 Copy8 [Register(0x78), Register(0x50)]
#       a_hi[0x00..0x01] <- t577f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
0b 78 50 
# b_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(62,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 825c9 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       b_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(62,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 58 00 00 00 00 
# t9829 <- b[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# Index("b", Number(U8, 3))
# 825cf Copy8 [Register(0x57), Register(0x76)]
#       t9829 <- b[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
#       Index("b", Number(U8, 3))
0b 57 76 
# b_hi[0x01..0x02] <- t9829 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# 825d2 Copy8 [Register(0x76), Register(0x59)]
#       b_hi[0x01..0x02] <- t9829 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
0b 76 59 
# t811a <- b[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# Index("b", Number(U8, 2))
# 825d5 Copy8 [Register(0x56), Register(0x76)]
#       t811a <- b[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
#       Index("b", Number(U8, 2))
0b 56 76 
# b_hi[0x00..0x01] <- t811a U8 Some('/home/john/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# 825d8 Copy8 [Register(0x76), Register(0x58)]
#       b_hi[0x00..0x01] <- t811a U8 Some('/home/john/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
0b 76 58 
# t8956 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "t8956 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 825db Copy32 [Register(0x4c), Register(0x60)]
#       inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 4c 60 
# inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 825de Copy32 [Register(0x54), Register(0x64)]
#       inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 54 64 
# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 825e1 Mul8_16 [Register(0x60), Register(0x64), Register(0x68)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 60 64 68 
# 825e5 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 6a 00 
# 825e8 LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 6b 00 
# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 825eb Copy8 [Register(0x61), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 61 7a 
# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 825ee LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 70 00 00 00 00 
# 825f4 Copy8 [Register(0x7a), Register(0x70)]
#       inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 7a 70 
# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 825f7 Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 75 
# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 825fa LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 6c 00 00 00 00 
# 82600 Copy8 [Register(0x75), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 75 6c 
# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 82603 Mul8_16 [Register(0x70), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 70 6c 6c 
# 82607 LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6e 00 
# 8260a LoadImm8 [Register(0x6f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6f 00 
# inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 8260d Copy8 [Register(0x6d), Register(0x7b)]
#       inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 6d 7b 
# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 82610 Copy8 [Register(0x7b), Register(0x6f)]
#       inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 7b 6f 
# inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 82613 Copy8 [Register(0x6c), Register(0x7b)]
#       inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 6c 7b 
# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 82616 Copy8 [Register(0x7b), Register(0x6e)]
#       inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 7b 6e 
# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82619 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 
# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 8261c Copy8 [Register(0x7c), Register(0x6d)]
#       inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 7c 6d 
# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8261f LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 
# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 82622 Copy8 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7c 6c 
# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 82625 ClearCarry []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 
# 82626 AddCarry32_1 [Register(0x68), Register(0x6c), Register(0x68)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 68 6c 68 
# 8262a AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 
# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 8262b Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 75 
# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 8262e LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 6c 00 00 00 00 
# 82634 Copy8 [Register(0x75), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 75 6c 
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 82637 Mul8_16 [Register(0x60), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 60 6c 6c 
# 8263b LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6e 00 
# 8263e LoadImm8 [Register(0x6f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6f 00 
# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 82641 Copy8 [Register(0x61), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 61 7a 
# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 82644 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 70 00 00 00 00 
# 8264a Copy8 [Register(0x7a), Register(0x70)]
#       inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 7a 70 
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 8264d Mul8_16 [Register(0x70), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 70 64 60 
# 82651 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 62 00 
# 82654 LoadImm8 [Register(0x63), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 63 00 
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 82657 Copy32 [Register(0x6c), Register(0x64)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 6c 64 
# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 8265a ClearCarry []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 
# 8265b AddCarry32_1 [Register(0x64), Register(0x60), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 64 60 6c 
# 8265f AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 
# inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 82660 Copy8 [Register(0x6e), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 6e 7a 
# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 82663 Copy8 [Register(0x7a), Register(0x6f)]
#       inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 7a 6f 
# inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 82666 Copy8 [Register(0x6d), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 6d 7a 
# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 82669 Copy8 [Register(0x7a), Register(0x6e)]
#       inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 7a 6e 
# inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 8266c Copy8 [Register(0x6c), Register(0x7a)]
#       inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 6c 7a 
# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 8266f Copy8 [Register(0x7a), Register(0x6d)]
#       inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 7a 6d 
# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82672 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 
# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 82675 Copy8 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7c 6c 
# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 82678 Copy32 [Register(0x6c), Register(0x64)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 6c 64 
# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8267b ClearCarry []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 
# 8267c AddCarry32_1 [Register(0x68), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 68 64 60 
# 82680 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 
# t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_8_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_8_function_end_mul16_32 None
# inline_mul32_64_mul16_32_8_function_end_mul16_32
# mem[t8956] <- t720d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# 82681 Store32_1 [Register(0x60), Register(0x5c)]
#       mem[t8956] <- t720d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
23 60 5c 
# 82684 Store32_2 []
#       mem[t8956] <- t720d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
24 
# t2558 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "t2558 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# t1335 <- t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 82685 Copy32 [Register(0x5c), Register(0x84)]
#       t1335 <- t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 5c 84 
# 82688 AddImm32IgnoreCarry [Register(0x84), Constant32(0x00000004=4)]
#       t1335 <- t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 84 04 00 00 00 
# t8fbd <- a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# t5cca <- b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 8268e Copy32 [Register(0x50), Register(0x60)]
#       inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 50 60 
# inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 82691 Copy32 [Register(0x58), Register(0x64)]
#       inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 58 64 
# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 82694 Mul8_16 [Register(0x60), Register(0x64), Register(0x68)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 60 64 68 
# 82698 LoadImm8 [Register(0x6a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 6a 00 
# 8269b LoadImm8 [Register(0x6b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 6b 00 
# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 8269e Copy8 [Register(0x61), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 61 7a 
# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 826a1 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 70 00 00 00 00 
# 826a7 Copy8 [Register(0x7a), Register(0x70)]
#       inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 7a 70 
# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 826aa Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 75 
# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 826ad LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 6c 00 00 00 00 
# 826b3 Copy8 [Register(0x75), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 75 6c 
# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 826b6 Mul8_16 [Register(0x70), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 70 6c 6c 
# 826ba LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6e 00 
# 826bd LoadImm8 [Register(0x6f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6f 00 
# inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 826c0 Copy8 [Register(0x6d), Register(0x7b)]
#       inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 6d 7b 
# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 826c3 Copy8 [Register(0x7b), Register(0x6f)]
#       inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 7b 6f 
# inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 826c6 Copy8 [Register(0x6c), Register(0x7b)]
#       inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 6c 7b 
# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 826c9 Copy8 [Register(0x7b), Register(0x6e)]
#       inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 7b 6e 
# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 826cc LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 
# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 826cf Copy8 [Register(0x7c), Register(0x6d)]
#       inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 7c 6d 
# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 826d2 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 
# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 826d5 Copy8 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7c 6c 
# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x6c), Register(0x6c)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 826d8 ClearCarry []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 
# 826d9 AddCarry32_1 [Register(0x68), Register(0x6c), Register(0x68)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 68 6c 68 
# 826dd AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 
# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 826de Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 65 75 
# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 826e1 LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 6c 00 00 00 00 
# 826e7 Copy8 [Register(0x75), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 75 6c 
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 826ea Mul8_16 [Register(0x60), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 60 6c 6c 
# 826ee LoadImm8 [Register(0x6e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6e 00 
# 826f1 LoadImm8 [Register(0x6f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 6f 00 
# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 826f4 Copy8 [Register(0x61), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 61 7a 
# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 826f7 LoadImm32 [Register(0x70), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 70 00 00 00 00 
# 826fd Copy8 [Register(0x7a), Register(0x70)]
#       inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 7a 70 
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 82700 Mul8_16 [Register(0x70), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 70 64 60 
# 82704 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 62 00 
# 82707 LoadImm8 [Register(0x63), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 63 00 
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 8270a Copy32 [Register(0x6c), Register(0x64)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 6c 64 
# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 8270d ClearCarry []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 
# 8270e AddCarry32_1 [Register(0x64), Register(0x60), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 64 60 6c 
# 82712 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 
# inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 82713 Copy8 [Register(0x6e), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 6e 7a 
# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 82716 Copy8 [Register(0x7a), Register(0x6f)]
#       inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 7a 6f 
# inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 82719 Copy8 [Register(0x6d), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 6d 7a 
# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 8271c Copy8 [Register(0x7a), Register(0x6e)]
#       inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 7a 6e 
# inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 8271f Copy8 [Register(0x6c), Register(0x7a)]
#       inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 6c 7a 
# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 82722 Copy8 [Register(0x7a), Register(0x6d)]
#       inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 7a 6d 
# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82725 LoadImm8 [Register(0x7c), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7c 00 
# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 82728 Copy8 [Register(0x7c), Register(0x6c)]
#       inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7c 6c 
# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x68), Register(0x68)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8272b Copy32 [Register(0x6c), Register(0x64)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 6c 64 
# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8272e ClearCarry []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 
# 8272f AddCarry32_1 [Register(0x68), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 68 64 60 
# 82733 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 
# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_9_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_9_function_end_mul16_32 None
# inline_mul32_64_mul16_32_9_function_end_mul16_32
# mem[t1335] <- t5a04 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# 82734 Store32_1 [Register(0x60), Register(0x84)]
#       mem[t1335] <- t5a04 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
23 60 84 
# 82737 Store32_2 []
#       mem[t1335] <- t5a04 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
24 
# temp_lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(71,5))
# Assign { target: Ident("temp_lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 82738 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       temp_lo <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(71,5))
#       Assign { target: Ident("temp_lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 8c 00 00 00 00 
# temp_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(72,5))
# Assign { target: Ident("temp_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 8273e LoadImm32 [Register(0x84), Constant32(0x00000000=0)]
#       temp_hi <- 0n0/0x00000000u32  Some('/home/john/lutcomp/programs/lib/mul.j':(72,5))
#       Assign { target: Ident("temp_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 84 00 00 00 00 
# t8fbd <- a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 82744 Mul8_16 [Register(0x50), Register(0x54), Register(0x60)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 50 54 60 
# 82748 LoadImm8 [Register(0x62), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 62 00 
# 8274b LoadImm8 [Register(0x63), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 63 00 
# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 8274e Copy8 [Register(0x51), Register(0x74)]
#       inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 51 74 
# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 82751 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 68 00 00 00 00 
# 82757 Copy8 [Register(0x74), Register(0x68)]
#       inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 74 68 
# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 8275a Copy8 [Register(0x55), Register(0x76)]
#       inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 55 76 
# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 8275d LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 64 00 00 00 00 
# 82763 Copy8 [Register(0x76), Register(0x64)]
#       inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 76 64 
# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 82766 Mul8_16 [Register(0x68), Register(0x64), Register(0x64)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 68 64 64 
# 8276a LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 66 00 
# 8276d LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 67 00 
# inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 82770 Copy8 [Register(0x65), Register(0x75)]
#       inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 65 75 
# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 82773 Copy8 [Register(0x75), Register(0x67)]
#       inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 75 67 
# inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 82776 Copy8 [Register(0x64), Register(0x75)]
#       inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 64 75 
# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 82779 Copy8 [Register(0x75), Register(0x66)]
#       inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 75 66 
# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8277c LoadImm8 [Register(0x77), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 77 00 
# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 8277f Copy8 [Register(0x77), Register(0x65)]
#       inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 77 65 
# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82782 LoadImm8 [Register(0x77), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 77 00 
# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 82785 Copy8 [Register(0x77), Register(0x64)]
#       inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 77 64 
# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x64), Register(0x64)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 82788 ClearCarry []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 
# 82789 AddCarry32_1 [Register(0x60), Register(0x64), Register(0x60)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 60 64 60 
# 8278d AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 8278e Copy8 [Register(0x55), Register(0x76)]
#       inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 55 76 
# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 82791 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 64 00 00 00 00 
# 82797 Copy8 [Register(0x76), Register(0x64)]
#       inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 76 64 
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 8279a Mul8_16 [Register(0x50), Register(0x64), Register(0x64)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 50 64 64 
# 8279e LoadImm8 [Register(0x66), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 66 00 
# 827a1 LoadImm8 [Register(0x67), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 67 00 
# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 827a4 Copy8 [Register(0x51), Register(0x74)]
#       inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 51 74 
# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 827a7 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 68 00 00 00 00 
# 827ad Copy8 [Register(0x74), Register(0x68)]
#       inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 74 68 
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 827b0 Mul8_16 [Register(0x68), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 68 54 50 
# 827b4 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 52 00 
# 827b7 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 53 00 
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 827ba Copy32 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 64 54 
# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 827bd ClearCarry []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 
# 827be AddCarry32_1 [Register(0x54), Register(0x50), Register(0x64)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 54 50 64 
# 827c2 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 
# inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 827c3 Copy8 [Register(0x66), Register(0x74)]
#       inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 66 74 
# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 827c6 Copy8 [Register(0x74), Register(0x67)]
#       inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 74 67 
# inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 827c9 Copy8 [Register(0x65), Register(0x74)]
#       inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 65 74 
# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 827cc Copy8 [Register(0x74), Register(0x66)]
#       inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 74 66 
# inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 827cf Copy8 [Register(0x64), Register(0x74)]
#       inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 64 74 
# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 827d2 Copy8 [Register(0x74), Register(0x65)]
#       inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 74 65 
# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 827d5 LoadImm8 [Register(0x77), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 77 00 
# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 827d8 Copy8 [Register(0x77), Register(0x64)]
#       inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 77 64 
# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 827db Copy32 [Register(0x64), Register(0x54)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 64 54 
# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 827de ClearCarry []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 
# 827df AddCarry32_1 [Register(0x60), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 60 54 50 
# 827e3 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 
# temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_10_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32 None
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# Index("temp", Number(U8, 0))
# 827e4 Copy8 [Register(0x50), Register(0x74)]
#       tc89e <- temp[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
#       Index("temp", Number(U8, 0))
0b 50 74 
# temp_lo[0x02..0x03] <- tc89e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# 827e7 Copy8 [Register(0x74), Register(0x8e)]
#       temp_lo[0x02..0x03] <- tc89e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
0b 74 8e 
# tdc08 <- temp[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# Index("temp", Number(U8, 1))
# 827ea Copy8 [Register(0x51), Register(0x74)]
#       tdc08 <- temp[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
#       Index("temp", Number(U8, 1))
0b 51 74 
# temp_lo[0x03..0x04] <- tdc08 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# 827ed Copy8 [Register(0x74), Register(0x8f)]
#       temp_lo[0x03..0x04] <- tdc08 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
0b 74 8f 
# tf338 <- temp[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# Index("temp", Number(U8, 2))
# 827f0 Copy8 [Register(0x52), Register(0x74)]
#       tf338 <- temp[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
#       Index("temp", Number(U8, 2))
0b 52 74 
# temp_hi[0x00..0x01] <- tf338 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# 827f3 Copy8 [Register(0x74), Register(0x84)]
#       temp_hi[0x00..0x01] <- tf338 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
0b 74 84 
# tb6b4 <- temp[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# Index("temp", Number(U8, 3))
# 827f6 Copy8 [Register(0x53), Register(0x74)]
#       tb6b4 <- temp[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
#       Index("temp", Number(U8, 3))
0b 53 74 
# temp_hi[0x01..0x02] <- tb6b4 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# 827f9 Copy8 [Register(0x74), Register(0x85)]
#       temp_hi[0x01..0x02] <- tb6b4 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
0b 74 85 
# te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 827fc Copy32 [Register(0x0c), Register(0x80)]
#       te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 80 
# t3308 <- temp_lo U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 827ff Copy32 [Register(0x8c), Register(0x50)]
#       t3308 <- temp_lo U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 8c 50 
# mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 82802 Store32_1 [Register(0x50), Register(0x80)]
#       mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 50 80 
# 82805 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 
# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 82806 Copy32 [Register(0x0c), Register(0x80)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c 80 
# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 82809 Copy32 [Register(0x80), Register(0x50)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 80 50 
# 8280c AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 50 04 00 00 00 
# t41f5 <- temp_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 82812 Copy32 [Register(0x84), Register(0x54)]
#       t41f5 <- temp_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 84 54 
# mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 82815 Store32_1 [Register(0x54), Register(0x50)]
#       mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 54 50 
# 82818 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 82819 Copy32 [Register(0x0c), Register(0x80)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c 80 
# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 8281c Copy32 [Register(0x80), Register(0x50)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 80 50 
# 8281f AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 50 00 00 00 00 
# tf4b2 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 82825 Copy32 [Register(0x50), Register(0x54)]
#       tf4b2 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 50 54 
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82828 Copy32 [Register(0x5c), Register(0x50)]
#       inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 5c 50 
# inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 8282b Copy32 [Register(0x5c), Register(0x60)]
#       inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 5c 60 
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 8282e Load32 [Register(0x50), Register(0x64)]
#       inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 50 64 
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 82831 Copy32 [Register(0x60), Register(0x68)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 60 68 
# 82834 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 68 04 00 00 00 
# inline_mul32_64_add_U64_0_t3203 <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t3203 <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"a\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# 8283a Copy32 [Register(0x50), Register(0x6c)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
21 50 6c 
# 8283d AddImm32IgnoreCarry [Register(0x6c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
32 6c 04 00 00 00 
# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 82843 Load32 [Register(0x6c), Register(0x70)]
#       inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 6c 70 
# inline_mul32_64_add_U64_0_teec0 <- inline_mul32_64_add_U64_0_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_teec0 <- inline_mul32_64_add_U64_0_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"b\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# 82846 Copy32 [Register(0x54), Register(0x6c)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
21 54 6c 
# 82849 AddImm32IgnoreCarry [Register(0x6c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
32 6c 04 00 00 00 
# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 8284f Load32 [Register(0x6c), Register(0x6c)]
#       inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 6c 6c 
# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 82852 ClearCarry []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 
# 82853 AddCarry32_1 [Register(0x70), Register(0x6c), Register(0x6c)]
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 70 6c 6c 
# 82857 AddCarry32_2 []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 
# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 82858 Store32_1 [Register(0x6c), Register(0x68)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 6c 68 
# 8285b Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 
# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 8285c Load32 [Register(0x50), Register(0x68)]
#       inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 50 68 
# inline_mul32_64_add_U64_0_t24ae <- inline_mul32_64_add_U64_0_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# 8285f Copy32 [Register(0x54), Register(0x50)]
#       inline_mul32_64_add_U64_0_t24ae <- inline_mul32_64_add_U64_0_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
#       Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
#       Ident("b")
21 54 50 
# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_t24ae] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 82862 Load32 [Register(0x50), Register(0x50)]
#       inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_t24ae] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 50 50 
# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 82865 ClearCarry []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 
# 82866 AddCarry32_1 [Register(0x68), Register(0x50), Register(0x50)]
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 68 50 50 
# 8286a AddCarry32_2 []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 
# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 8286b Store32_1 [Register(0x50), Register(0x60)]
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 50 60 
# 8286e Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 
# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 8286f Load32 [Register(0x60), Register(0x54)]
#       inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 60 54 
# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 82872 Copy32 [Register(0x64), Register(0x50)]
#       inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 64 50 
# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 82875 Cmp8 [Register(0x53), Register(0x57)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 53 57 
# 82878 Cmp8IfZero [Register(0x52), Register(0x56)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 52 56 
# 8287b Cmp8IfZero [Register(0x51), Register(0x55)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 51 55 
# 8287e Cmp8IfZero [Register(0x50), Register(0x54)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 50 54 
# 82881 JcImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 a8 28 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 82885 Copy32 [Register(0x60), Register(0x68)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 60 68 
# 82888 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 68 04 00 00 00 
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x60), Register(0x60)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 8288e Copy32 [Register(0x60), Register(0x68)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 60 68 
# 82891 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 68 04 00 00 00 
# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# 82897 Load32 [Register(0x68), Register(0x50)]
#       inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
22 68 50 
# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# 8289a AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
32 50 01 00 00 00 
# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# 828a0 Store32_1 [Register(0x50), Register(0x68)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
23 50 68 
# 828a3 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
24 
# goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# 828a4 JmpImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
70 a8 28 08 
# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# goto inline_mul32_64_add_U64_0_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_0_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_0_function_end_add_U64 None
# inline_mul32_64_add_U64_0_function_end_add_U64
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# t5cca <- b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# 828a8 Copy32 [Register(0x58), Register(0x50)]
#       inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/home/john/lutcomp/programs/lib/mul.j':(84,5))
#       Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
21 58 50 
# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 828ab Mul8_16 [Register(0x4c), Register(0x50), Register(0x54)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 4c 50 54 
# 828af LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 56 00 
# 828b2 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 57 00 
# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 828b5 Copy8 [Register(0x4d), Register(0x78)]
#       inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 4d 78 
# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 828b8 LoadImm32 [Register(0x60), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 60 00 00 00 00 
# 828be Copy8 [Register(0x78), Register(0x60)]
#       inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 78 60 
# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 828c1 Copy8 [Register(0x51), Register(0x74)]
#       inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 51 74 
# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 828c4 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 58 00 00 00 00 
# 828ca Copy8 [Register(0x74), Register(0x58)]
#       inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 74 58 
# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 828cd Mul8_16 [Register(0x60), Register(0x58), Register(0x58)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 60 58 58 
# 828d1 LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 5a 00 
# 828d4 LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 5b 00 
# inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 828d7 Copy8 [Register(0x59), Register(0x79)]
#       inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 59 79 
# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 828da Copy8 [Register(0x79), Register(0x5b)]
#       inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 79 5b 
# inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 828dd Copy8 [Register(0x58), Register(0x79)]
#       inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 58 79 
# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 828e0 Copy8 [Register(0x79), Register(0x5a)]
#       inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 79 5a 
# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 828e3 LoadImm8 [Register(0x7a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7a 00 
# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 828e6 Copy8 [Register(0x7a), Register(0x59)]
#       inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 7a 59 
# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 828e9 LoadImm8 [Register(0x7a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7a 00 
# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 828ec Copy8 [Register(0x7a), Register(0x58)]
#       inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7a 58 
# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x58), Register(0x58)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 828ef ClearCarry []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 
# 828f0 AddCarry32_1 [Register(0x54), Register(0x58), Register(0x54)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 54 58 54 
# 828f4 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/home/john/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 
# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 828f5 Copy8 [Register(0x51), Register(0x74)]
#       inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 51 74 
# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 828f8 LoadImm32 [Register(0x58), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 58 00 00 00 00 
# 828fe Copy8 [Register(0x74), Register(0x58)]
#       inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 74 58 
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 82901 Mul8_16 [Register(0x4c), Register(0x58), Register(0x58)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 4c 58 58 
# 82905 LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 5a 00 
# 82908 LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/home/john/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 5b 00 
# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 8290b Copy8 [Register(0x4d), Register(0x78)]
#       inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 4d 78 
# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 8290e LoadImm32 [Register(0x60), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 60 00 00 00 00 
# 82914 Copy8 [Register(0x78), Register(0x60)]
#       inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 78 60 
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 82917 Mul8_16 [Register(0x60), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 60 50 4c 
# 8291b LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 4e 00 
# 8291e LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 4f 00 
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 82921 Copy32 [Register(0x58), Register(0x50)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 58 50 
# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82924 ClearCarry []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 
# 82925 AddCarry32_1 [Register(0x50), Register(0x4c), Register(0x58)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 50 4c 58 
# 82929 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/home/john/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 
# inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 8292a Copy8 [Register(0x5a), Register(0x78)]
#       inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 5a 78 
# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 8292d Copy8 [Register(0x78), Register(0x5b)]
#       inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8 Some('/home/john/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 78 5b 
# inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 82930 Copy8 [Register(0x59), Register(0x78)]
#       inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 59 78 
# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 82933 Copy8 [Register(0x78), Register(0x5a)]
#       inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 78 5a 
# inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 82936 Copy8 [Register(0x58), Register(0x78)]
#       inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 58 78 
# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 82939 Copy8 [Register(0x78), Register(0x59)]
#       inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 78 59 
# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8293c LoadImm8 [Register(0x7a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 7a 00 
# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 8293f Copy8 [Register(0x7a), Register(0x58)]
#       inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 7a 58 
# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 82942 Copy32 [Register(0x58), Register(0x50)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 58 50 
# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 82945 ClearCarry []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 
# 82946 AddCarry32_1 [Register(0x54), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 54 50 4c 
# 8294a AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 
# temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 8294b Copy32 [Register(0x4c), Register(0x50)]
#       temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 4c 50 
# goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/home/john/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_11_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_11_function_end_mul16_32 None
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# Index("temp", Number(U8, 0))
# 8294e Copy8 [Register(0x50), Register(0x74)]
#       tc89e <- temp[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
#       Index("temp", Number(U8, 0))
0b 50 74 
# temp_lo[0x02..0x03] <- tc89e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# 82951 Copy8 [Register(0x74), Register(0x8e)]
#       temp_lo[0x02..0x03] <- tc89e U8 Some('/home/john/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
0b 74 8e 
# tdc08 <- temp[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# Index("temp", Number(U8, 1))
# 82954 Copy8 [Register(0x51), Register(0x74)]
#       tdc08 <- temp[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
#       Index("temp", Number(U8, 1))
0b 51 74 
# temp_lo[0x03..0x04] <- tdc08 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# 82957 Copy8 [Register(0x74), Register(0x8f)]
#       temp_lo[0x03..0x04] <- tdc08 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
0b 74 8f 
# tf338 <- temp[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# Index("temp", Number(U8, 2))
# 8295a Copy8 [Register(0x52), Register(0x74)]
#       tf338 <- temp[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
#       Index("temp", Number(U8, 2))
0b 52 74 
# temp_hi[0x00..0x01] <- tf338 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# 8295d Copy8 [Register(0x74), Register(0x84)]
#       temp_hi[0x00..0x01] <- tf338 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
0b 74 84 
# tb6b4 <- temp[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# Index("temp", Number(U8, 3))
# 82960 Copy8 [Register(0x53), Register(0x74)]
#       tb6b4 <- temp[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
#       Index("temp", Number(U8, 3))
0b 53 74 
# temp_hi[0x01..0x02] <- tb6b4 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# 82963 Copy8 [Register(0x74), Register(0x85)]
#       temp_hi[0x01..0x02] <- tb6b4 U8 Some('/home/john/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
0b 74 85 
# te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 82966 Copy32 [Register(0x0c), Register(0x80)]
#       te546 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 80 
# t3308 <- temp_lo U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 82969 Copy32 [Register(0x8c), Register(0x50)]
#       t3308 <- temp_lo U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 8c 50 
# mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 8296c Store32_1 [Register(0x50), Register(0x80)]
#       mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 50 80 
# 8296f Store32_2 []
#       mem[te546] <- t3308 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 
# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 82970 Copy32 [Register(0x0c), Register(0x80)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c 80 
# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 82973 Copy32 [Register(0x80), Register(0x50)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 80 50 
# 82976 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 50 04 00 00 00 
# t41f5 <- temp_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 8297c Copy32 [Register(0x84), Register(0x54)]
#       t41f5 <- temp_hi U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 84 54 
# mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 8297f Store32_1 [Register(0x54), Register(0x50)]
#       mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 54 50 
# 82982 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 82983 Copy32 [Register(0x0c), Register(0x80)]
#       te825 <- __frame_pointer U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c 80 
# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 82986 Copy32 [Register(0x80), Register(0x50)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 80 50 
# 82989 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 50 00 00 00 00 
# tf4b2 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 8298f Copy32 [Register(0x50), Register(0x54)]
#       tf4b2 <- t4a94 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 50 54 
# tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82992 Copy32 [Register(0x5c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 5c 4c 
# inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82995 Copy32 [Register(0x54), Register(0x50)]
#       inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 54 50 
# inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82998 Copy32 [Register(0x5c), Register(0x54)]
#       inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/home/john/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 5c 54 
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 8299b Load32 [Register(0x4c), Register(0x58)]
#       inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 4c 58 
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 8299e Copy32 [Register(0x54), Register(0x5c)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 54 5c 
# 829a1 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 5c 04 00 00 00 
# inline_mul32_64_add_U64_1_t3203 <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t3203 <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"a\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# 829a7 Copy32 [Register(0x4c), Register(0x60)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
21 4c 60 
# 829aa AddImm32IgnoreCarry [Register(0x60), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_t3203 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
32 60 04 00 00 00 
# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 829b0 Load32 [Register(0x60), Register(0x64)]
#       inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 60 64 
# inline_mul32_64_add_U64_1_teec0 <- inline_mul32_64_add_U64_1_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_teec0 <- inline_mul32_64_add_U64_1_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\"))\nPtrFieldDeref(\"b\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# 829b3 Copy32 [Register(0x50), Register(0x60)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
21 50 60 
# 829b6 AddImm32IgnoreCarry [Register(0x60), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_teec0 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
32 60 04 00 00 00 
# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 829bc Load32 [Register(0x60), Register(0x60)]
#       inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 60 60 
# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 829bf ClearCarry []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 
# 829c0 AddCarry32_1 [Register(0x64), Register(0x60), Register(0x60)]
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 64 60 60 
# 829c4 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 
# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 829c5 Store32_1 [Register(0x60), Register(0x5c)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 60 5c 
# 829c8 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 
# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 829c9 Load32 [Register(0x4c), Register(0x5c)]
#       inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 4c 5c 
# inline_mul32_64_add_U64_1_t24ae <- inline_mul32_64_add_U64_1_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
# Ident("b")
# 829cc Copy32 [Register(0x50), Register(0x4c)]
#       inline_mul32_64_add_U64_1_t24ae <- inline_mul32_64_add_U64_1_b U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") } }
#       Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }
#       Ident("b")
21 50 4c 
# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_t24ae] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 829cf Load32 [Register(0x4c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_t24ae] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 4c 4c 
# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 829d2 ClearCarry []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 
# 829d3 AddCarry32_1 [Register(0x5c), Register(0x4c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 5c 4c 4c 
# 829d7 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 
# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 829d8 Store32_1 [Register(0x4c), Register(0x54)]
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 4c 54 
# 829db Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/home/john/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 
# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 829dc Load32 [Register(0x54), Register(0x50)]
#       inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 54 50 
# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 829df Copy32 [Register(0x58), Register(0x4c)]
#       inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 58 4c 
# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 829e2 Cmp8 [Register(0x4f), Register(0x53)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 4f 53 
# 829e5 Cmp8IfZero [Register(0x4e), Register(0x52)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 4e 52 
# 829e8 Cmp8IfZero [Register(0x4d), Register(0x51)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 4d 51 
# 829eb Cmp8IfZero [Register(0x4c), Register(0x50)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 4c 50 
# 829ee JcImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 15 2a 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 829f2 Copy32 [Register(0x54), Register(0x5c)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 54 5c 
# 829f5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 5c 04 00 00 00 
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 829fb Copy32 [Register(0x54), Register(0x5c)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 54 5c 
# 829fe AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 5c 04 00 00 00 
# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# 82a04 Load32 [Register(0x5c), Register(0x4c)]
#       inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
22 5c 4c 
# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# 82a07 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
32 4c 01 00 00 00 
# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# 82a0d Store32_1 [Register(0x4c), Register(0x5c)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
23 4c 5c 
# 82a10 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
24 
# goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# 82a11 JmpImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
70 15 2a 08 
# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/home/john/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# goto inline_mul32_64_add_U64_1_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_1_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_1_function_end_add_U64 None
# inline_mul32_64_add_U64_1_function_end_add_U64
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
# Return { value: None }
# 82a15 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
#       Return { value: None }
32 0c 08 00 00 00 
# return None None
# Return { value: None }
# 82a1b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 
# 82a21 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_mul32_64 None
# function_end_mul32_64
# Unreachable None
# 82a23 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :print_dec32
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([144, 145, 146, 147])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_div32_by10_47_a (Arg0 a Number(USIZE)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a (Arg0 a Number(USIZE)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([152])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 (t1c22 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 (t2574 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 (t3f28 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e (t3f9e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([152])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed (t5eed Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 (t6274 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 (t8119 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 (t8772 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 (t8e91 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 (t9450 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) Reg(U8) Some([154])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 (t96e8 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 (ta620 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([154])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 (te046 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 (tea96 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))) Reg(U8) Some([153])
# Var inline_print_dec32_div32_by10_47_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_div32_by10_47_prod (Local prod Struct("U64") Static(987492)) Static(987492) None
# Var inline_print_dec32_div32_by10_47_t0 (static "prod") Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_t8792 (t8792 Ident("a")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_print_dec32_div32_by10_47_t9514 (t9514 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_div32_by10_47_tef1a (tef1a Number(USIZE, 3435973837)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_print_dec32_div32_by10_47_tfc6a (tfc6a Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })) Reg(U8) Some([164])
# Var inline_print_dec32_mul32_by10_14_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(USIZE)) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_mul32_by10_14_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([144, 145, 146, 147])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_print_dec32_putc_29_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec32_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([164])
# Var inline_print_dec32_putc_29_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec32_putc_29_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([164])
# Var inline_print_dec32_putc_29_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([164])
# Var inline_print_dec32_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([164])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t1723 (t1723 Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })) Reg(U8) Some([164])
# Var t1a60 (t1a60 Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))) Reg(U8) Some([164])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([144, 145, 146, 147])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([156, 157, 158, 159])
# Var t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([148, 149, 150, 151])
# Var ta8fd (ta8fd Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })) Reg(U8) Some([164])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([148, 149, 150, 151])
# Var tc4db (tc4db Call(Call { function: "print_dec32", parameters: [Ident("b")] })) Reg(U8) Some([164])
# Var tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([164])
# 82a28 Copy32 [Register(0x00), Register(0x90)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [144, 145, 146, 147].
21 00 90 
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Ident("a")
# 82a2b Copy32 [Register(0x90), Register(0x9c)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Ident("a")
21 90 9c 
# t9c15 <- 0n256/0x00000100u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Number(USIZE, 256)
# 82a2e LoadImm32 [Register(0x94), Constant32(0x00000100=256)]
#       t9c15 <- 0n256/0x00000100u32  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Number(USIZE, 256)
20 94 00 01 00 00 
# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# 82a34 Cmp8 [Register(0x97), Register(0x9f)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
15 97 9f 
# 82a37 Cmp8IfZero [Register(0x96), Register(0x9e)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 96 9e 
# 82a3a Cmp8IfZero [Register(0x95), Register(0x9d)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 95 9d 
# 82a3d Cmp8IfZero [Register(0x94), Register(0x9c)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 94 9c 
# 82a40 JcImm [Label24(print_dec32_if_else_0_2)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
71 6a 2a 08 
# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\n", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# print_dec32_if_true_0_1
# tdd9e <- a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
# Index("a", Number(U8, 0))
# 82a44 Copy8 [Register(0x90), Register(0xa4)]
#       tdd9e <- a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
#       Index("a", Number(U8, 0))
0b 90 a4 
# None <= call print_dec8(tdd9e,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
# 82a47 Copy8 [Register(0xa4), Register(0x00)]
#       Arg0[a]=tdd9e None <= call print_dec8(tdd9e,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0b a4 00 
# Registers used by this function: {144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [164]
# 82a4a Push8 [Register(0xa4)]
#       Saving reg0xa4 before None <= call print_dec8(tdd9e,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
09 a4 
# 82a4c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 
# 82a52 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 5c 2a 08 00 
# 82a58 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 1d 2c 08 
# 82a5c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 
# 82a62 Pop8 [Register(0xa4)]
#       Restoring reg0xa4 after None <= call print_dec8(tdd9e,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0a a4 
# return None Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# Return { value: None }
# 82a64 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# goto print_dec32_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# 82a66 JmpImm [Label24(print_dec32_if_end_0)]
#       goto print_dec32_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
70 6a 2a 08 
# :print_dec32_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_else_0_2
# :print_dec32_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_end_0
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# Ident("a")
# 82a6a Copy32 [Register(0x90), Register(0x9c)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
#       Ident("a")
21 90 9c 
# inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# 82a6d Copy32 [Register(0x9c), Register(0x94)]
#       inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
21 9c 94 
# inline_print_dec32_div32_by10_47_t8792 <- inline_print_dec32_div32_by10_47_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# Ident("a")
# 82a70 Copy32 [Register(0x94), Register(0x9c)]
#       inline_print_dec32_div32_by10_47_t8792 <- inline_print_dec32_div32_by10_47_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       Ident("a")
21 94 9c 
# inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# Number(USIZE, 3435973837)
# 82a73 LoadImm32 [Register(0xa0), Constant32(0xcccccccd=3435973837)]
#       inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       Number(USIZE, 3435973837)
20 a0 cd cc cc cc 
# inline_print_dec32_div32_by10_47_t0 <- 0n987492/0x000f1164u32  Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# 82a79 LoadImm32 [Register(0x94), Constant32(0x000f1164=987492)]
#       inline_print_dec32_div32_by10_47_t0 <- 0n987492/0x000f1164u32  Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       AddressOf(Ident("prod"))
20 94 64 11 0f 00 
# inline_print_dec32_div32_by10_47_t1c61 <- inline_print_dec32_div32_by10_47_t0 U32 Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t1c61 <- inline_print_dec32_div32_by10_47_t0 U32 Some('/home/john/lutcomp/programs/lib/div.j':(130,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"a\"), Number(USIZE, 3435973837), AddressOf(Ident(\"prod\"))] })\nAddressOf(Ident(\"prod\"))\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# 82a7f Copy32 [Register(0x9c), Register(0x00)]
#       Arg0[a]=inline_print_dec32_div32_by10_47_t8792 None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 9c 00 
# 82a82 Copy32 [Register(0xa0), Register(0x04)]
#       Arg1[b]=inline_print_dec32_div32_by10_47_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 a0 04 
# 82a85 Copy32 [Register(0x94), Register(0x08)]
#       Arg2[c]=inline_print_dec32_div32_by10_47_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_47_t8792,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/home/john/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 94 08 
# Registers used by this function: {144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164}
# Registers used by callee tree: {76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143}
# Registers to save: []
# 82a88 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 
# 82a8e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 98 2a 08 00 
# 82a94 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 a2 25 08 
# 82a98 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 
# inline_print_dec32_div32_by10_47_t9514 <- 0n987496/0x000f1168u32  Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }
# Number(USIZE, 987496)
# 82a9e LoadImm32 [Register(0x94), Constant32(0x000f1168=987496)]
#       inline_print_dec32_div32_by10_47_t9514 <- 0n987496/0x000f1168u32  Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987492), Number(USIZE, 4)) }
#       Number(USIZE, 987496)
20 94 68 11 0f 00 
# inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_t9514] U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# 82aa4 Load32 [Register(0x94), Register(0x94)]
#       inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_t9514] U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
22 94 94 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\nCall(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
# Index("a", Number(U8, 0))
# 82aa7 Copy8 [Register(0x94), Register(0x9a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
#       Index("a", Number(U8, 0))
0b 94 9a 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
# 82aaa LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
04 00 03 
# 82aad Shift8 [Constant8(0x04=4), Register(0x00), Register(0x9a), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
1e 04 00 9a 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 U8 Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# 82ab2 Copy8 [Register(0x99), Register(0x94)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 U8 Some('/home/john/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
0b 99 94 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
# Index("a", Number(U8, 1))
# 82ab5 Copy8 [Register(0x95), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
#       Index("a", Number(U8, 1))
0b 95 98 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
# 82ab8 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
04 00 03 
# 82abb Shift8 [Constant8(0x04=4), Register(0x00), Register(0x98), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
1e 04 00 98 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 U8 Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# 82ac0 Copy8 [Register(0x99), Register(0x95)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 U8 Some('/home/john/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
0b 99 95 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
# Index("a", Number(U8, 2))
# 82ac3 Copy8 [Register(0x96), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
#       Index("a", Number(U8, 2))
0b 96 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
# 82ac6 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
04 00 03 
# 82ac9 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x99), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
1e 04 00 99 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 U8 Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# 82ace Copy8 [Register(0x99), Register(0x96)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 U8 Some('/home/john/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
0b 99 96 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
# Index("a", Number(U8, 3))
# 82ad1 Copy8 [Register(0x97), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
#       Index("a", Number(U8, 3))
0b 97 98 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
# 82ad4 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
04 00 03 
# 82ad7 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x98), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
1e 04 00 98 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e U8 Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# 82adc Copy8 [Register(0x99), Register(0x97)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e U8 Some('/home/john/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
0b 99 97 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
# Index("a", Number(U8, 0))
# 82adf Copy8 [Register(0x94), Register(0x9a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
#       Index("a", Number(U8, 0))
0b 94 9a 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
# 82ae2 LoadImm8 [Register(0x00), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
04 00 1f 
# 82ae5 And8 [Register(0x9a), Register(0x00), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
1b 9a 00 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 U8 Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# 82ae9 Copy8 [Register(0x99), Register(0x94)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 U8 Some('/home/john/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
0b 99 94 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Index("a", Number(U8, 0))
# 82aec Copy8 [Register(0x94), Register(0x9a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Index("a", Number(U8, 0))
0b 94 9a 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
# Index("a", Number(U8, 1))
# 82aef Copy8 [Register(0x95), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
#       Index("a", Number(U8, 1))
0b 95 98 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
# 82af2 LoadImm8 [Register(0x00), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
04 00 e0 
# 82af5 And8 [Register(0x98), Register(0x00), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
1b 98 00 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# 82af9 Or8 [Register(0x9a), Register(0x99), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620) Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
1c 9a 99 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# 82afd Copy8 [Register(0x99), Register(0x94)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 U8 Some('/home/john/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
0b 99 94 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
# Index("a", Number(U8, 1))
# 82b00 Copy8 [Register(0x95), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
#       Index("a", Number(U8, 1))
0b 95 98 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
# 82b03 LoadImm8 [Register(0x00), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
04 00 1f 
# 82b06 And8 [Register(0x98), Register(0x00), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
1b 98 00 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 U8 Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# 82b0a Copy8 [Register(0x99), Register(0x95)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 U8 Some('/home/john/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
0b 99 95 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Index("a", Number(U8, 1))
# 82b0d Copy8 [Register(0x95), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Index("a", Number(U8, 1))
0b 95 98 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
# Index("a", Number(U8, 2))
# 82b10 Copy8 [Register(0x96), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
#       Index("a", Number(U8, 2))
0b 96 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
# 82b13 LoadImm8 [Register(0x00), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
04 00 e0 
# 82b16 And8 [Register(0x99), Register(0x00), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
1b 99 00 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# 82b1a Or8 [Register(0x98), Register(0x99), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed) Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
1c 98 99 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# 82b1e Copy8 [Register(0x99), Register(0x95)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 U8 Some('/home/john/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
0b 99 95 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
# Index("a", Number(U8, 2))
# 82b21 Copy8 [Register(0x96), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
#       Index("a", Number(U8, 2))
0b 96 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
# 82b24 LoadImm8 [Register(0x00), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
04 00 1f 
# 82b27 And8 [Register(0x99), Register(0x00), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
1b 99 00 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 U8 Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# 82b2b Copy8 [Register(0x99), Register(0x96)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 U8 Some('/home/john/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
0b 99 96 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Index("a", Number(U8, 2))
# 82b2e Copy8 [Register(0x96), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Index("a", Number(U8, 2))
0b 96 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
# Index("a", Number(U8, 3))
# 82b31 Copy8 [Register(0x97), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
#       Index("a", Number(U8, 3))
0b 97 98 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
# 82b34 LoadImm8 [Register(0x00), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
04 00 e0 
# 82b37 And8 [Register(0x98), Register(0x00), Register(0x9a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
1b 98 00 9a 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# 82b3b Or8 [Register(0x99), Register(0x9a), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450) Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
1c 99 9a 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# 82b3f Copy8 [Register(0x99), Register(0x96)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 U8 Some('/home/john/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
0b 99 96 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
# Index("a", Number(U8, 3))
# 82b42 Copy8 [Register(0x97), Register(0x98)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
#       Index("a", Number(U8, 3))
0b 97 98 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
# 82b45 LoadImm8 [Register(0x00), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
04 00 1f 
# 82b48 And8 [Register(0x98), Register(0x00), Register(0x99)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
1b 98 00 99 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 U8 Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# 82b4c Copy8 [Register(0x99), Register(0x97)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 U8 Some('/home/john/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
0b 99 97 
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 Some('/home/john/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3)], resolved: None }
# :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 None
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_print_dec32_div32_by10_47_function_end_div32_by10 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_function_end_div32_by10 Some('/home/john/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_function_end_div32_by10)], resolved: None }
# :inline_print_dec32_div32_by10_47_function_end_div32_by10 None
# inline_print_dec32_div32_by10_47_function_end_div32_by10
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# 82b4f Copy32 [Register(0x94), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
21 94 00 
# Registers used by this function: {144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164]
# 82b52 Push8 [Register(0xa4)]
#       Saving reg0xa4 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a4 
# 82b54 Push8 [Register(0xa3)]
#       Saving reg0xa3 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a3 
# 82b56 Push8 [Register(0xa2)]
#       Saving reg0xa2 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a2 
# 82b58 Push8 [Register(0xa1)]
#       Saving reg0xa1 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a1 
# 82b5a Push8 [Register(0xa0)]
#       Saving reg0xa0 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 a0 
# 82b5c Push8 [Register(0x9f)]
#       Saving reg0x9f before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9f 
# 82b5e Push8 [Register(0x9e)]
#       Saving reg0x9e before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9e 
# 82b60 Push8 [Register(0x9d)]
#       Saving reg0x9d before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9d 
# 82b62 Push8 [Register(0x9c)]
#       Saving reg0x9c before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9c 
# 82b64 Push8 [Register(0x9a)]
#       Saving reg0x9a before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 9a 
# 82b66 Push8 [Register(0x99)]
#       Saving reg0x99 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 99 
# 82b68 Push8 [Register(0x98)]
#       Saving reg0x98 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 98 
# 82b6a Push8 [Register(0x97)]
#       Saving reg0x97 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 97 
# 82b6c Push8 [Register(0x96)]
#       Saving reg0x96 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 96 
# 82b6e Push8 [Register(0x95)]
#       Saving reg0x95 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 95 
# 82b70 Push8 [Register(0x94)]
#       Saving reg0x94 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 94 
# 82b72 Push8 [Register(0x93)]
#       Saving reg0x93 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 93 
# 82b74 Push8 [Register(0x92)]
#       Saving reg0x92 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 92 
# 82b76 Push8 [Register(0x91)]
#       Saving reg0x91 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 91 
# 82b78 Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 90 
# 82b7a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 
# 82b80 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 8a 2b 08 00 
# 82b86 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 28 2a 08 
# 82b8a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 
# 82b90 Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 90 
# 82b92 Pop8 [Register(0x91)]
#       Restoring reg0x91 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 91 
# 82b94 Pop8 [Register(0x92)]
#       Restoring reg0x92 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 92 
# 82b96 Pop8 [Register(0x93)]
#       Restoring reg0x93 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 93 
# 82b98 Pop8 [Register(0x94)]
#       Restoring reg0x94 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 94 
# 82b9a Pop8 [Register(0x95)]
#       Restoring reg0x95 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 95 
# 82b9c Pop8 [Register(0x96)]
#       Restoring reg0x96 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 96 
# 82b9e Pop8 [Register(0x97)]
#       Restoring reg0x97 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 97 
# 82ba0 Pop8 [Register(0x98)]
#       Restoring reg0x98 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 98 
# 82ba2 Pop8 [Register(0x99)]
#       Restoring reg0x99 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 99 
# 82ba4 Pop8 [Register(0x9a)]
#       Restoring reg0x9a after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9a 
# 82ba6 Pop8 [Register(0x9c)]
#       Restoring reg0x9c after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9c 
# 82ba8 Pop8 [Register(0x9d)]
#       Restoring reg0x9d after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9d 
# 82baa Pop8 [Register(0x9e)]
#       Restoring reg0x9e after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9e 
# 82bac Pop8 [Register(0x9f)]
#       Restoring reg0x9f after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 9f 
# 82bae Pop8 [Register(0xa0)]
#       Restoring reg0xa0 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a0 
# 82bb0 Pop8 [Register(0xa1)]
#       Restoring reg0xa1 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a1 
# 82bb2 Pop8 [Register(0xa2)]
#       Restoring reg0xa2 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a2 
# 82bb4 Pop8 [Register(0xa3)]
#       Restoring reg0xa3 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a3 
# 82bb6 Pop8 [Register(0xa4)]
#       Restoring reg0xa4 after None <= call print_dec32(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a a4 
# t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Ident("a")
# 82bb8 Copy32 [Register(0x90), Register(0x9c)]
#       t8792 <- a U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Ident("a")
21 90 9c 
# tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }\nArithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))\nCall(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# 82bbb Copy32 [Register(0x94), Register(0x90)]
#       inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
21 94 90 
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82bbe ClearCarry []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 
# 82bbf AddCarry32_1 [Register(0x90), Register(0x90), Register(0x90)]
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 90 90 90 
# 82bc3 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82bc4 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 
# 82bc5 AddCarry32_1 [Register(0x90), Register(0x90), Register(0x94)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 90 90 94 
# 82bc9 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 82bca ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 
# 82bcb AddCarry32_1 [Register(0x94), Register(0x94), Register(0x94)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 94 94 94 
# 82bcf AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/home/john/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 82bd0 ClearCarry []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 
# 82bd1 AddCarry32_1 [Register(0x94), Register(0x90), Register(0x90)]
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 94 90 90 
# 82bd5 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 
# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/home/john/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_mul32_by10_14_function_end_mul32_by10)], resolved: None }
# :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 None
# inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# 82bd6 Copy32 [Register(0x90), Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
21 90 00 
# 82bd9 Invert8 [Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 00 
# 82bdb Invert8 [Register(0x01)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 01 
# 82bdd Invert8 [Register(0x02)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 02 
# 82bdf Invert8 [Register(0x03)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 03 
# 82be1 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
32 00 01 00 00 00 
# 82be7 ClearCarry []
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
03 
# 82be8 AddCarry32_1 [Register(0x9c), Register(0x00), Register(0x90)]
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
30 9c 00 90 
# 82bec AddCarry32_2 []
#       a <- t8792 Subtract Var(t86e2) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
31 
# tdd9e <- a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
# Index("a", Number(U8, 0))
# 82bed Copy8 [Register(0x90), Register(0xa4)]
#       tdd9e <- a[0x00..0x01] U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
#       Index("a", Number(U8, 0))
0b 90 a4 
# t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
# 82bf0 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
04 00 30 
# 82bf3 Add8NoCarryIn [Register(0xa4), Register(0x00), Register(0xa4)]
#       t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
14 a4 00 a4 
# inline_print_dec32_putc_29_c <- t1a60 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_c <- t1a60 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(151,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xa4), Register(0xa4)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_29_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82bf7 Out0 [Register(0xa4)]
#       IoWrite0
68 a4 
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xa4), Register(0xa4)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82bf9 Copy8 [Register(0xa4), Register(0x00)]
#       Arg0[ch]=inline_print_dec32_putc_29_tac13 None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b a4 00 
# Registers used by this function: {144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [164]
# 82bfc Push8 [Register(0xa4)]
#       Saving reg0xa4 before None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a4 
# 82bfe AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 82c04 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 0e 2c 08 00 
# 82c0a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 82c0e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# 82c14 Pop8 [Register(0xa4)]
#       Restoring reg0xa4 after None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a4 
# goto inline_print_dec32_putc_29_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_putc_29_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_function_end_putc)], resolved: None }
# :inline_print_dec32_putc_29_function_end_putc None
# inline_print_dec32_putc_29_function_end_putc
# return None None
# Return { value: None }
# 82c16 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_print_dec32 None
# function_end_print_dec32
# Unreachable None
# 82c18 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :print_dec8
# Ret None
# Arg0=a
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var a (Arg0 a Number(U8)) Reg(U8) Some([165])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([166])
# Var inline_print_dec8_putc_30_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_print_dec8_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([165])
# Var inline_print_dec8_putc_30_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_print_dec8_putc_30_t34eb (t34eb Call(Call { function: "lcd_putc", parameters: [Ident("c")] })) Reg(U8) Some([165])
# Var inline_print_dec8_putc_30_t642e (t642e Call(Call { function: "io_write0", parameters: [Ident("c")] })) Reg(U8) Some([165])
# Var inline_print_dec8_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([165])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t6cb (t6cb Arithmetic(Multiply, Ident("b"), Number(U8, 10))) Reg(U8) Some([165])
# Var t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([165])
# Var t79c4 (t79c4 Call(Call { function: "print_dec8", parameters: [Ident("b")] })) Reg(U8) Some([165])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([167])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([166])
# Var td36e (td36e Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })) Reg(U8) Some([165])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([166])
# 82c1d Copy8 [Register(0x00), Register(0xa5)]
#       Save function parameter 'a' registers [0] to locals [165].
0b 00 a5 
# t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# 82c20 Copy8 [Register(0xa5), Register(0xa7)]
#       t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
#       Ident("a")
0b a5 a7 
# td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 82c23 LoadImm8 [Register(0xa6), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 a6 0a 
# if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# 82c26 Cmp8 [Register(0xa6), Register(0xa7)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
15 a6 a7 
# 82c29 JcImm [Label24(print_dec8_if_true_0_1)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
71 31 2c 08 
# 82c2d JmpImm [Label24(print_dec8_if_else_0_2)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
70 77 2c 08 
# :print_dec8_if_true_0_1 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# print_dec8_if_true_0_1
# t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 10))
# Ident("a")
# 82c31 Copy8 [Register(0xa5), Register(0xa7)]
#       t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
#       Ident("a")
0b a5 a7 
# b <- t8792 Divide Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 10))
# 82c34 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
04 00 0a 
# 82c37 Divide8 [Register(0xa7), Register(0x00), Register(0xa6)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
17 a7 00 a6 
# tace9 <- b U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0xa6), Register(0xa6)], resolved: None }
# None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# 82c3b Copy8 [Register(0xa6), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0b a6 00 
# Registers used by this function: {165, 166, 167}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [165, 166, 167]
# 82c3e Push8 [Register(0xa7)]
#       Saving reg0xa7 before None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 a7 
# 82c40 Push8 [Register(0xa6)]
#       Saving reg0xa6 before None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 a6 
# 82c42 Push8 [Register(0xa5)]
#       Saving reg0xa5 before None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 a5 
# 82c44 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 
# 82c4a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 54 2c 08 00 
# 82c50 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 1d 2c 08 
# 82c54 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 
# 82c5a Pop8 [Register(0xa5)]
#       Restoring reg0xa5 after None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a a5 
# 82c5c Pop8 [Register(0xa6)]
#       Restoring reg0xa6 after None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a a6 
# 82c5e Pop8 [Register(0xa7)]
#       Restoring reg0xa7 after None <= call print_dec8(tace9,) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a a7 
# t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Ident("a")
# 82c60 Copy8 [Register(0xa5), Register(0xa7)]
#       t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Ident("a")
0b a5 a7 
# tace9 <- b U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 10))
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))\nArithmetic(Multiply, Ident(\"b\"), Number(U8, 10))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0xa6), Register(0xa6)], resolved: None }
# t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 10))
# 82c63 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 10))
04 00 0a 
# 82c66 Mul8_8 [Register(0xa6), Register(0x00), Register(0xa5)]
#       t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 10))
10 a6 00 a5 
# a <- t8792 Subtract Var(t6cb) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# 82c6a Copy8 [Register(0xa5), Register(0x00)]
#       a <- t8792 Subtract Var(t6cb) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
0b a5 00 
# 82c6d Negate8 [Register(0x00)]
#       a <- t8792 Subtract Var(t6cb) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
02 00 
# 82c6f Add8NoCarryIn [Register(0xa7), Register(0x00), Register(0xa5)]
#       a <- t8792 Subtract Var(t6cb) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
14 a7 00 a5 
# goto print_dec8_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# 82c73 JmpImm [Label24(print_dec8_if_end_0)]
#       goto print_dec8_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
70 77 2c 08 
# :print_dec8_if_else_0_2 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_else_0_2
# :print_dec8_if_end_0 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_end_0
# t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# 82c77 Copy8 [Register(0xa5), Register(0xa7)]
#       t8792 <- a U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
#       Ident("a")
0b a5 a7 
# t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 82c7a LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 
# 82c7d Add8NoCarryIn [Register(0xa7), Register(0x00), Register(0xa5)]
#       t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 a7 00 a5 
# inline_print_dec8_putc_30_c <- t6db1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_c <- t6db1 U8 Some('/home/john/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0xa5), Register(0xa5)], resolved: None }
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xa5), Register(0xa5)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(31,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82c81 Out0 [Register(0xa5)]
#       IoWrite0
68 a5 
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0xa5), Register(0xa5)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82c83 Copy8 [Register(0xa5), Register(0x00)]
#       Arg0[ch]=inline_print_dec8_putc_30_tac13 None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b a5 00 
# Registers used by this function: {165, 166, 167}
# Registers used by callee tree: {29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 164, 165, 166, 167, 168, 169, 170, 171, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251}
# Registers to save: [165, 166, 167]
# 82c86 Push8 [Register(0xa7)]
#       Saving reg0xa7 before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a7 
# 82c88 Push8 [Register(0xa6)]
#       Saving reg0xa6 before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a6 
# 82c8a Push8 [Register(0xa5)]
#       Saving reg0xa5 before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 a5 
# 82c8c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 
# 82c92 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 9c 2c 08 00 
# 82c98 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 ae 22 08 
# 82c9c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 
# 82ca2 Pop8 [Register(0xa5)]
#       Restoring reg0xa5 after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a5 
# 82ca4 Pop8 [Register(0xa6)]
#       Restoring reg0xa6 after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a6 
# 82ca6 Pop8 [Register(0xa7)]
#       Restoring reg0xa7 after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/home/john/lutcomp/programs/lib/stdio.j':(32,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a a7 
# goto inline_print_dec8_putc_30_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec8_putc_30_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_function_end_putc)], resolved: None }
# :inline_print_dec8_putc_30_function_end_putc None
# inline_print_dec8_putc_30_function_end_putc
# return None None
# Return { value: None }
# 82ca8 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_print_dec8 None
# function_end_print_dec8
# Unreachable None
# 82caa Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
# :stdio_init
# Ret None
# Var PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_35_PS2_SCAN_CODE_TO_ASCII (const "PS2_SCAN_CODE_TO_ASCII") Const(PS2_SCAN_CODE_TO_ASCII) None
# Var inline_stdio_init_queue_init_35_lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var inline_stdio_init_queue_init_35_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([168, 169, 170, 171])
# Var inline_stdio_init_queue_init_35_t4d4f (t4d4f Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([168, 169, 170, 171])
# Var inline_stdio_init_queue_init_35_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([172])
# Var inline_stdio_init_queue_init_35_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([176, 177, 178, 179])
# Var inline_stdio_init_queue_init_35_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([168, 169, 170, 171])
# Var lcd_row_start (const "lcd_row_start") Const(lcd_row_start) None
# Var t0 (static "stdin") Reg(U32) Some([168, 169, 170, 171])
# Var t5c19 (t5c19 Call(Call { function: "KeyBoard_init", parameters: [] })) Reg(U8) Some([180])
# Var t7567 (t7567 Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })) Reg(U8) Some([180])
# Var t7b05 (t7b05 Call(Call { function: "lcd_init", parameters: [] })) Reg(U8) Some([180])
# Var tfff6 (tfff6 AddressOf(Ident("stdin"))) Reg(U32) Some([168, 169, 170, 171])
# t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# 82caf LoadImm32 [Register(0xa8), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))
#       VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
#       AddressOf(Ident("stdin"))
20 a8 5c 10 0f 00 
# tfff6 <- t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
# AddressOf(Ident("stdin"))
# optimized away noop copy Instruction { source: "tfff6 <- t0 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })\nAddressOf(Ident(\"stdin\"))\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_stdio_init_queue_init_35_s <- tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))
# VoidExpression { expression: Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_init", parameters: [AddressOf(Ident("stdin"))] })
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_35_s <- tfff6 U32 Some('/home/john/lutcomp/programs/lib/stdio.j':(9,5))\nVoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }\nCall(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))\nAssign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# 82cb5 Copy32 [Register(0xa8), Register(0xb0)]
#       inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
21 a8 b0 
# 82cb8 AddImm32IgnoreCarry [Register(0xb0), Constant32(0x00000100=256)]
#       inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
32 b0 00 01 00 00 
# inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82cbe LoadImm8 [Register(0xac), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 ac 00 
# mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# 82cc1 Store8 [Register(0xac), Register(0xb0)]
#       mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
06 ac b0 
# inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32 Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))\nAssign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))\nCast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# 82cc4 AddImm32IgnoreCarry [Register(0xa8), Constant32(0x00000104=260)]
#       inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32) Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
32 a8 04 01 00 00 
# inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82cca LoadImm8 [Register(0xac), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 ac 00 
# mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# 82ccd Store8 [Register(0xac), Register(0xa8)]
#       mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/home/john/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
06 ac a8 
# goto inline_stdio_init_queue_init_35_function_end_queue_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_stdio_init_queue_init_35_function_end_queue_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_stdio_init_queue_init_35_function_end_queue_init)], resolved: None }
# :inline_stdio_init_queue_init_35_function_end_queue_init None
# inline_stdio_init_queue_init_35_function_end_queue_init
# None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {168, 169, 170, 171, 172, 176, 177, 178, 179, 180}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 164, 165, 166, 167, 168, 169, 170, 171, 230, 252}
# Registers to save: [168, 169, 170, 171]
# 82cd0 Push8 [Register(0xab)]
#       Saving reg0xab before None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 ab 
# 82cd2 Push8 [Register(0xaa)]
#       Saving reg0xaa before None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 aa 
# 82cd4 Push8 [Register(0xa9)]
#       Saving reg0xa9 before None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 a9 
# 82cd6 Push8 [Register(0xa8)]
#       Saving reg0xa8 before None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 a8 
# 82cd8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 
# 82cde StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c e8 2c 08 00 
# 82ce4 JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 6c 21 08 
# 82ce8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 
# 82cee Pop8 [Register(0xa8)]
#       Restoring reg0xa8 after None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a a8 
# 82cf0 Pop8 [Register(0xa9)]
#       Restoring reg0xa9 after None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a a9 
# 82cf2 Pop8 [Register(0xaa)]
#       Restoring reg0xaa after None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a aa 
# 82cf4 Pop8 [Register(0xab)]
#       Restoring reg0xab after None <= call lcd_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(10,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a ab 
# None <= call KeyBoard_init() Some('/home/john/lutcomp/programs/lib/stdio.j':(11,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {168, 169, 170, 171, 172, 176, 177, 178, 179, 180}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 82cf6 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 
# 82cfc StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c 06 2d 08 00 
# 82d02 JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 08 08 
# 82d06 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 
# return None None
# Return { value: None }
# 82d0c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 
# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 82d0e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 
