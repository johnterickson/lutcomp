v2.0 raw
# In IlFunctionId("KeyBoard_init"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), in block from 38..=57, removing repetitive write at 51 because it is the same as at 41: ta97f <- 0n0/0x00u8 
# In IlFunctionId("Keyboard_poll"), in block from 38..=57, removing repetitive write at 55 because it is the same as at 51: ta97f <- 0n0/0x00u8 
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("RpnCalc_handle"), optimizing round #0
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_handle"), optimizing round #1
# In IlFunctionId("RpnCalc_handle"), optimizing round #2
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `stack` - which is also never modified. Replacing refs to latter with the former and deleting the copy: stack <- c U32
# In IlFunctionId("RpnCalc_handle"), optimizing round #3
# In IlFunctionId("RpnCalc_handle"), optimizing round #4
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `t7f48` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t7f48 <- c U32
# In IlFunctionId("RpnCalc_handle"), optimizing round #5
# In IlFunctionId("RpnCalc_handle"), optimizing round #6
# In IlFunctionId("RpnCalc_init"), optimizing round #0
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #1
# In IlFunctionId("RpnCalc_init"), optimizing round #2
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `s` - which is also never modified. Replacing refs to latter with the former and deleting the copy: s <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #3
# In IlFunctionId("RpnCalc_init"), optimizing round #4
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb2e9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb2e9 <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #5
# In IlFunctionId("RpnCalc_init"), optimizing round #6
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb1ed` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb1ed <- c U32
# In IlFunctionId("RpnCalc_init"), optimizing round #7
# In IlFunctionId("RpnCalc_init"), optimizing round #8
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #0
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #1
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #2
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `t4760` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4760 <- c U32
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #3
# In IlFunctionId("RpnCalc_push_pending"), optimizing round #4
# In IlFunctionId("RpnCalc_run"), optimizing round #0
# In IlFunctionId("RpnCalc_run"), `calc` is never written to, but is copied to `td337` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td337 <- calc U32
# In IlFunctionId("RpnCalc_run"), optimizing round #1
# In IlFunctionId("RpnCalc_run"), optimizing round #2
# In IlFunctionId("RpnCalc_run"), in block from 0..=5, removing repetitive write at 2 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), in block from 7..=14, removing repetitive write at 12 because it is the same as at 9: ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), optimizing round #3
# In IlFunctionId("add_U64"), optimizing round #0
# In IlFunctionId("add_U64"), `a` is never written to, but is copied to `t3203` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t3203 <- a U32
# In IlFunctionId("add_U64"), optimizing round #1
# In IlFunctionId("add_U64"), optimizing round #2
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `teec0` - which is also never modified. Replacing refs to latter with the former and deleting the copy: teec0 <- b U32
# In IlFunctionId("add_U64"), optimizing round #3
# In IlFunctionId("add_U64"), optimizing round #4
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `t24ae` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t24ae <- b U32
# In IlFunctionId("add_U64"), optimizing round #5
# In IlFunctionId("add_U64"), optimizing round #6
# In IlFunctionId("delay"), optimizing round #0
# In IlFunctionId("div16"), optimizing round #0
# In IlFunctionId("div32"), optimizing round #0
# In IlFunctionId("div32"), removing no-op il instruction: t4a94 <- te825 Add Number(0n0/0x00000000u32)
# In IlFunctionId("div32"), optimizing round #1
# In IlFunctionId("div32"), optimizing round #2
# In IlFunctionId("div32_by10"), optimizing round #0
# In IlFunctionId("div32_by10"), resolved the constant val `Number(0n987656/0x000f1208u32)` for var `t1c61`.
# In IlFunctionId("div32_by10"), optimizing round #1
# In IlFunctionId("div32_by10"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("div32_by10"), optimizing round #2
# In IlFunctionId("div32_by10"), optimizing round #3
# In IlFunctionId("getchar"), optimizing round #0
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("getchar"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("lcd_init"), optimizing round #0
# In IlFunctionId("lcd_init"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_init"), optimizing round #1
# In IlFunctionId("lcd_logical_to_physical"), optimizing round #0
# In IlFunctionId("lcd_putc"), optimizing round #0
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t9`.
# In IlFunctionId("lcd_putc"), optimizing round #1
# In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #10, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #15, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t2 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #21, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t3 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #22, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t4 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #36, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t6 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# In IlFunctionId("lcd_putc"), at #40, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t7 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #41, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t8 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_putc"), at #46, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t9 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #2
# In IlFunctionId("lcd_putc"), optimizing round #3
# In IlFunctionId("lcd_putc"), in block from 0..=26, removing repetitive write at 10 because it is the same as at 4: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 0..=26, removing repetitive write at 15 because it is the same as at 10: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 0..=26, removing repetitive write at 21 because it is the same as at 15: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 0..=26, removing repetitive write at 22 because it is the same as at 21: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 28..=39, removing repetitive write at 36 because it is the same as at 30: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 39..=51, removing repetitive write at 41 because it is the same as at 40: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), in block from 39..=51, removing repetitive write at 46 because it is the same as at 41: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_putc"), optimizing round #4
# In IlFunctionId("lcd_scroll_up"), optimizing round #0
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `Number(0n987145/0x000f1009u32)` for var `t1`.
# In IlFunctionId("lcd_scroll_up"), optimizing round #1
# In IlFunctionId("lcd_scroll_up"), in block from 36..=57, removing repetitive write at 53 because it is the same as at 47: tdf3b <- 0n32/0x20u8 
# In IlFunctionId("lcd_scroll_up"), in block from 36..=57, removing repetitive write at 56 because it is the same as at 53: tdf3b <- 0n32/0x20u8 
# In IlFunctionId("lcd_scroll_up"), optimizing round #2
# In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# In IlFunctionId("lcd_scroll_up"), at #1, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t1 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #3
# In IlFunctionId("lcd_scroll_up"), optimizing round #4
# In IlFunctionId("lcd_scroll_up"), in block from 0..=30, removing repetitive write at 1 because it is the same as at 0: t0 <- 0n987145/0x000f1009u32 
# In IlFunctionId("lcd_scroll_up"), optimizing round #5
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `tca8`.
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("mul16_32"), optimizing round #0
# In IlFunctionId("mul32_32"), optimizing round #0
# In IlFunctionId("mul32_64"), optimizing round #0
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t8956` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8956 <- c U32
# In IlFunctionId("mul32_64"), optimizing round #1
# In IlFunctionId("mul32_64"), optimizing round #2
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t2558` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t2558 <- c U32
# In IlFunctionId("mul32_64"), optimizing round #3
# In IlFunctionId("mul32_64"), optimizing round #4
# In IlFunctionId("mul32_by10"), optimizing round #0
# In IlFunctionId("mul8"), optimizing round #0
# In IlFunctionId("mul8"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8"), optimizing round #1
# In IlFunctionId("mul8"), optimizing round #2
# In IlFunctionId("mul8"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("mul8"), optimizing round #3
# In IlFunctionId("mul8"), optimizing round #4
# In IlFunctionId("mul8_16"), optimizing round #0
# In IlFunctionId("mul8_16"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8_16"), optimizing round #1
# In IlFunctionId("mul8_16"), optimizing round #2
# In IlFunctionId("mul8_16"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("mul8_16"), optimizing round #3
# In IlFunctionId("mul8_16"), optimizing round #4
# In IlFunctionId("print_dec32"), optimizing round #0
# In IlFunctionId("print_dec32_test"), optimizing round #0
# In IlFunctionId("print_dec32_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("print_dec32_test"), optimizing round #1
# In IlFunctionId("print_dec32_test"), optimizing round #2
# In IlFunctionId("print_dec8"), optimizing round #0
# In IlFunctionId("print_dec8_test"), optimizing round #0
# In IlFunctionId("print_dec8_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U8
# In IlFunctionId("print_dec8_test"), optimizing round #1
# In IlFunctionId("print_dec8_test"), optimizing round #2
# In IlFunctionId("print_digit"), optimizing round #0
# In IlFunctionId("println"), optimizing round #0
# In IlFunctionId("putc"), optimizing round #0
# In IlFunctionId("putc"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("putc"), optimizing round #1
# In IlFunctionId("queue_init"), optimizing round #0
# In IlFunctionId("queue_pop"), optimizing round #0
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), optimizing round #1
# In IlFunctionId("queue_pop"), optimizing round #2
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), optimizing round #3
# In IlFunctionId("queue_pop"), optimizing round #4
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_pop"), optimizing round #5
# In IlFunctionId("queue_pop"), optimizing round #6
# In IlFunctionId("queue_push"), optimizing round #0
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), optimizing round #1
# In IlFunctionId("queue_push"), optimizing round #2
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), optimizing round #3
# In IlFunctionId("queue_push"), optimizing round #4
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), optimizing round #5
# In IlFunctionId("queue_push"), optimizing round #6
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# In IlFunctionId("queue_push"), optimizing round #7
# In IlFunctionId("queue_push"), optimizing round #8
# In IlFunctionId("readline"), optimizing round #0
# In IlFunctionId("readline"), in block from 0..=5, removing repetitive write at 2 because it is the same as at 1: ta97f <- 0n0/0x00u8 
# In IlFunctionId("readline"), optimizing round #1
# In IlFunctionId("shiftright1"), optimizing round #0
# In IlFunctionId("shiftright3"), optimizing round #0
# In IlFunctionId("stack_get"), optimizing round #0
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_get"), optimizing round #1
# In IlFunctionId("stack_get"), optimizing round #2
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_get"), optimizing round #3
# In IlFunctionId("stack_get"), optimizing round #4
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_get"), optimizing round #5
# In IlFunctionId("stack_get"), optimizing round #6
# In IlFunctionId("stack_get"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stack_get"), optimizing round #7
# In IlFunctionId("stack_get"), optimizing round #8
# In IlFunctionId("stack_init"), optimizing round #0
# In IlFunctionId("stack_init"), `s` is never written to, but is copied to `t4bb9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4bb9 <- s U32
# In IlFunctionId("stack_init"), optimizing round #1
# In IlFunctionId("stack_init"), optimizing round #2
# In IlFunctionId("stack_pop"), optimizing round #0
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_pop"), optimizing round #1
# In IlFunctionId("stack_pop"), optimizing round #2
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_pop"), optimizing round #3
# In IlFunctionId("stack_pop"), optimizing round #4
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_pop"), optimizing round #5
# In IlFunctionId("stack_pop"), optimizing round #6
# In IlFunctionId("stack_push"), optimizing round #0
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_push"), optimizing round #1
# In IlFunctionId("stack_push"), optimizing round #2
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_push"), optimizing round #3
# In IlFunctionId("stack_push"), optimizing round #4
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_push"), optimizing round #5
# In IlFunctionId("stack_push"), optimizing round #6
# In IlFunctionId("stack_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# In IlFunctionId("stack_push"), optimizing round #7
# In IlFunctionId("stack_push"), optimizing round #8
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987228/0x000f105cu32)` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987144/0x000f1008u32)` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `tfff6`.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), in block from 0..=7, removing repetitive write at 4 because it is the same as at 1: ta11a <- 0n1/0x01u8 
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("test_add_U64"), optimizing round #0
# In IlFunctionId("test_add_U64"), resolved the constant val `Number(0n987740/0x000f125cu32)` for var `tcc7b`.
# In IlFunctionId("test_add_U64"), optimizing round #1
# In IlFunctionId("test_add_U64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_add_U64"), optimizing round #2
# In IlFunctionId("test_add_U64"), optimizing round #3
# In IlFunctionId("test_add_U64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("test_add_U64"), optimizing round #4
# In IlFunctionId("test_add_U64"), optimizing round #5
# In IlFunctionId("test_delay"), optimizing round #0
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# In IlFunctionId("test_delay"), optimizing round #1
# In IlFunctionId("test_delay"), optimizing round #2
# In IlFunctionId("test_echoline"), optimizing round #0
# In IlFunctionId("test_mul32_64"), optimizing round #0
# In IlFunctionId("test_mul32_64"), resolved the constant val `Number(0n987748/0x000f1264u32)` for var `tcc7b`.
# In IlFunctionId("test_mul32_64"), optimizing round #1
# In IlFunctionId("test_mul32_64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_mul32_64"), optimizing round #2
# In IlFunctionId("test_mul32_64"), optimizing round #3
# In IlFunctionId("test_mul32_64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("test_mul32_64"), optimizing round #4
# In IlFunctionId("test_mul32_64"), optimizing round #5
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_s`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_Keyboard_poll_queue_push_37_t4d4f`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_Keyboard_poll_queue_push_37_tc1ff`.
# In IlFunctionId("Keyboard_poll"), optimizing round #0
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("Keyboard_poll"), optimizing round #1
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #2
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #3
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("Keyboard_poll"), optimizing round #4
# In IlFunctionId("Keyboard_poll"), optimizing round #5
# In IlFunctionId("Keyboard_poll"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Keyboard.j':(31,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("Keyboard_poll"), optimizing round #6
# In IlFunctionId("Keyboard_poll"), optimizing round #7
# In IlFunctionId("Keyboard_poll"), removing no-op goto instruction #48: goto inline_Keyboard_poll_queue_push_37_function_end_queue_push
# In IlFunctionId("Keyboard_poll"), optimizing round #8
# In IlFunctionId("Keyboard_poll"), in block from 23..=49, removing repetitive write at 43 because it is the same as at 38: inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("Keyboard_poll"), in block from 23..=49, removing repetitive write at 44 because it is the same as at 43: inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("Keyboard_poll"), optimizing round #9
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n69/0x45u8)` for var `inline_RpnCalc_handle_putc_15_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_16_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_RpnCalc_handle_putc_17_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_18_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_19_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_20_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_21_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_22_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n58/0x3au8)` for var `inline_RpnCalc_handle_putc_23_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_RpnCalc_handle_putc_24_tac13`.
# In IlFunctionId("RpnCalc_handle"), optimizing round #0
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), optimizing round #1
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_15_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_15_c <- t7ec4 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #2
# In IlFunctionId("RpnCalc_handle"), optimizing round #3
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_16_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_16_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #4
# In IlFunctionId("RpnCalc_handle"), optimizing round #5
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_17_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_17_c <- tf36 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #6
# In IlFunctionId("RpnCalc_handle"), optimizing round #7
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_18_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_18_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #8
# In IlFunctionId("RpnCalc_handle"), optimizing round #9
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_19_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_19_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #10
# In IlFunctionId("RpnCalc_handle"), optimizing round #11
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_20_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_20_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #12
# In IlFunctionId("RpnCalc_handle"), optimizing round #13
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_21_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_21_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #14
# In IlFunctionId("RpnCalc_handle"), optimizing round #15
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_22_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_22_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #16
# In IlFunctionId("RpnCalc_handle"), optimizing round #17
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_23_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_23_c <- t506b U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #18
# In IlFunctionId("RpnCalc_handle"), optimizing round #19
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_24_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_24_c <- t25ee U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #20
# In IlFunctionId("RpnCalc_handle"), optimizing round #21
# In IlFunctionId("RpnCalc_handle"), var `t506b` is written to, but never read. Removing the instruction that writes to it: (t506b <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] })", "Number(0n58/0x3au8)", "Number(0n58/0x3au8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #22
# In IlFunctionId("RpnCalc_handle"), optimizing round #23
# In IlFunctionId("RpnCalc_handle"), var `t7ec4` is written to, but never read. Removing the instruction that writes to it: (t7ec4 <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] })", "Number(0n69/0x45u8)", "Number(0n69/0x45u8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #24
# In IlFunctionId("RpnCalc_handle"), optimizing round #25
# In IlFunctionId("RpnCalc_handle"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #26
# In IlFunctionId("RpnCalc_handle"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("RpnCalc_handle"), optimizing round #27
# In IlFunctionId("RpnCalc_handle"), optimizing round #28
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #811: goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #772: goto inline_RpnCalc_handle_putc_24_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #756: goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #745: goto inline_RpnCalc_handle_putc_23_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #717: goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #712: goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #698: goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #685: goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #651: goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #638: goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #596: goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #577: goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #552: goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #533: goto inline_RpnCalc_handle_putc_22_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #507: goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #488: goto inline_RpnCalc_handle_putc_21_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #471: goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #456: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #408: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #350: goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #292: goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #273: goto inline_RpnCalc_handle_putc_20_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #247: goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #228: goto inline_RpnCalc_handle_putc_19_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #201: goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #176: goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #149: goto inline_RpnCalc_handle_putc_18_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #134: goto inline_RpnCalc_handle_putc_17_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #120: goto inline_RpnCalc_handle_putc_16_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #106: goto inline_RpnCalc_handle_putc_15_function_end_putc
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #82: goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# In IlFunctionId("RpnCalc_handle"), removing no-op goto instruction #69: goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# In IlFunctionId("RpnCalc_handle"), optimizing round #29
# In IlFunctionId("RpnCalc_handle"), in block from 35..=78, removing repetitive write at 76 because it is the same as at 48: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 282..=458, removing repetitive write at 310 because it is the same as at 308: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 282..=458, removing repetitive write at 332 because it is the same as at 310: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 282..=458, removing repetitive write at 367 because it is the same as at 365: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 282..=458, removing repetitive write at 389 because it is the same as at 367: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 282..=458, removing repetitive write at 414 because it is the same as at 412: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 282..=458, removing repetitive write at 436 because it is the same as at 414: inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 282..=458, removing repetitive write at 450 because it is the same as at 448: inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 584..=625, removing repetitive write at 623 because it is the same as at 595: inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 629..=670, removing repetitive write at 668 because it is the same as at 640: inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), optimizing round #30
# In IlFunctionId("RpnCalc_handle"), at #679, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #678, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #73, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #612, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #611, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #588, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #615, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #587, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #656, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("RpnCalc_handle"), at #655, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), at #632, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #631, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #308, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #309, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #330, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #307, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #363, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #364, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #385, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #362, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #408, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #409, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #430, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #407, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #442, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #443, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# In IlFunctionId("RpnCalc_handle"), at #441, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #96, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #95, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #107, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 -> inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #106, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #108, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #120, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 -> inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #119, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #122, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #118, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #125, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #117, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# In IlFunctionId("RpnCalc_handle"), at #124, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# In IlFunctionId("RpnCalc_handle"), at #134, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 -> inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #133, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #136, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #135, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #210, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 -> inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #209, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #212, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #211, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #208, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #215, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #207, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #214, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #253, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 -> inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #252, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #255, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #254, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #251, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #258, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #250, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #257, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #455, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 -> inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #454, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #457, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #456, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #453, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #460, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #452, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #459, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #498, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 -> inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #497, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #500, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #499, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #496, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #503, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #495, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #502, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #698, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 -> inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #697, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #700, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #699, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #723, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 -> inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# In IlFunctionId("RpnCalc_handle"), at #722, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("RpnCalc_handle"), at #725, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2'
# In IlFunctionId("RpnCalc_handle"), at #724, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #721, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #728, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# In IlFunctionId("RpnCalc_handle"), at #720, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #727, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #580, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# In IlFunctionId("RpnCalc_handle"), at #130, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #206, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #249, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #451, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #494, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #579, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #719, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'
# In IlFunctionId("RpnCalc_handle"), at #151, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'
# In IlFunctionId("RpnCalc_handle"), at #575, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f)
# In IlFunctionId("RpnCalc_handle"), at #40, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #150, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), at #574, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), optimizing round #31
# In IlFunctionId("RpnCalc_handle"), optimizing round #32
# In IlFunctionId("RpnCalc_handle"), in block from 35..=77, removing repetitive write at 48 because it is the same as at 40: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 126..=132, removing repetitive write at 131 because it is the same as at 130: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 205..=208, removing repetitive write at 207 because it is the same as at 206: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 248..=251, removing repetitive write at 250 because it is the same as at 249: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 281..=450, removing repetitive write at 362 because it is the same as at 307: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 281..=450, removing repetitive write at 407 because it is the same as at 362: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 281..=450, removing repetitive write at 441 because it is the same as at 407: inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_handle"), in block from 450..=453, removing repetitive write at 452 because it is the same as at 451: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 493..=496, removing repetitive write at 495 because it is the same as at 494: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), in block from 664..=681, removing repetitive write at 678 because it is the same as at 674: inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("RpnCalc_handle"), in block from 718..=721, removing repetitive write at 720 because it is the same as at 719: inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# In IlFunctionId("RpnCalc_handle"), optimizing round #33
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff`.
# In IlFunctionId("RpnCalc_run"), optimizing round #0
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("RpnCalc_run"), optimizing round #1
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #2
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #3
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #4
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #5
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #6
# In IlFunctionId("RpnCalc_run"), optimizing round #7
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #8
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(0n1/0x01u8)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #9
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("RpnCalc_run"), optimizing round #10
# In IlFunctionId("RpnCalc_run"), optimizing round #11
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_run"), optimizing round #12
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("RpnCalc_run"), optimizing round #13
# In IlFunctionId("RpnCalc_run"), optimizing round #14
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #72: goto inline_RpnCalc_run_getchar_39_function_end_getchar
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #66: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# In IlFunctionId("RpnCalc_run"), removing no-op goto instruction #28: goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# In IlFunctionId("RpnCalc_run"), optimizing round #15
# In IlFunctionId("RpnCalc_run"), in block from 10..=29, removing repetitive write at 23 because it is the same as at 18: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("RpnCalc_run"), in block from 10..=29, removing repetitive write at 24 because it is the same as at 23: inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("RpnCalc_run"), in block from 50..=66, removing repetitive write at 58 because it is the same as at 53: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 
# In IlFunctionId("RpnCalc_run"), in block from 50..=66, removing repetitive write at 59 because it is the same as at 58: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 
# In IlFunctionId("RpnCalc_run"), optimizing round #16
# In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
# In IlFunctionId("RpnCalc_run"), at #16, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 
# In IlFunctionId("RpnCalc_run"), at #19, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# In IlFunctionId("RpnCalc_run"), at #23, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# In IlFunctionId("RpnCalc_run"), at #25, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 -> mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8
# In IlFunctionId("RpnCalc_run"), at #18, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 
# In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
# In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
# In IlFunctionId("RpnCalc_run"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7'
# In IlFunctionId("RpnCalc_run"), at #7, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #12, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'
# In IlFunctionId("RpnCalc_run"), at #71, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'
# In IlFunctionId("RpnCalc_run"), at #73, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f)
# In IlFunctionId("RpnCalc_run"), at #1, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), at #70, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), optimizing round #17
# In IlFunctionId("RpnCalc_run"), optimizing round #18
# In IlFunctionId("RpnCalc_run"), in block from 0..=10, removing repetitive write at 7 because it is the same as at 1: inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# In IlFunctionId("RpnCalc_run"), optimizing round #19
# In IlFunctionId("div32"), removing no-op goto instruction #305: goto inline_div32_shiftright1_45_function_end_shiftright1
# In IlFunctionId("div32"), removing no-op goto instruction #260: goto inline_div32_shiftright1_44_function_end_shiftright1
# In IlFunctionId("div32"), removing no-op goto instruction #203: goto inline_div32_div16_43_function_end_div16
# In IlFunctionId("div32"), removing no-op goto instruction #142: goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# In IlFunctionId("div32"), removing no-op goto instruction #94: goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# In IlFunctionId("div32"), optimizing round #0
# In IlFunctionId("div32"), in block from 39..=148, removing repetitive write at 113 because it is the same as at 111: inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), in block from 39..=148, removing repetitive write at 135 because it is the same as at 113: inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), optimizing round #1
# In IlFunctionId("div32"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11'
# In IlFunctionId("div32"), at #152, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14'
# In IlFunctionId("div32"), at #141, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), at #151, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), at #7, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). return Some(t60ec) -> return Some(inline_div32_div16_43_t60ec)
# In IlFunctionId("div32"), at #310, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'
# In IlFunctionId("div32"), at #5, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("div32"), at #309, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("div32"), optimizing round #2
# In IlFunctionId("div32"), optimizing round #3
# In IlFunctionId("div32"), in block from 39..=146, removing repetitive write at 141 because it is the same as at 111: inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# In IlFunctionId("div32"), optimizing round #4
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `inline_lcd_draw_char_lcd_logical_to_physical_3_i` - which is also never modified. Replacing refs to latter with the former and deleting the copy: inline_lcd_draw_char_lcd_logical_to_physical_3_i <- i U8
# In IlFunctionId("lcd_draw_char"), optimizing round #0
# In IlFunctionId("lcd_draw_char"), optimizing round #1
# In IlFunctionId("lcd_draw_char"), removing no-op goto instruction #14: goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# In IlFunctionId("lcd_draw_char"), optimizing round #2
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987664/0x000f1210u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987728/0x000f1250u32)` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957`.
# In IlFunctionId("main"), resolved the constant val `Number(0n987732/0x000f1254u32)` for var `inline_main_RpnCalc_init_51_t6e8e`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n82/0x52u8)` for var `inline_main_putc_25_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n80/0x50u8)` for var `inline_main_putc_26_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n78/0x4eu8)` for var `inline_main_putc_27_tac13`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_c`.
# In IlFunctionId("main"), resolved the constant val `Number(0n10/0x0au8)` for var `inline_main_putc_28_tac13`.
# In IlFunctionId("main"), optimizing round #0
# In IlFunctionId("main"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), optimizing round #1
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 , Some('programs/app/rpn.j':(12,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), optimizing round #2
# In IlFunctionId("main"), optimizing round #3
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 , Some('/lutcomp/programs/lib/rpnlib.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987664/0x000f1210u32 `."] })
# In IlFunctionId("main"), optimizing round #4
# In IlFunctionId("main"), optimizing round #5
# In IlFunctionId("main"), var `inline_main_putc_25_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_25_c <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_25_c <- tf36 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("main"), optimizing round #6
# In IlFunctionId("main"), optimizing round #7
# In IlFunctionId("main"), var `inline_main_putc_26_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_26_c <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_26_c <- td749 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `."] })
# In IlFunctionId("main"), optimizing round #8
# In IlFunctionId("main"), optimizing round #9
# In IlFunctionId("main"), var `inline_main_putc_27_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_27_c <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_27_c <- t6adf U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `."] })
# In IlFunctionId("main"), optimizing round #10
# In IlFunctionId("main"), optimizing round #11
# In IlFunctionId("main"), var `inline_main_putc_28_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_28_c <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_28_c <- t25ee U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("main"), optimizing round #12
# In IlFunctionId("main"), optimizing round #13
# In IlFunctionId("main"), var `t25ee` is written to, but never read. Removing the instruction that writes to it: (t25ee <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] })", "Number(0n10/0x0au8)", "Number(0n10/0x0au8)"] })
# In IlFunctionId("main"), optimizing round #14
# In IlFunctionId("main"), optimizing round #15
# In IlFunctionId("main"), var `t6adf` is written to, but never read. Removing the instruction that writes to it: (t6adf <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n78/0x4eu8)] })", "Number(0n78/0x4eu8)", "Number(0n78/0x4eu8)"] })
# In IlFunctionId("main"), optimizing round #16
# In IlFunctionId("main"), optimizing round #17
# In IlFunctionId("main"), var `td749` is written to, but never read. Removing the instruction that writes to it: (td749 <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n80/0x50u8)] })", "Number(0n80/0x50u8)", "Number(0n80/0x50u8)"] })
# In IlFunctionId("main"), optimizing round #18
# In IlFunctionId("main"), optimizing round #19
# In IlFunctionId("main"), var `tf36` is written to, but never read. Removing the instruction that writes to it: (tf36 <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] })", "Number(0n82/0x52u8)", "Number(0n82/0x52u8)"] })
# In IlFunctionId("main"), optimizing round #20
# In IlFunctionId("main"), optimizing round #21
# In IlFunctionId("main"), removing no-op goto instruction #66: goto inline_main_putc_28_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #52: goto inline_main_putc_27_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #38: goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# In IlFunctionId("main"), removing no-op goto instruction #33: goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# In IlFunctionId("main"), removing no-op goto instruction #27: goto inline_main_putc_26_function_end_putc
# In IlFunctionId("main"), removing no-op goto instruction #13: goto inline_main_putc_25_function_end_putc
# In IlFunctionId("main"), optimizing round #22
# In IlFunctionId("main"), at #34, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
# In IlFunctionId("main"), at #33, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  -> inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("main"), at #17, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 -> inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8
# In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("main"), at #19, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2'
# In IlFunctionId("main"), at #18, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_26_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #39, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 -> inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8
# In IlFunctionId("main"), at #38, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("main"), at #41, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2'
# In IlFunctionId("main"), at #40, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_27_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), at #52, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 -> inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8
# In IlFunctionId("main"), at #51, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# In IlFunctionId("main"), at #54, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2'
# In IlFunctionId("main"), at #53, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_28_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# In IlFunctionId("main"), optimizing round #23
# In IlFunctionId("main"), optimizing round #24
# In IlFunctionId("main"), in block from 23..=37, removing repetitive write at 33 because it is the same as at 29: inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# In IlFunctionId("main"), optimizing round #25
# In IlFunctionId("mul32_64"), removing no-op goto instruction #318: goto inline_mul32_64_add_U64_1_function_end_add_U64
# In IlFunctionId("mul32_64"), removing no-op goto instruction #262: goto inline_mul32_64_mul16_32_11_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #214: goto inline_mul32_64_add_U64_0_function_end_add_U64
# In IlFunctionId("mul32_64"), removing no-op goto instruction #158: goto inline_mul32_64_mul16_32_10_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #107: goto inline_mul32_64_mul16_32_9_function_end_mul16_32
# In IlFunctionId("mul32_64"), removing no-op goto instruction #57: goto inline_mul32_64_mul16_32_8_function_end_mul16_32
# In IlFunctionId("mul32_64"), optimizing round #0
# In IlFunctionId("mul32_64"), in block from 0..=208, removing repetitive write at 128 because it is the same as at 126: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), in block from 0..=208, removing repetitive write at 150 because it is the same as at 128: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), in block from 0..=208, removing repetitive write at 29 because it is the same as at 27: inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), in block from 0..=208, removing repetitive write at 51 because it is the same as at 29: inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), in block from 0..=208, removing repetitive write at 78 because it is the same as at 76: inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), in block from 0..=208, removing repetitive write at 100 because it is the same as at 78: inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), in block from 208..=310, removing repetitive write at 230 because it is the same as at 228: inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), in block from 208..=310, removing repetitive write at 252 because it is the same as at 230: inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), optimizing round #1
# In IlFunctionId("mul32_64"), at #223, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #224, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #245, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #222, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), at #28, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #29, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #50, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #27, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), at #75, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #76, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #97, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# In IlFunctionId("mul32_64"), at #74, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), optimizing round #2
# In IlFunctionId("mul32_64"), optimizing round #3
# In IlFunctionId("mul32_64"), in block from 0..=202, removing repetitive write at 74 because it is the same as at 27: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), in block from 0..=202, removing repetitive write at 122 because it is the same as at 74: inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# In IlFunctionId("mul32_64"), optimizing round #4
# In IlFunctionId("print_dec32"), removing no-op goto instruction #100: goto inline_print_dec32_putc_29_function_end_putc
# In IlFunctionId("print_dec32"), removing no-op goto instruction #82: goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# In IlFunctionId("print_dec32"), removing no-op goto instruction #62: goto inline_print_dec32_div32_by10_47_function_end_div32_by10
# In IlFunctionId("print_dec32"), removing no-op goto instruction #59: goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# In IlFunctionId("print_dec32"), optimizing round #0
# In IlFunctionId("print_dec8"), removing no-op goto instruction #30: goto inline_print_dec8_putc_30_function_end_putc
# In IlFunctionId("print_dec8"), optimizing round #0
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_s`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987392/0x000f1100u32)` for var `inline_stdio_init_queue_init_35_t4d4f`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987648/0x000f1200u32)` for var `inline_stdio_init_queue_init_35_tb702`.
# In IlFunctionId("stdio_init"), resolved the constant val `Number(0n987652/0x000f1204u32)` for var `inline_stdio_init_queue_init_35_tc1ff`.
# In IlFunctionId("stdio_init"), optimizing round #0
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# In IlFunctionId("stdio_init"), optimizing round #1
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_s` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #2
# In IlFunctionId("stdio_init"), optimizing round #3
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(9,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n260/0x00000104u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #4
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/Queue.j':(8,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(0n0/0x00u8) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n256/0x00000100u32))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(U32), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987392/0x000f1100u32 `."] })
# In IlFunctionId("stdio_init"), optimizing round #5
# In IlFunctionId("stdio_init"), optimizing round #6
# In IlFunctionId("stdio_init"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987392/0x000f1100u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(0n987392/0x000f1100u32)"] })
# In IlFunctionId("stdio_init"), optimizing round #7
# In IlFunctionId("stdio_init"), optimizing round #8
# In IlFunctionId("stdio_init"), removing no-op goto instruction #11: goto inline_stdio_init_queue_init_35_function_end_queue_init
# In IlFunctionId("stdio_init"), optimizing round #9
# In IlFunctionId("stdio_init"), in block from 0..=12, removing repetitive write at 9 because it is the same as at 6: inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8 
# In IlFunctionId("stdio_init"), optimizing round #10
# IlFunctionId("KeyBoard_init")()
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  return None # None
#  :function_end_KeyBoard_init # None
#  Unreachable # None

# IlFunctionId("Keyboard_poll")()
#  Some(t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_true_0_1 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  return None # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  goto Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_else_0_2 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  Some(code) <= call io_read2() # Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
#  tf68c <- code U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  t528d U32 <- tf68c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  index <- t528d Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t379c <- mem[td45b] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_true_0_4 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t674 <- td18e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t23a <- t4c8b Add Var(t674) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[t23a] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  goto Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_else_0_5 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tb62e <- t4c8b Add Var(td18e) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[tb62e] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_true_0_7 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  tac13 <- c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_n <- tac13 U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  :inline_Keyboard_poll_queue_push_37_function_end_queue_push # None
#  goto Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_else_0_8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ted94 <- t4c8b Add Var(te5cf) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t2ca9 <- mem[ted94] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_10 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_13 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_14 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_11 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t6cd9 <- t4c8b Add Var(t5e63) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t7b09 <- mem[t6cd9] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_true_0_16 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- ta11a U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  goto Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_else_0_17 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- ta97f U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  return None # None
#  :function_end_Keyboard_poll # None
#  Unreachable # None

# IlFunctionId("RpnCalc_handle")(c,ch,)
#  a <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#  b <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_1_3 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_1_4 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_2_5 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_2_6 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_3_7 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_3_8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_4_9 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_4_10 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_true_0_12 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_else_0_13 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  tbf93 <- c Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#  stack_count_usize <- mem[tbf93] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#  stack_count <- stack_count_usize[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_true_0_15 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_function_end_putc # None
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_function_end_putc # None
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_function_end_putc # None
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_function_end_putc # None
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  goto RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_else_0_16 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_true_0_18 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop # None
#  goto RpnCalc_handle_if_end_17 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_else_0_19 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_end_17 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_true_0_21 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop # None
#  goto RpnCalc_handle_if_end_20 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_else_0_22 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_end_20 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tc333 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_0_24 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  sum <- tace9 Add Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t670d,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_n <- t670d U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_54_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_0_25 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8f63 <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_1_26 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  diff <- tace9 Subtract Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t17ee,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_55_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_1_27 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t622 <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_2_28 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(32,5))
#  inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
#  inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
#  inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
#  inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(36,5))
#  inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
#  inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
#  inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
#  inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(43,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(44,5))
#  inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 # None
#  t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t2754,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_56_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_2_29 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t13c5 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_3_30 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  Some(quotient) <= call div32(tace9,t8792,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t1ba9,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_57_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_3_31 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tcdcd <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_4_32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_58_function_end_stack_push # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_stack_push_59_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_4_33 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdf6e <- 0n113/0x71u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_5_34 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_5_35 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_6_36 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_6_37 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_7_38 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_7_39 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t47ec <- 0n99/0x63u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_8_40 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_8_41 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tcc42 <- 0n100/0x64u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_9_42 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_body_45 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec8(td0f3,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t4376 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  :inline_RpnCalc_handle_stack_get_48_function_end_stack_get # None
#  None <= call print_dec32(tb336,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_function_end_putc # None
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_end_46 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_9_43 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  teed8 <- 0n57/0x39u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_10_47 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcb0 <- 0n48/0x30u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_0_50 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  mem[tfdb7] <- ta11a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 # None
#  mem[t6e8e] <- tadd U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t9dae <- tdcd9 Subtract Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdc11 U32 <- t9dae U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tbdb5 <- td60 Add Var(tdc11) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  mem[t6e8e] <- tbdb5 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_49 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_0_51 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_end_49 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_10_48 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#  return Some(ta11a) # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#  :function_end_RpnCalc_handle # None
#  Unreachable # None

# IlFunctionId("RpnCalc_run")(calc,)
#  :RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_while_body_1 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(19,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_body_1 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tb816 <- ttyin # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push # None
#  goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  None <= call Keyboard_poll() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_else_1_7 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # None
#  goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_end_2 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  :inline_RpnCalc_run_getchar_39_function_end_getchar # None
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  Some(result) <= call RpnCalc_handle(calc,tdcd9,) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  t57fd <- result U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_true_0_4 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  goto RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_else_0_5 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  goto RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_while_end_2 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :function_end_RpnCalc_run # None
#  Unreachable # None

# IlFunctionId("delay")(x,)
#  :delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  :delay_while_body_1 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  x <- tad57 Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  goto delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  :delay_while_end_2 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  return None # None
#  :function_end_delay # None
#  Unreachable # None

# IlFunctionId("div32")(a,b,)
#  __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(67,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(67,5))
#  return Some(inline_div32_div16_43_t60ec) # Some('/lutcomp/programs/lib/div.j':(67,5))
#  goto div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_else_0_2 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  t4917 <- 0n65536/0x00010000u32  # Some('/lutcomp/programs/lib/div.j':(71,5))
#  if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_a <- t8792 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_b <- tace9 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(21,5))
#  te81f <- inline_div32_div16_43_t60ec U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  goto inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_else_0_2 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/div.j':(25,5))
#  if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  te81f <- inline_div32_div16_43_tb0ef U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  goto inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_else_0_5 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(29,5))
#  inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  # Some('/lutcomp/programs/lib/div.j':(30,5))
#  :inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_while_body_7 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 # None
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 # None
#  inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_11 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_14 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_17 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_20 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_22 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_23 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_while_end_8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  te81f <- inline_div32_div16_43_t1506 U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  :inline_div32_div16_43_function_end_div16 # None
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(71,5))
#  return Some(te81f) # Some('/lutcomp/programs/lib/div.j':(71,5))
#  goto div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_else_0_5 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(75,5))
#  hi <- 0xffffffffu32  # Some('/lutcomp/programs/lib/div.j':(76,5))
#  :div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_while_body_7 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_44_a <- t1506 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  t9599 <- inline_div32_shiftright1_44_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_shiftright1_44_function_end_shiftright1 # None
#  t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_45_a <- t5508 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  t3803 <- inline_div32_shiftright1_45_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_shiftright1_45_function_end_shiftright1 # None
#  mid <- t9599 Add Var(t3803) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tb608 <- te825 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  None <= call mul32_64(tfd7e,tace9,tb608,) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tb973 <- mem[t3f2a] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_11 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  x <- mem[te546] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_14 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_17 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  r <- t8792 Subtract Var(tad57) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  taee0 <- r U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_20 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  lo <- tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_while_end_8 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(108,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(108,5))
#  return Some(t1506) # Some('/lutcomp/programs/lib/div.j':(108,5))
#  :function_end_div32 # None
#  Unreachable # None

# IlFunctionId("io_read2")()
#  Unreachable # None
#  :function_end_io_read2 # None
#  Unreachable # None

# IlFunctionId("io_ready_to_read")()
#  Unreachable # None
#  :function_end_io_ready_to_read # None
#  Unreachable # None

# IlFunctionId("io_write0")(data,)
#  Unreachable # None
#  return None # None
#  :function_end_io_write0 # None
#  Unreachable # None

# IlFunctionId("io_write1")(data,)
#  Unreachable # None
#  return None # None
#  :function_end_io_write1 # None
#  Unreachable # None

# IlFunctionId("lcd_draw_char")(i,ch,)
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(9,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(9,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical # None
#  t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t1730 <- t136d ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  None <= call io_write1(t2176,) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  None <= call io_write1(t791e,) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(19,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(19,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  None <= call io_write1(t3e8f,) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  None <= call io_write1(tb5dc,) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(23,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(23,5))
#  return None # None
#  :function_end_lcd_draw_char # None
#  Unreachable # None

# IlFunctionId("lcd_init")()
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  mem[t0] <- ta97f U8 # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(72,5))
#  :lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  :lcd_init_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  goto lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  :lcd_init_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(78,5))
#  None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(78,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(79,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(79,5))
#  t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(80,5))
#  None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(80,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(81,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(81,5))
#  t3d69 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(82,5))
#  None <= call io_write1(t3d69,) # Some('/lutcomp/programs/lib/lcd.j':(82,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(83,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(83,5))
#  t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(85,5))
#  None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(85,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(86,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(86,5))
#  t9f48 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(88,5))
#  None <= call io_write1(t9f48,) # Some('/lutcomp/programs/lib/lcd.j':(88,5))
#  t477 <- 0n8/0x08u8  # Some('/lutcomp/programs/lib/lcd.j':(89,5))
#  None <= call io_write1(t477,) # Some('/lutcomp/programs/lib/lcd.j':(89,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(90,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(90,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(92,5))
#  None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(92,5))
#  tec13 <- 0n12/0x0cu8  # Some('/lutcomp/programs/lib/lcd.j':(93,5))
#  None <= call io_write1(tec13,) # Some('/lutcomp/programs/lib/lcd.j':(93,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(94,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(94,5))
#  ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(96,5))
#  None <= call io_write1(ta97f,) # Some('/lutcomp/programs/lib/lcd.j':(96,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/lcd.j':(97,5))
#  None <= call io_write1(ta11a,) # Some('/lutcomp/programs/lib/lcd.j':(97,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(98,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(98,5))
#  return None # None
#  :function_end_lcd_init # None
#  Unreachable # None

# IlFunctionId("lcd_putc")(ch,)
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_true_0_1 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t78f0 <- t5dda Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tf5a3 <- t78f0 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  next <- tf5a3 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  ta5ff <- next U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_body_4 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t164d] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  goto lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_end_5 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  goto lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_else_0_2 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t164d <- tad4e Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t164d] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  None <= call lcd_draw_char(t5dda,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tefac <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t0] <- tefac U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_true_0_7 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  None <= call lcd_scroll_up() # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  goto lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_else_0_8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  return None # None
#  :function_end_lcd_putc # None
#  Unreachable # None

# IlFunctionId("lcd_scroll_up")()
#  t0 <- 0n987145/0x000f1009u32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t81b5 <- t5dda Subtract Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  mem[t0] <- t81b5 U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(29,5))
#  :lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9586 <- 0n60/0x3cu8  # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tfd89 <- td0f3 Add Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t760c U32 <- tfd89 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t54b2 <- t760c Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  ch <- mem[t54b2] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_true_0_4 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  mem[t9e70] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  None <= call lcd_draw_char(td0f3,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  goto lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_else_0_5 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  goto lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_predicate_6 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td749 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_while_body_7 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  ta094 <- mem[t9e70] U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tdf3b <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_true_0_10 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  mem[t9e70] <- tdf3b U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  None <= call lcd_draw_char(td0f3,tdf3b,) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  goto lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_else_0_11 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  goto lcd_scroll_up_while_predicate_6 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_while_end_8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  return None # None
#  :function_end_lcd_scroll_up # None
#  Unreachable # None

# IlFunctionId("main")()
#  None <= call stdio_init() # Some('programs/app/rpn.j':(4,5))
#  inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_function_end_putc # None
#  inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_function_end_putc # None
#  tca8 <- 0n987664/0x000f1210u32  # Some('programs/app/rpn.j':(12,5))
#  inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  :inline_main_RpnCalc_init_51_function_end_RpnCalc_init # None
#  inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_function_end_putc # None
#  inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_function_end_putc # None
#  tca8 <- 0n987664/0x000f1210u32  # Some('programs/app/rpn.j':(17,5))
#  Some(t2a99) <= call RpnCalc_run(tca8,) # Some('programs/app/rpn.j':(17,5))
#  return Some(t2a99) # Some('programs/app/rpn.j':(17,5))
#  :function_end_main # None
#  Unreachable # None

# IlFunctionId("mul32_64")(a,b,c,)
#  __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
#  a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(58,5))
#  t94df <- a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
#  a_hi[0x01..0x02] <- t94df U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
#  t3b02 <- a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
#  a_hi[0x00..0x01] <- t3b02 U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
#  b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(62,5))
#  ta5f7 <- b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
#  b_hi[0x01..0x02] <- ta5f7 U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
#  t82cc <- b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
#  b_hi[0x00..0x01] <- t82cc U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  t720d <- inline_mul32_64_mul16_32_8_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_8_function_end_mul16_32 # None
#  mem[c] <- t720d U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  t1335 <- c Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_9_function_end_mul16_32 # None
#  mem[t1335] <- t5a04 U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  temp_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(71,5))
#  temp_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(72,5))
#  t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  temp <- inline_mul32_64_mul16_32_10_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_10_function_end_mul16_32 # None
#  t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
#  temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
#  t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
#  temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
#  t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
#  temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
#  t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
#  temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_function_end_add_U64 # None
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  temp <- inline_mul32_64_mul16_32_11_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_11_function_end_mul16_32 # None
#  t9186 <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
#  temp_lo[0x02..0x03] <- t9186 U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
#  t3d83 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
#  temp_lo[0x03..0x04] <- t3d83 U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
#  t3970 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
#  temp_hi[0x00..0x01] <- t3970 U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
#  t3b80 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
#  temp_hi[0x01..0x02] <- t3b80 U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_function_end_add_U64 # None
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # None
#  return None # None
#  :function_end_mul32_64 # None
#  Unreachable # None

# IlFunctionId("print_dec32")(a,)
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  None <= call print_dec8(t3404,) # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  return None # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  goto print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#  inline_print_dec32_div32_by10_47_a <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#  inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  # Some('/lutcomp/programs/lib/div.j':(130,5))
#  inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  # Some('/lutcomp/programs/lib/div.j':(130,5))
#  None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) # Some('/lutcomp/programs/lib/div.j':(130,5))
#  inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 # None
#  b <- inline_print_dec32_div32_by10_47_t45ae U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  :inline_print_dec32_div32_by10_47_function_end_div32_by10 # None
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#  None <= call print_dec32(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  inline_print_dec32_mul32_by10_14_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 # None
#  a <- t8792 Subtract Var(t86e2) # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  t3404 <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  t6f38 <- t3404 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  inline_print_dec32_putc_29_c <- t6f38 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_function_end_putc # None
#  return None # None
#  :function_end_print_dec32 # None
#  Unreachable # None

# IlFunctionId("print_dec8")(a,)
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t25ee <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  b <- t8792 Divide Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  None <= call print_dec8(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tf5e0 <- tace9 Multiply Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  a <- t8792 Subtract Var(tf5e0) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  goto print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  t5673 <- t8792 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  inline_print_dec8_putc_30_c <- t5673 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_function_end_putc # None
#  return None # None
#  :function_end_print_dec8 # None
#  Unreachable # None

# IlFunctionId("stdio_init")()
#  t0 <- 0n987228/0x000f105cu32  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  ta11a <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  mem[t0] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  t1 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  mem[t1] <- ta11a U8 # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  :inline_stdio_init_queue_init_35_function_end_queue_init # None
#  None <= call lcd_init() # Some('/lutcomp/programs/lib/stdio.j':(14,5))
#  None <= call KeyBoard_init() # Some('/lutcomp/programs/lib/stdio.j':(15,5))
#  return None # None
#  :function_end_stdio_init # None
#  Unreachable # None


# ImageBaseAddress=0x00080400
# entry
# 80400 Init []
#       Initialzing flags and internal regs.
00 

# 80401 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 80407 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 8040d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 04 08 00 

# 80413 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 63 24 08 

# 80417 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 8041d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([16]) Number(0n0/0x00u8)
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([20, 21, 22, 23]) Number(0n987140/0x000f1004u32)
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 80827 LoadImm32 [Register(0x14), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 14 00 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8082d LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 10 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 80830 Store8 [Register(0x10), Register(0x14)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 80833 LoadImm32 [Register(0x14), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 14 04 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80839 LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 10 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 8083c Store8 [Register(0x10), Register(0x14)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 10 14 

# return None None
# Return { value: None }
# 8083f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 80841 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :Keyboard_poll
# Ret None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(U32) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35]) Number(0n987392/0x000f1100u32)
# Var inline_Keyboard_poll_queue_push_37_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([36])
# Var inline_Keyboard_poll_queue_push_37_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_37_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([44, 45, 46, 47]) Number(0n987652/0x000f1204u32)
# Var inline_Keyboard_poll_queue_push_37_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([24])
# Var t23a (t23a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([48, 49, 50, 51])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }) Reg(U32) Some([48, 49, 50, 51])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) Reg(U32) Some([28, 29, 30, 31])
# Var t5ea1 (t5ea1 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))) Reg(U8) Some([24])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([52])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([24]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([36]) Number(0n0/0x00u8)
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb62e (tb62e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([48, 49, 50, 51])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987136/0x000f1000u32)
# Var tdaa (tdaa Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([32, 33, 34, 35]) Number(0n987140/0x000f1004u32)
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }) Reg(U32) Some([48, 49, 50, 51])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Some(t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 80846 IoReadyToRead [Register(0x18)]
#       ReadyToRead
79 18 

# t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
# 80848 AndImm8 [Register(0x18), Constant8(0x04=4)]
#       t5ea1 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8))
18 18 04 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8084b LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
# 8084e Cmp8 [Register(0x18), Register(0x24)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
15 18 24 

# 80851 JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
72 59 08 08 

# 80855 JmpImm [Label24(Keyboard_poll_if_else_0_2)]
#       if t5ea1 == ta97f then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }
70 5f 08 08 

# :Keyboard_poll_if_true_0_1 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n4/0x04u8)), right: Number(0n0/0x00u8) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 80859 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 8085b JmpImm [Label24(Keyboard_poll_if_end_0)]
#       goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
70 5f 08 08 

# :Keyboard_poll_if_else_0_2 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 8085f In2 [Register(0x18)]
#       IoRead2
62 18 

# tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\")) }\nArithmetic(Multiply, Number(0n4/0x00000004u32), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
# 80861 LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
20 30 00 00 00 00 

# 80867 Copy8 [Register(0x18), Register(0x30)]
#       t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("code") }
0b 18 30 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
# Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
# 8086a LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
20 00 04 00 00 00 

# 80870 Mul8_16 [Register(0x30), Register(0x00), Register(0x1c)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
11 30 00 1c 

# 80874 LoadImm8 [Register(0x1e), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1e 00 

# 80877 LoadImm8 [Register(0x1f), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code")) }
#       Arithmetic(Multiply, Number(0n4/0x00000004u32), Ident("code"))
04 1f 00 

# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 8087a LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "shift_held")
# 80880 Load8 [Register(0x20), Register(0x18)]
#       t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "shift_held")
05 20 18 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80883 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
# 80886 Cmp8 [Register(0x18), Register(0x24)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
15 18 24 

# 80889 JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }
72 a9 08 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != ta97f then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 8088d LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n1/0x00000001u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
# 80893 Copy32 [Register(0x1c), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
21 1c 20 

# 80896 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))
32 20 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 8089c ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
03 

# 8089d AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
30 30 20 30 

# 808a1 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
31 

# c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
# 808a2 Load8 [Register(0x30), Register(0x18)]
#       c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n1/0x00000001u32)))
05 30 18 

# goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 808a5 JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
70 b8 08 08 

# :Keyboard_poll_if_else_0_5 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 808a9 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 808af ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 808b0 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 30 1c 30 

# 808b4 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 808b5 Load8 [Register(0x30), Register(0x18)]
#       c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 30 18 

# :Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 808b8 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 808be Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 808c1 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 808c4 Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 808c7 JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 cf 08 08 

# 808cb JmpImm [Label24(Keyboard_poll_if_else_0_8)]
#       if t7ebd == ta97f then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
70 01 09 08 

# :Keyboard_poll_if_true_0_7 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
# 808cf LoadImm32 [Register(0x20), Constant32(0x000f1100=987392)]
#       inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987392/0x000f1100u32 `.
20 20 00 11 0f 00 

# inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
# 808d5 LoadImm32 [Register(0x2c), Constant32(0x000f1204=987652)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987652/0x000f1204u32 `.
20 2c 04 12 0f 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 808db Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 808de LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 28 00 00 00 00 

# 808e4 Copy8 [Register(0x24), Register(0x28)]
#       inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 24 28 

# inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# 808e7 ClearCarry []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
03 

# 808e8 AddCarry32_1 [Register(0x20), Register(0x28), Register(0x20)]
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
30 20 28 20 

# 808ec AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 808ed Store8 [Register(0x18), Register(0x20)]
#       mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 18 20 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# 808f0 Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 808f3 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 808f6 Add8NoCarryIn [Register(0x24), Register(0x00), Register(0x18)]
#       inline_Keyboard_poll_queue_push_37_tf3c4 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 24 00 18 

# mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# 808fa Store8 [Register(0x18), Register(0x2c)]
#       mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
06 18 2c 

# :inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# inline_Keyboard_poll_queue_push_37_function_end_queue_push
# goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 808fd JmpImm [Label24(Keyboard_poll_if_end_6)]
#       goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
70 01 09 08 

# :Keyboard_poll_if_else_0_8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_end_6
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Number(0n0/0x00u8)
# 80901 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80904 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
# 8090a Copy32 [Register(0x1c), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
21 1c 20 

# 8090d AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))
32 20 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 80913 ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
03 

# 80914 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
30 30 20 30 

# 80918 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
31 

# t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
# 80919 Load8 [Register(0x30), Register(0x18)]
#       t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32)))
05 30 18 

# if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
# 8091c Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
15 24 18 

# 8091f JzImm [Label24(Keyboard_poll_if_else_0_11)]
#       if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }
72 50 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n2/0x00000002u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n2/0x00000002u32))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 80923 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 80929 Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
# 8092c Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
15 34 24 

# 8092f JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }
72 40 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != ta97f then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(0n1/0x01u8) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(0n0/0x00u8) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 80933 LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
# 80939 Store8 [Register(0x24), Register(0x20)]
#       mem[td45b] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 8093c JmpImm [Label24(Keyboard_poll_if_end_12)]
#       goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 4c 09 08 

# :Keyboard_poll_if_else_0_14 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
# Number(0n987136/0x000f1000u32)
# 80940 LoadImm32 [Register(0x20), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Number(0n987136/0x000f1000u32) }
#       Number(0n987136/0x000f1000u32)
20 20 00 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 80946 LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
# 80949 Store8 [Register(0x18), Register(0x20)]
#       mem[td45b] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# :Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 8094c JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 50 09 08 

# :Keyboard_poll_if_else_0_11 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Number(0n0/0x00u8)
# 80950 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Number(0n0/0x00u8)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80953 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32)))\nArithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
# 80959 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))
32 1c 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 8095f ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
03 

# 80960 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
30 30 1c 30 

# 80964 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(U32), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
# 80965 Load8 [Register(0x30), Register(0x18)]
#       t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32)))
05 30 18 

# if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
# 80968 Cmp8 [Register(0x24), Register(0x18)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
15 24 18 

# 8096b JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }
72 7f 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta97f != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(0n3/0x00000003u32))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(0n0/0x00u8), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(0n3/0x00000003u32))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 8096f LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 80975 LoadImm8 [Register(0x18), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 18 01 

# mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
# 80978 Store8 [Register(0x18), Register(0x20)]
#       mem[tdaa] <- ta11a U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n1/0x01u8) }
06 18 20 

# goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 8097b JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
70 8b 09 08 

# :Keyboard_poll_if_else_0_17 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
# Number(0n987140/0x000f1004u32)
# 8097f LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987136/0x000f1000u32), Number(0n4/0x00000004u32)) }
#       Number(0n987140/0x000f1004u32)
20 20 04 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80985 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 24 00 

# mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
# 80988 Store8 [Register(0x24), Register(0x20)]
#       mem[tdaa] <- ta97f U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(0n0/0x00u8) }
06 24 20 

# :Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 8098b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 8098d Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var a (Local a Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([64, 65, 66, 67])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([68])
# Var diff (Local diff Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_init_50_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([72, 73, 74, 75]) Number(0n0/0x00000000u32)
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([89]) Number(0n0/0x00u8)
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([97])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([97])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([98])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([98])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([100, 101, 102, 103])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_15_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) Number(0n987228/0x000f105cu32)
# Var inline_RpnCalc_handle_putc_15_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n69/0x45u8)
# Var inline_RpnCalc_handle_putc_16_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) Number(0n82/0x52u8)
# Var inline_RpnCalc_handle_putc_17_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n10/0x0au8)
# Var inline_RpnCalc_handle_putc_19_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_20_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_21_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_23_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) Number(0n58/0x3au8)
# Var inline_RpnCalc_handle_putc_24_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_stack_get_48_n (Arg1 n Number(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_get_48_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_t5abb (t5abb Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t1533 (t1533 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_54_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_55_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_56_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_57_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_58_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t100e (t100e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t8f43 (t8f43 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_59_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) Reg(U32) Some([64, 65, 66, 67])
# Var product (Local product Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var quotient (Local quotient Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([97])
# Var stack_count_usize (Local stack_count_usize Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([104])
# Var sum (Local sum Number(U32) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var t13c5 (t13c5 Number(0n47/0x2fu8)) Reg(U8) Some([88]) Number(0n47/0x2fu8)
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([56, 57, 58, 59])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([56, 57, 58, 59])
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([56, 57, 58, 59])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([60, 61, 62, 63])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([88])
# Var t47ec (t47ec Number(0n99/0x63u8)) Reg(U8) Some([69]) Number(0n99/0x63u8)
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([105])
# Var t622 (t622 Number(0n42/0x2au8)) Reg(U8) Some([88]) Number(0n42/0x2au8)
# Var t670d (t670d Ident("sum")) Reg(U32) Some([56, 57, 58, 59])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t8f63 (t8f63 Number(0n45/0x2du8)) Reg(U8) Some([88]) Number(0n45/0x2du8)
# Var t9dae (t9dae Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))) Reg(U8) Some([69])
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([105]) Number(0n1/0x01u8)
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([56, 57, 58, 59])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })) Reg(U32) Some([60, 61, 62, 63])
# Var tbdb5 (tbdb5 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })) Reg(U32) Some([56, 57, 58, 59])
# Var tbf93 (tbf93 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([72, 73, 74, 75])
# Var tc333 (tc333 Number(0n43/0x2bu8)) Reg(U8) Some([88]) Number(0n43/0x2bu8)
# Var tcc42 (tcc42 Number(0n100/0x64u8)) Reg(U8) Some([69]) Number(0n100/0x64u8)
# Var tcdcd (tcdcd Number(0n115/0x73u8)) Reg(U8) Some([88]) Number(0n115/0x73u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([69])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var tdc11 (tdc11 Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tdcb0 (tdcb0 Number(0n48/0x30u8)) Reg(U8) Some([69]) Number(0n48/0x30u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([68])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([69]) Number(0n32/0x20u8)
# Var tdf6e (tdf6e Number(0n113/0x71u8)) Reg(U8) Some([69]) Number(0n113/0x71u8)
# Var teed8 (teed8 Number(0n57/0x39u8)) Reg(U8) Some([69]) Number(0n57/0x39u8)
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([64, 65, 66, 67])
# 80992 Copy32 [Register(0x00), Register(0x40)]
#       Save function parameter 'c' registers [0, 1, 2, 3] to locals [64, 65, 66, 67].
21 00 40 

# 80995 Copy8 [Register(0x04), Register(0x44)]
#       Save function parameter 'ch' registers [4] to locals [68].
0b 04 44 

# a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
# Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80998 LoadImm8 [Register(0x38), Constant8(0x00=0)]
#       a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#       Assign { target: Ident("a"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 38 00 

# b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8099b LoadImm8 [Register(0x3c), Constant8(0x00=0)]
#       b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 3c 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(0n0/0x00u8) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 8099e LoadImm8 [Register(0x58), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 58 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 809a1 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 58 

# 809a4 JzImm [Label24(RpnCalc_handle_if_true_0_1)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 ac 09 08 

# 809a8 JmpImm [Label24(RpnCalc_handle_if_else_0_2)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 b3 09 08 

# :RpnCalc_handle_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809ac LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809af JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 0a 0a 08 

# :RpnCalc_handle_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 809b3 LoadImm8 [Register(0x58), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 58 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 809b6 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 58 

# 809b9 JzImm [Label24(RpnCalc_handle_if_true_1_3)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 c1 09 08 

# 809bd JmpImm [Label24(RpnCalc_handle_if_else_1_4)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 c8 09 08 

# :RpnCalc_handle_if_true_1_3 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809c1 LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809c4 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 0a 0a 08 

# :RpnCalc_handle_if_else_1_4 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 809c8 LoadImm8 [Register(0x58), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 58 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 809cb Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 58 

# 809ce JzImm [Label24(RpnCalc_handle_if_true_2_5)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 d6 09 08 

# 809d2 JmpImm [Label24(RpnCalc_handle_if_else_2_6)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 dd 09 08 

# :RpnCalc_handle_if_true_2_5 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809d6 LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809d9 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 0a 0a 08 

# :RpnCalc_handle_if_else_2_6 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 809dd LoadImm8 [Register(0x58), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 58 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 809e0 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 58 

# 809e3 JzImm [Label24(RpnCalc_handle_if_true_3_7)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 eb 09 08 

# 809e7 JmpImm [Label24(RpnCalc_handle_if_else_3_8)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 f2 09 08 

# :RpnCalc_handle_if_true_3_7 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 809eb LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809ee JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 0a 0a 08 

# :RpnCalc_handle_if_else_3_8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 809f2 LoadImm8 [Register(0x58), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 58 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 809f5 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 58 

# 809f8 JzImm [Label24(RpnCalc_handle_if_true_4_9)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 00 0a 08 

# 809fc JmpImm [Label24(RpnCalc_handle_if_else_4_10)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 07 0a 08 

# :RpnCalc_handle_if_true_4_9 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
# Number(0n2/0x02u8)
# 80a00 LoadImm8 [Register(0x68), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n2/0x02u8) }
#       Number(0n2/0x02u8)
04 68 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 80a03 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 0a 0a 08 

# :RpnCalc_handle_if_else_4_10 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 80a07 LoadImm8 [Register(0x68), Constant8(0x00=0)]
#       stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 68 00 

# :RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 80a0a Copy8 [Register(0x68), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 68 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #40, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80a0d LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #40, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'
# 80a10 Cmp8 [Register(0x58), Register(0x59)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'
15 58 59 

# 80a13 JcImm [Label24(RpnCalc_handle_if_else_0_13)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'
71 b7 0a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #41, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13'\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 80a17 Copy32 [Register(0x40), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 80a1a Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 80a1d AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 48 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 80a23 Load8 [Register(0x48), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 48 58 

# if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# 80a26 Cmp8 [Register(0x58), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
15 58 59 

# 80a29 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
72 b3 0a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 80a2d Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 80a30 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 80a33 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 80a39 Load32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 50 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 80a3c Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80a3f Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 80a42 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80a48 Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80a4b LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80a51 Mul8_16 [Register(0x50), Register(0x00), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 50 00 50 

# 80a55 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 52 00 

# 80a58 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 53 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80a5b ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80a5c AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 4c 50 50 

# 80a60 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80a61 Store32_1 [Register(0x48), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 48 50 

# 80a64 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 80a65 Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80a68 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 80a6b AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 80a71 Copy32 [Register(0x4c), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 4c 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80a74 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 50 54 

# 80a77 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80a7d Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80a80 Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 50 48 

# 80a83 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80a89 Store32_1 [Register(0x48), Register(0x54)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 54 

# 80a8c Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 80a8d Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 80a90 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 48 50 

# 80a93 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 80a99 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #72, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #73, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 80a9f Store32_1 [Register(0x48), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #73, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 50 

# 80aa2 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #73, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 80aa3 Copy32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 4c 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 80aa6 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 48 48 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# 80aac Store8 [Register(0x59), Register(0x48)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
06 59 48 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 80aaf JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 b3 0a 08 

# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 80ab3 JmpImm [Label24(RpnCalc_handle_if_end_11)]
#       goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
70 b7 0a 08 

# :RpnCalc_handle_if_else_0_13 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_end_11
# tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
# 80ab7 Copy32 [Register(0x40), Register(0x48)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
21 40 48 

# 80aba AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("stack") }, Number(0n64/0x00000040u32))
32 48 40 00 00 00 

# stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# 80ac0 Load32 [Register(0x48), Register(0x48)]
#       stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(U32)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
22 48 48 

# stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
# Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
# Index("stack_count_usize", Number(0n0/0x00u8))
# 80ac3 Copy8 [Register(0x48), Register(0x61)]
#       stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#       Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(0n0/0x00u8)) }
#       Index("stack_count_usize", Number(0n0/0x00u8))
0b 48 61 

# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_needed")
# 80ac6 Copy8 [Register(0x68), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_needed")
0b 68 58 

# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_count")
# 80ac9 Copy8 [Register(0x61), Register(0x69)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 61 69 

# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# 80acc Cmp8 [Register(0x58), Register(0x69)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
15 58 69 

# 80acf JcImm [Label24(RpnCalc_handle_if_else_0_16)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
71 bf 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n69/0x45u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n82/0x52u8)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Return { value: Some(Number(0n1/0x01u8)) }])], else_block: [] }
# RpnCalc_handle_if_true_0_15
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 80ad3 LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80ad6 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80ad8 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 80ade Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #95, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80ae1 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #95, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_15_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #96, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2'
# 80ae4 Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #96, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2'
15 45 59 

# 80ae7 JzImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #96, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2'
72 0b 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #96, replacing reference to inline_RpnCalc_handle_putc_15_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_15_putc_if_true_0_1
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 80aeb LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80aee Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_15_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80af1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80af7 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 01 0b 08 00 

# 80afd JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 80b01 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80b07 JmpImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 0b 0b 08 

# :inline_RpnCalc_handle_putc_15_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_end_0
# :inline_RpnCalc_handle_putc_15_function_end_putc None
# inline_RpnCalc_handle_putc_15_function_end_putc
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 80b0b LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b0e Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #106, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80b10 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #106, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #107, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 -> inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80b16 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #107, replacing reference to inline_RpnCalc_handle_putc_16_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 -> inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #108, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80b19 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #108, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_16_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2'
# 80b1c Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2'
15 45 59 

# 80b1f JzImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #109, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2'
72 43 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #109, replacing reference to inline_RpnCalc_handle_putc_16_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_16_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 80b23 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b26 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80b29 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b2f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 39 0b 08 00 

# 80b35 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 80b39 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80b3f JmpImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 43 0b 08 

# :inline_RpnCalc_handle_putc_16_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_end_0
# :inline_RpnCalc_handle_putc_16_function_end_putc None
# inline_RpnCalc_handle_putc_16_function_end_putc
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# # In IlFunctionId("RpnCalc_handle"), at #117, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# 80b43 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #117, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #118, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,)
# 80b46 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #119, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80b48 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #119, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #120, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 -> inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80b4e Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #120, replacing reference to inline_RpnCalc_handle_putc_17_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 -> inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80b51 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #121, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_17_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #122, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2'
# 80b54 Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #122, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2'
15 45 59 

# 80b57 JzImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #122, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2'
72 7b 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #122, replacing reference to inline_RpnCalc_handle_putc_17_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_17_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# # In IlFunctionId("RpnCalc_handle"), at #124, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
# 80b5b LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #124, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  -> inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #125, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
# 80b5e Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #125, replacing reference to inline_RpnCalc_handle_putc_17_tac13 with inline_RpnCalc_handle_putc_16_tac13 as they share the same const value: Number(0n82/0x52u8). None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,)
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80b61 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b67 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 71 0b 08 00 

# 80b6d JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 80b71 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80b77 JmpImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 7b 0b 08 

# :inline_RpnCalc_handle_putc_17_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_end_0
# :inline_RpnCalc_handle_putc_17_function_end_putc None
# inline_RpnCalc_handle_putc_17_function_end_putc
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #130, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80b7b LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #130, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b7e Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #133, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80b80 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #133, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #134, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 -> inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80b86 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #134, replacing reference to inline_RpnCalc_handle_putc_18_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 -> inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #135, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80b89 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #135, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_18_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #136, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2'
# 80b8c Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #136, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2'
15 45 59 

# 80b8f JzImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #136, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2'
72 b3 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #136, replacing reference to inline_RpnCalc_handle_putc_18_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_18_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# 80b93 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b96 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80b99 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b9f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c a9 0b 08 00 

# 80ba5 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 80ba9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80baf JmpImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 b3 0b 08 

# :inline_RpnCalc_handle_putc_18_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_end_0
# :inline_RpnCalc_handle_putc_18_function_end_putc None
# inline_RpnCalc_handle_putc_18_function_end_putc
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 80bb3 LoadImm8 [Register(0x69), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 69 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 80bb6 Copy8 [Register(0x69), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 69 00 

# 80bb9 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 80bbb JmpImm [Label24(RpnCalc_handle_if_end_14)]
#       goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
70 bf 0b 08 

# :RpnCalc_handle_if_else_0_16 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Ident("stack_needed")
# 80bbf Copy8 [Register(0x68), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Ident("stack_needed")
0b 68 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #150, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80bc2 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #150, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #151, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'
# 80bc5 Cmp8 [Register(0x58), Register(0x59)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #151, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'
15 58 59 

# 80bc8 JcImm [Label24(RpnCalc_handle_if_else_0_19)]
#       if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #151, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'
71 17 0c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #151, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if t4671 > ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' -> if t4671 > inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19'\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n0/0x00u8) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80bcc Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 38 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80bcf Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 80bd2 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80bd8 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 80bdb AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80be1 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80be4 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_52_t1533 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80bea Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 80bed Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80bee Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 4c 

# 80bf1 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80bf7 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80bfa LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80c00 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 80c04 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 80c07 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80c0a ClearCarry []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80c0b AddCarry32_1 [Register(0x38), Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 48 38 

# 80c0f AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80c10 Load32 [Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 38 38 

# a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 80c13 JmpImm [Label24(RpnCalc_handle_if_end_17)]
#       goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
70 17 0c 08 

# :RpnCalc_handle_if_else_0_19 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Ident("stack_needed")
# 80c17 Copy8 [Register(0x68), Register(0x58)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Ident("stack_needed")
0b 68 58 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 80c1a LoadImm8 [Register(0x69), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 69 01 

# if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
# 80c1d Cmp8 [Register(0x58), Register(0x69)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
15 58 69 

# 80c20 JcImm [Label24(RpnCalc_handle_if_else_0_22)]
#       if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }
71 6f 0c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > ta11a then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(0n1/0x01u8) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(0n1/0x01u8) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80c24 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 3c 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c27 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 80c2a AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c30 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 80c33 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80c39 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80c3c AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_53_t1533 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80c42 Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 48 4c 

# 80c45 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_t1533 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80c46 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 4c 

# 80c49 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80c4f Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80c52 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80c58 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 80c5c LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 80c5f LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80c62 ClearCarry []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80c63 AddCarry32_1 [Register(0x3c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 48 3c 

# 80c67 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80c68 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 3c 3c 

# b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 80c6b JmpImm [Label24(RpnCalc_handle_if_end_20)]
#       goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
70 6f 0c 08 

# :RpnCalc_handle_if_else_0_22 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(U32)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n43/0x2bu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# Number(0n43/0x2bu8)
# 80c6f LoadImm8 [Register(0x58), Constant8(0x2b=43)]
#       tc333 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
#       Number(0n43/0x2bu8)
04 58 2b 

# if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
# 80c72 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
15 44 58 

# 80c75 JzImm [Label24(RpnCalc_handle_if_true_0_24)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
72 7d 0c 08 

# 80c79 JmpImm [Label24(RpnCalc_handle_if_else_0_25)]
#       if tdcd9 == tc333 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }
70 d3 0d 08 

# :RpnCalc_handle_if_true_0_24 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n43/0x2bu8) }, [Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }, [Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }, [Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }, [Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }, [Return { value: Some(Number(0n0/0x00u8)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }])], else_block: [] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# 80c7d Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# 80c80 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 80c83 ClearCarry []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 80c84 AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 5c 48 5c 

# 80c88 AddCarry32_2 []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# Ident("sum")
# 80c89 Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
#       Ident("sum")
21 5c 38 

# None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# 80c8c Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t670d None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 104, 105]
# 80c8f Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 69 

# 80c91 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 68 

# 80c93 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 64 

# 80c95 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 62 

# 80c97 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 61 

# 80c99 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 60 

# 80c9b Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5e 

# 80c9d Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5d 

# 80c9f Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5c 

# 80ca1 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 59 

# 80ca3 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 58 

# 80ca5 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 57 

# 80ca7 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 56 

# 80ca9 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 55 

# 80cab Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 54 

# 80cad Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 53 

# 80caf Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 52 

# 80cb1 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 51 

# 80cb3 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 50 

# 80cb5 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4f 

# 80cb7 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4e 

# 80cb9 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4d 

# 80cbb Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4c 

# 80cbd Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4b 

# 80cbf Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4a 

# 80cc1 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 49 

# 80cc3 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 48 

# 80cc5 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 45 

# 80cc7 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 44 

# 80cc9 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 43 

# 80ccb Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 42 

# 80ccd Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 41 

# 80ccf Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 40 

# 80cd1 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3f 

# 80cd3 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3e 

# 80cd5 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3d 

# 80cd7 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3c 

# 80cd9 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3b 

# 80cdb Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3a 

# 80cdd Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 39 

# 80cdf Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 38 

# 80ce1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 80ce7 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c f1 0c 08 00 

# 80ced JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 23 2a 08 

# 80cf1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 80cf7 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 38 

# 80cf9 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 39 

# 80cfb Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3a 

# 80cfd Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3b 

# 80cff Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3c 

# 80d01 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3d 

# 80d03 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3e 

# 80d05 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3f 

# 80d07 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 40 

# 80d09 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 41 

# 80d0b Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 42 

# 80d0d Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 43 

# 80d0f Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 44 

# 80d11 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 45 

# 80d13 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 48 

# 80d15 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 49 

# 80d17 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4a 

# 80d19 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4b 

# 80d1b Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4c 

# 80d1d Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4d 

# 80d1f Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4e 

# 80d21 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4f 

# 80d23 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 50 

# 80d25 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 51 

# 80d27 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 52 

# 80d29 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 53 

# 80d2b Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 54 

# 80d2d Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 55 

# 80d2f Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 56 

# 80d31 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 57 

# 80d33 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 58 

# 80d35 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 59 

# 80d37 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5c 

# 80d39 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5d 

# 80d3b Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5e 

# 80d3d Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 60 

# 80d3f Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 61 

# 80d41 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 62 

# 80d43 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 64 

# 80d45 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 68 

# 80d47 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 69 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #206, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80d49 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #206, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #208, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 80d4c Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #209, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80d4e LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #209, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #210, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 -> inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80d54 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #210, replacing reference to inline_RpnCalc_handle_putc_19_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 -> inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #211, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80d57 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #211, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_19_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #212, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2'
# 80d5a Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #212, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2'
15 45 59 

# 80d5d JzImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #212, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2'
72 81 0d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #212, replacing reference to inline_RpnCalc_handle_putc_19_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_19_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #214, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80d61 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #214, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #215, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 80d64 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #215, replacing reference to inline_RpnCalc_handle_putc_19_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80d67 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80d6d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 77 0d 08 00 

# 80d73 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 80d77 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80d7d JmpImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 81 0d 08 

# :inline_RpnCalc_handle_putc_19_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_end_0
# :inline_RpnCalc_handle_putc_19_function_end_putc None
# inline_RpnCalc_handle_putc_19_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("sum")
# 80d81 Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("sum")
21 5c 38 

# inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# 80d84 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80d87 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80d8a AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80d90 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80d93 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80d99 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 80d9d LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 80da0 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80da3 ClearCarry []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80da4 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 80da8 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80da9 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 80dac Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80dad Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80db0 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80db6 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80db9 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80dbf Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80dc2 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 80dc5 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_54_t8f43 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80dcb Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 80dce Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80dcf JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_0_25 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n45/0x2du8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# Number(0n45/0x2du8)
# 80dd3 LoadImm8 [Register(0x58), Constant8(0x2d=45)]
#       t8f63 <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
#       Number(0n45/0x2du8)
04 58 2d 

# if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
# 80dd6 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
15 44 58 

# 80dd9 JzImm [Label24(RpnCalc_handle_if_true_1_26)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
72 e1 0d 08 

# 80ddd JmpImm [Label24(RpnCalc_handle_if_else_1_27)]
#       if tdcd9 == t8f63 then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n45/0x2du8) }
70 42 0f 08 

# :RpnCalc_handle_if_true_1_26 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("b")
# 80de1 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("a")
# 80de4 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# 80de7 Copy32 [Register(0x48), Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
21 48 00 

# 80dea Invert8 [Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 00 

# 80dec Invert8 [Register(0x01)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 01 

# 80dee Invert8 [Register(0x02)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 02 

# 80df0 Invert8 [Register(0x03)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 03 

# 80df2 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
32 00 01 00 00 00 

# 80df8 ClearCarry []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
03 

# 80df9 AddCarry32_1 [Register(0x5c), Register(0x00), Register(0x38)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
30 5c 00 38 

# 80dfd AddCarry32_2 []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
31 

# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# 80dfe Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t17ee None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 104, 105]
# 80e01 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 69 

# 80e03 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 68 

# 80e05 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 64 

# 80e07 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 62 

# 80e09 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 61 

# 80e0b Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 60 

# 80e0d Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5e 

# 80e0f Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5d 

# 80e11 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5c 

# 80e13 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 59 

# 80e15 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 58 

# 80e17 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 57 

# 80e19 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 56 

# 80e1b Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 55 

# 80e1d Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 54 

# 80e1f Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 53 

# 80e21 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 52 

# 80e23 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 51 

# 80e25 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 50 

# 80e27 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4f 

# 80e29 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4e 

# 80e2b Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4d 

# 80e2d Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4c 

# 80e2f Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4b 

# 80e31 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4a 

# 80e33 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 49 

# 80e35 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 48 

# 80e37 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 45 

# 80e39 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 44 

# 80e3b Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 43 

# 80e3d Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 42 

# 80e3f Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 41 

# 80e41 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 40 

# 80e43 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3f 

# 80e45 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3e 

# 80e47 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3d 

# 80e49 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3c 

# 80e4b Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3b 

# 80e4d Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3a 

# 80e4f Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 39 

# 80e51 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 38 

# 80e53 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 80e59 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 63 0e 08 00 

# 80e5f JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 23 2a 08 

# 80e63 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 80e69 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 38 

# 80e6b Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 39 

# 80e6d Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3a 

# 80e6f Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3b 

# 80e71 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3c 

# 80e73 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3d 

# 80e75 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3e 

# 80e77 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3f 

# 80e79 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 40 

# 80e7b Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 41 

# 80e7d Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 42 

# 80e7f Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 43 

# 80e81 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 44 

# 80e83 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 45 

# 80e85 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 48 

# 80e87 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 49 

# 80e89 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4a 

# 80e8b Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4b 

# 80e8d Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4c 

# 80e8f Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4d 

# 80e91 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4e 

# 80e93 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4f 

# 80e95 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 50 

# 80e97 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 51 

# 80e99 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 52 

# 80e9b Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 53 

# 80e9d Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 54 

# 80e9f Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 55 

# 80ea1 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 56 

# 80ea3 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 57 

# 80ea5 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 58 

# 80ea7 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 59 

# 80ea9 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5c 

# 80eab Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5d 

# 80ead Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5e 

# 80eaf Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 60 

# 80eb1 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 61 

# 80eb3 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 62 

# 80eb5 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 64 

# 80eb7 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 68 

# 80eb9 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 69 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #249, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80ebb LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #249, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #251, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 80ebe Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #252, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 80ec0 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #252, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #253, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 -> inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 80ec6 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #253, replacing reference to inline_RpnCalc_handle_putc_20_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 -> inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #254, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80ec9 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #254, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_20_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #255, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2'
# 80ecc Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #255, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2'
15 60 59 

# 80ecf JzImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #255, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2'
72 f3 0e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #255, replacing reference to inline_RpnCalc_handle_putc_20_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_20_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #257, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 80ed3 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #257, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #258, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 80ed6 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #258, replacing reference to inline_RpnCalc_handle_putc_20_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80ed9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80edf StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c e9 0e 08 00 

# 80ee5 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 80ee9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80eef JmpImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 f3 0e 08 

# :inline_RpnCalc_handle_putc_20_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_end_0
# :inline_RpnCalc_handle_putc_20_function_end_putc None
# inline_RpnCalc_handle_putc_20_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# 80ef3 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80ef6 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80ef9 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 80eff Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 80f02 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 80f08 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 80f0c LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 80f0f LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 80f12 ClearCarry []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 80f13 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 80f17 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80f18 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 80f1b Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80f1c Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80f1f AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 80f25 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 80f28 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 80f2e Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 80f31 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 80f34 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_55_t8f43 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 80f3a Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 80f3d Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80f3e JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_1_27 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n42/0x2au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# Number(0n42/0x2au8)
# 80f42 LoadImm8 [Register(0x58), Constant8(0x2a=42)]
#       t622 <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
#       Number(0n42/0x2au8)
04 58 2a 

# if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
# 80f45 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
15 44 58 

# 80f48 JzImm [Label24(RpnCalc_handle_if_true_2_28)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
72 50 0f 08 

# 80f4c JmpImm [Label24(RpnCalc_handle_if_else_2_29)]
#       if tdcd9 == t622 then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n42/0x2au8) }
70 c5 12 08 

# :RpnCalc_handle_if_true_2_28 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 80f50 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 80f53 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f56 Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 5c 38 

# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f59 Copy32 [Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(U32)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 48 5c 

# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f5c Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f5f Copy32 [Register(0x5c), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 5c 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 80f62 Mul8_16 [Register(0x3c), Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 48 4c 

# 80f66 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 80f69 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 80f6c Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 80f6f LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 80f75 Copy8 [Register(0x60), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 80f78 Copy8 [Register(0x49), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 80f7b LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 80f81 Copy8 [Register(0x58), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 58 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 80f84 Mul8_16 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 54 50 50 

# 80f88 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 52 00 

# 80f8b LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 80f8e Copy8 [Register(0x51), Register(0x61)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 51 61 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 80f91 Copy8 [Register(0x61), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 61 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 80f94 Copy8 [Register(0x50), Register(0x61)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 50 61 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 80f97 Copy8 [Register(0x61), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 61 52 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #307, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 80f9a LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #307, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #308, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 80f9d Copy8 [Register(0x59), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #308, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #309, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 80fa0 Copy8 [Register(0x59), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #309, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 80fa3 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 80fa4 AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 

# 80fa8 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 80fa9 Copy8 [Register(0x49), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 80fac LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 80fb2 Copy8 [Register(0x58), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 58 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 80fb5 Mul8_16 [Register(0x3c), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 50 50 

# 80fb9 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 52 00 

# 80fbc LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 80fbf Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 80fc2 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 80fc8 Copy8 [Register(0x60), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 80fcb Mul8_16 [Register(0x54), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 54 48 3c 

# 80fcf LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 80fd2 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 80fd5 Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 80fd8 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 80fd9 AddCarry32_1 [Register(0x48), Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 3c 50 

# 80fdd AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 80fde Copy8 [Register(0x52), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 52 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 80fe1 Copy8 [Register(0x60), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 80fe4 Copy8 [Register(0x51), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 51 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 80fe7 Copy8 [Register(0x60), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 80fea Copy8 [Register(0x50), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 50 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 80fed Copy8 [Register(0x60), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #330, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 80ff0 Copy8 [Register(0x59), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #330, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 80ff3 Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 80ff6 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 80ff7 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 48 3c 

# 80ffb AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 80ffc Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 4c 

# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 80fff LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 81005 Copy8 [Register(0x3b), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t94df <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 3b 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 81008 Copy8 [Register(0x45), Register(0x3d)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t94df U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 45 3d 

# inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 8100b Copy8 [Register(0x3a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t3b02 <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 3a 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 8100e Copy8 [Register(0x45), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 45 3c 

# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81011 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 48 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 81017 Copy8 [Register(0x5f), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_ta5f7 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 5f 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 8101a Copy8 [Register(0x44), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 44 49 

# inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 8101d Copy8 [Register(0x5e), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_t82cc <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 5e 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 81020 Copy8 [Register(0x44), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t82cc U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 44 48 

# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 81023 Mul8_16 [Register(0x3c), Register(0x5c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 5c 50 

# 81027 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 8102a LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8102d Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81030 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 81036 Copy8 [Register(0x60), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81039 Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8103c LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 81042 Copy8 [Register(0x44), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81045 Mul8_16 [Register(0x64), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 64 54 54 

# 81049 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 8104c LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 8104f Copy8 [Register(0x55), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 81052 Copy8 [Register(0x62), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 62 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 81055 Copy8 [Register(0x54), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 81058 Copy8 [Register(0x62), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 62 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #363, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 8105b Copy8 [Register(0x59), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #363, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #364, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 8105e Copy8 [Register(0x59), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #364, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 81061 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 81062 AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 81066 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81067 Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8106a LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 81070 Copy8 [Register(0x44), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 44 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81073 Mul8_16 [Register(0x3c), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 3c 54 54 

# 81077 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 8107a LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8107d Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81080 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 64 00 00 00 00 

# 81086 Copy8 [Register(0x60), Register(0x64)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 60 64 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 81089 Mul8_16 [Register(0x64), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 64 5c 3c 

# 8108d LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3e 00 

# 81090 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81093 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81096 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 81097 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 5c 3c 54 

# 8109b AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 8109c Copy8 [Register(0x56), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 8109f Copy8 [Register(0x60), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 60 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 810a2 Copy8 [Register(0x55), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 810a5 Copy8 [Register(0x60), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 60 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 810a8 Copy8 [Register(0x54), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 810ab Copy8 [Register(0x60), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 60 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #385, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 810ae Copy8 [Register(0x59), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #385, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 810b1 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 810b4 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 810b5 AddCarry32_1 [Register(0x50), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 5c 3c 

# 810b9 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 810ba Copy32 [Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 54 

# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# 810bd Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
#       Ident("b_hi")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 810c0 Mul8_16 [Register(0x38), Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 5c 

# 810c4 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5e 00 

# 810c7 LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 810ca Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 810cd LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 810d3 Copy8 [Register(0x45), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 810d6 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 810d9 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 810df Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 810e2 Mul8_16 [Register(0x50), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 50 48 48 

# 810e6 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 810e9 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 810ec Copy8 [Register(0x49), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 49 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 810ef Copy8 [Register(0x58), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 58 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 810f2 Copy8 [Register(0x48), Register(0x58)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 48 58 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 810f5 Copy8 [Register(0x58), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 58 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #408, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 810f8 Copy8 [Register(0x59), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #408, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #409, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 810fb Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #409, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 810fe ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 810ff AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 5c 48 5c 

# 81103 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81104 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81107 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 8110d Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81110 Mul8_16 [Register(0x38), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 38 48 48 

# 81114 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 81117 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8111a Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 8111d LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 81123 Copy8 [Register(0x45), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 45 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 81126 Mul8_16 [Register(0x50), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 50 3c 38 

# 8112a LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3a 00 

# 8112d LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb9f0 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 3b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81130 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81133 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 81134 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 48 

# 81138 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 81139 Copy8 [Register(0x4a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 4a 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 8113c Copy8 [Register(0x45), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 45 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 8113f Copy8 [Register(0x49), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 49 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 81142 Copy8 [Register(0x45), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 81145 Copy8 [Register(0x48), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 48 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 81148 Copy8 [Register(0x45), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #430, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 8114b Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #430, replacing reference to inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8114e Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81151 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 81152 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 5c 3c 38 

# 81156 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# 81157 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
03 

# 81158 AddCarry32_1 [Register(0x54), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
30 54 38 38 

# 8115c AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
31 

# inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 8115d Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t34f7 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 81160 Copy8 [Register(0x45), Register(0x3b)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 45 3b 

# inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 81163 Copy8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t30b9 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 38 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 81166 Copy8 [Register(0x45), Register(0x3a)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 45 3a 

# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #442, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81169 Copy8 [Register(0x59), Register(0x39)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #442, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 39 

# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #443, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 8116c Copy8 [Register(0x59), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #443, replacing reference to inline_RpnCalc_handle_mul32_32_12_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_ta97f U8 -> inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
0b 59 38 

# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# 8116f Copy32 [Register(0x4c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("c")
21 4c 3c 

# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"d\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81172 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 81173 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 38 

# 81177 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 81178 Copy32 [Register(0x38), Register(0x5c)]
#       product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 38 5c 

# :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 None
# inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# Ident("product")
# 8117b Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
#       Ident("product")
21 5c 38 

# None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# 8117e Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t2754 None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 104, 105]
# 81181 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 69 

# 81183 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 68 

# 81185 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 64 

# 81187 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 62 

# 81189 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 61 

# 8118b Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 60 

# 8118d Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5e 

# 8118f Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5d 

# 81191 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5c 

# 81193 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 59 

# 81195 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 58 

# 81197 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 57 

# 81199 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 56 

# 8119b Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 55 

# 8119d Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 54 

# 8119f Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 53 

# 811a1 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 52 

# 811a3 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 51 

# 811a5 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 50 

# 811a7 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4f 

# 811a9 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4e 

# 811ab Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4d 

# 811ad Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4c 

# 811af Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4b 

# 811b1 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4a 

# 811b3 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 49 

# 811b5 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 48 

# 811b7 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 45 

# 811b9 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 44 

# 811bb Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 43 

# 811bd Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 42 

# 811bf Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 41 

# 811c1 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 40 

# 811c3 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3f 

# 811c5 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3e 

# 811c7 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3d 

# 811c9 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3c 

# 811cb Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3b 

# 811cd Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3a 

# 811cf Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 39 

# 811d1 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 38 

# 811d3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 811d9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c e3 11 08 00 

# 811df JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 23 2a 08 

# 811e3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 811e9 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 38 

# 811eb Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 39 

# 811ed Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3a 

# 811ef Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3b 

# 811f1 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3c 

# 811f3 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3d 

# 811f5 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3e 

# 811f7 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3f 

# 811f9 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 40 

# 811fb Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 41 

# 811fd Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 42 

# 811ff Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 43 

# 81201 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 44 

# 81203 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 45 

# 81205 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 48 

# 81207 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 49 

# 81209 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4a 

# 8120b Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4b 

# 8120d Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4c 

# 8120f Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4d 

# 81211 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4e 

# 81213 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4f 

# 81215 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 50 

# 81217 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 51 

# 81219 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 52 

# 8121b Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 53 

# 8121d Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 54 

# 8121f Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 55 

# 81221 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 56 

# 81223 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 57 

# 81225 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 58 

# 81227 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 59 

# 81229 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5c 

# 8122b Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5d 

# 8122d Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5e 

# 8122f Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 60 

# 81231 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 61 

# 81233 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 62 

# 81235 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 64 

# 81237 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 68 

# 81239 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 69 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #451, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 8123b LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #451, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #453, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 8123e Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #454, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 81240 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #454, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #455, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 -> inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 81246 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #455, replacing reference to inline_RpnCalc_handle_putc_21_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 -> inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #456, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 81249 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #456, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_21_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #457, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2'
# 8124c Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #457, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2'
15 45 59 

# 8124f JzImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #457, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2'
72 73 12 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #457, replacing reference to inline_RpnCalc_handle_putc_21_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_21_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #459, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 81253 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #459, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #460, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 81256 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #460, replacing reference to inline_RpnCalc_handle_putc_21_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 81259 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 8125f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 69 12 08 00 

# 81265 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 81269 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 8126f JmpImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 73 12 08 

# :inline_RpnCalc_handle_putc_21_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_end_0
# :inline_RpnCalc_handle_putc_21_function_end_putc None
# inline_RpnCalc_handle_putc_21_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("product")
# 81273 Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("product")
21 5c 38 

# inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# 81276 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81279 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 8127c AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81282 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 81285 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 8128b Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 8128f LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 81292 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 81295 ClearCarry []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 81296 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 8129a AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8129b Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 8129e Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8129f Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 812a2 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 812a8 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 812ab AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 812b1 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 812b4 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 812b7 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_56_t8f43 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 812bd Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 812c0 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 812c1 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_2_29 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n47/0x2fu8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# Number(0n47/0x2fu8)
# 812c5 LoadImm8 [Register(0x58), Constant8(0x2f=47)]
#       t13c5 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
#       Number(0n47/0x2fu8)
04 58 2f 

# if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
# 812c8 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
15 44 58 

# 812cb JzImm [Label24(RpnCalc_handle_if_true_3_30)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
72 d3 12 08 

# 812cf JmpImm [Label24(RpnCalc_handle_if_else_3_31)]
#       if tdcd9 == t13c5 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n47/0x2fu8) }
70 e6 14 08 

# :RpnCalc_handle_if_true_3_30 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 812d3 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 812d6 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# 812d9 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 5c 00 

# 812dc Copy32 [Register(0x48), Register(0x04)]
#       Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 48 04 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 104, 105]
# 812df Push8 [Register(0x69)]
#       Saving reg0x69 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 69 

# 812e1 Push8 [Register(0x68)]
#       Saving reg0x68 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 68 

# 812e3 Push8 [Register(0x64)]
#       Saving reg0x64 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 64 

# 812e5 Push8 [Register(0x62)]
#       Saving reg0x62 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 62 

# 812e7 Push8 [Register(0x61)]
#       Saving reg0x61 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 61 

# 812e9 Push8 [Register(0x60)]
#       Saving reg0x60 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 60 

# 812eb Push8 [Register(0x5e)]
#       Saving reg0x5e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5e 

# 812ed Push8 [Register(0x5d)]
#       Saving reg0x5d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5d 

# 812ef Push8 [Register(0x5c)]
#       Saving reg0x5c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5c 

# 812f1 Push8 [Register(0x59)]
#       Saving reg0x59 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 59 

# 812f3 Push8 [Register(0x58)]
#       Saving reg0x58 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 58 

# 812f5 Push8 [Register(0x57)]
#       Saving reg0x57 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 57 

# 812f7 Push8 [Register(0x56)]
#       Saving reg0x56 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 56 

# 812f9 Push8 [Register(0x55)]
#       Saving reg0x55 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 55 

# 812fb Push8 [Register(0x54)]
#       Saving reg0x54 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 54 

# 812fd Push8 [Register(0x53)]
#       Saving reg0x53 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 53 

# 812ff Push8 [Register(0x52)]
#       Saving reg0x52 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 52 

# 81301 Push8 [Register(0x51)]
#       Saving reg0x51 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 51 

# 81303 Push8 [Register(0x50)]
#       Saving reg0x50 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 50 

# 81305 Push8 [Register(0x4f)]
#       Saving reg0x4f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4f 

# 81307 Push8 [Register(0x4e)]
#       Saving reg0x4e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4e 

# 81309 Push8 [Register(0x4d)]
#       Saving reg0x4d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4d 

# 8130b Push8 [Register(0x4c)]
#       Saving reg0x4c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4c 

# 8130d Push8 [Register(0x4b)]
#       Saving reg0x4b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4b 

# 8130f Push8 [Register(0x4a)]
#       Saving reg0x4a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4a 

# 81311 Push8 [Register(0x49)]
#       Saving reg0x49 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 49 

# 81313 Push8 [Register(0x48)]
#       Saving reg0x48 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 48 

# 81315 Push8 [Register(0x45)]
#       Saving reg0x45 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 45 

# 81317 Push8 [Register(0x44)]
#       Saving reg0x44 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 44 

# 81319 Push8 [Register(0x43)]
#       Saving reg0x43 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 43 

# 8131b Push8 [Register(0x42)]
#       Saving reg0x42 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 42 

# 8131d Push8 [Register(0x41)]
#       Saving reg0x41 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 41 

# 8131f Push8 [Register(0x40)]
#       Saving reg0x40 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 40 

# 81321 Push8 [Register(0x3f)]
#       Saving reg0x3f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3f 

# 81323 Push8 [Register(0x3e)]
#       Saving reg0x3e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3e 

# 81325 Push8 [Register(0x3d)]
#       Saving reg0x3d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3d 

# 81327 Push8 [Register(0x3c)]
#       Saving reg0x3c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3c 

# 81329 Push8 [Register(0x3b)]
#       Saving reg0x3b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3b 

# 8132b Push8 [Register(0x3a)]
#       Saving reg0x3a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3a 

# 8132d Push8 [Register(0x39)]
#       Saving reg0x39 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 39 

# 8132f Push8 [Register(0x38)]
#       Saving reg0x38 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 38 

# 81331 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:div32))
32 0c fc ff ff ff 

# 81337 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:div32))
25 0c 41 13 08 00 

# 8133d JmpImm [Label24(:div32)]
#       PseudoCall(Label24(:div32))
70 2b 1b 08 

# 81341 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:div32))
32 0c 04 00 00 00 

# 81347 Pop8 [Register(0x38)]
#       Restoring reg0x38 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 38 

# 81349 Pop8 [Register(0x39)]
#       Restoring reg0x39 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 39 

# 8134b Pop8 [Register(0x3a)]
#       Restoring reg0x3a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3a 

# 8134d Pop8 [Register(0x3b)]
#       Restoring reg0x3b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3b 

# 8134f Pop8 [Register(0x3c)]
#       Restoring reg0x3c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3c 

# 81351 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3d 

# 81353 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3e 

# 81355 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3f 

# 81357 Pop8 [Register(0x40)]
#       Restoring reg0x40 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 40 

# 81359 Pop8 [Register(0x41)]
#       Restoring reg0x41 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 41 

# 8135b Pop8 [Register(0x42)]
#       Restoring reg0x42 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 42 

# 8135d Pop8 [Register(0x43)]
#       Restoring reg0x43 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 43 

# 8135f Pop8 [Register(0x44)]
#       Restoring reg0x44 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 44 

# 81361 Pop8 [Register(0x45)]
#       Restoring reg0x45 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 45 

# 81363 Pop8 [Register(0x48)]
#       Restoring reg0x48 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 48 

# 81365 Pop8 [Register(0x49)]
#       Restoring reg0x49 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 49 

# 81367 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4a 

# 81369 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4b 

# 8136b Pop8 [Register(0x4c)]
#       Restoring reg0x4c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4c 

# 8136d Pop8 [Register(0x4d)]
#       Restoring reg0x4d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4d 

# 8136f Pop8 [Register(0x4e)]
#       Restoring reg0x4e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4e 

# 81371 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4f 

# 81373 Pop8 [Register(0x50)]
#       Restoring reg0x50 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 50 

# 81375 Pop8 [Register(0x51)]
#       Restoring reg0x51 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 51 

# 81377 Pop8 [Register(0x52)]
#       Restoring reg0x52 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 52 

# 81379 Pop8 [Register(0x53)]
#       Restoring reg0x53 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 53 

# 8137b Pop8 [Register(0x54)]
#       Restoring reg0x54 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 54 

# 8137d Pop8 [Register(0x55)]
#       Restoring reg0x55 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 55 

# 8137f Pop8 [Register(0x56)]
#       Restoring reg0x56 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 56 

# 81381 Pop8 [Register(0x57)]
#       Restoring reg0x57 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 57 

# 81383 Pop8 [Register(0x58)]
#       Restoring reg0x58 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 58 

# 81385 Pop8 [Register(0x59)]
#       Restoring reg0x59 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 59 

# 81387 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5c 

# 81389 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5d 

# 8138b Pop8 [Register(0x5e)]
#       Restoring reg0x5e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5e 

# 8138d Pop8 [Register(0x60)]
#       Restoring reg0x60 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 60 

# 8138f Pop8 [Register(0x61)]
#       Restoring reg0x61 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 61 

# 81391 Pop8 [Register(0x62)]
#       Restoring reg0x62 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 62 

# 81393 Pop8 [Register(0x64)]
#       Restoring reg0x64 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 64 

# 81395 Pop8 [Register(0x68)]
#       Restoring reg0x68 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 68 

# 81397 Pop8 [Register(0x69)]
#       Restoring reg0x69 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 69 

# 81399 Copy32 [Register(0x00), Register(0x5c)]
#       Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(U32)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 00 5c 

# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# Ident("quotient")
# 8139c Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# 8139f Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 104, 105]
# 813a2 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 69 

# 813a4 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 68 

# 813a6 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 64 

# 813a8 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 62 

# 813aa Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 61 

# 813ac Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 60 

# 813ae Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5e 

# 813b0 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5d 

# 813b2 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5c 

# 813b4 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 59 

# 813b6 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 58 

# 813b8 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 57 

# 813ba Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 56 

# 813bc Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 55 

# 813be Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 54 

# 813c0 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 53 

# 813c2 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 52 

# 813c4 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 51 

# 813c6 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 50 

# 813c8 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4f 

# 813ca Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4e 

# 813cc Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4d 

# 813ce Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4c 

# 813d0 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4b 

# 813d2 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4a 

# 813d4 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 49 

# 813d6 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 48 

# 813d8 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 45 

# 813da Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 44 

# 813dc Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 43 

# 813de Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 42 

# 813e0 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 41 

# 813e2 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 40 

# 813e4 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3f 

# 813e6 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3e 

# 813e8 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3d 

# 813ea Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3c 

# 813ec Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3b 

# 813ee Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3a 

# 813f0 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 39 

# 813f2 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 38 

# 813f4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 813fa StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 04 14 08 00 

# 81400 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 23 2a 08 

# 81404 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 8140a Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 38 

# 8140c Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 39 

# 8140e Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3a 

# 81410 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3b 

# 81412 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3c 

# 81414 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3d 

# 81416 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3e 

# 81418 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3f 

# 8141a Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 40 

# 8141c Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 41 

# 8141e Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 42 

# 81420 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 43 

# 81422 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 44 

# 81424 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 45 

# 81426 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 48 

# 81428 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 49 

# 8142a Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4a 

# 8142c Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4b 

# 8142e Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4c 

# 81430 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4d 

# 81432 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4e 

# 81434 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4f 

# 81436 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 50 

# 81438 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 51 

# 8143a Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 52 

# 8143c Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 53 

# 8143e Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 54 

# 81440 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 55 

# 81442 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 56 

# 81444 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 57 

# 81446 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 58 

# 81448 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 59 

# 8144a Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5c 

# 8144c Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5d 

# 8144e Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5e 

# 81450 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 60 

# 81452 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 61 

# 81454 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 62 

# 81456 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 64 

# 81458 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 68 

# 8145a Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 69 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #494, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 8145c LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #494, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #496, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 8145f Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #497, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 81461 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #497, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #498, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 -> inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 81467 Load8 [Register(0x3c), Register(0x45)]
#       inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #498, replacing reference to inline_RpnCalc_handle_putc_22_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 -> inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 45 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #499, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 8146a LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #499, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_22_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #500, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2'
# 8146d Cmp8 [Register(0x45), Register(0x59)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #500, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2'
15 45 59 

# 81470 JzImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #500, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2'
72 94 14 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #500, replacing reference to inline_RpnCalc_handle_putc_22_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_22_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #502, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 81474 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #502, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #503, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 81477 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #503, replacing reference to inline_RpnCalc_handle_putc_22_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 8147a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 81480 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 8a 14 08 00 

# 81486 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 8148a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 81490 JmpImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 94 14 08 

# :inline_RpnCalc_handle_putc_22_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_end_0
# :inline_RpnCalc_handle_putc_22_function_end_putc None
# inline_RpnCalc_handle_putc_22_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("quotient")
# 81494 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# 81497 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8149a Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 8149d AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 814a3 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 814a6 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 814ac Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 814b0 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 814b3 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 814b6 ClearCarry []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 814b7 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 814bb AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 814bc Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 814bf Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 814c0 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 814c3 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 814c9 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 814cc AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 814d2 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 814d5 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 814d8 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_57_t8f43 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 814de Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 814e1 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 814e2 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_3_31 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n115/0x73u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# Number(0n115/0x73u8)
# 814e6 LoadImm8 [Register(0x58), Constant8(0x73=115)]
#       tcdcd <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
#       Number(0n115/0x73u8)
04 58 73 

# if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
# 814e9 Cmp8 [Register(0x44), Register(0x58)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
15 44 58 

# 814ec JzImm [Label24(RpnCalc_handle_if_true_4_32)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
72 f4 14 08 

# 814f0 JmpImm [Label24(RpnCalc_handle_if_else_4_33)]
#       if tdcd9 == tcdcd then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n115/0x73u8) }
70 9a 15 08 

# :RpnCalc_handle_if_true_4_32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_4_32
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("a")
# 814f4 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 814f7 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 40 5c 

# inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 814fa Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 48 38 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 814fd Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 81500 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81506 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 81509 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 8150f Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 48 00 48 

# 81513 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4a 00 

# 81516 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 4b 00 

# inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 81519 ClearCarry []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 8151a AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 5c 48 48 

# 8151e AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8151f Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 48 

# 81522 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81523 Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 81526 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8152c Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 5c 4c 

# 8152f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 81535 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 81538 Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 48 38 

# 8153b AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_58_t8f43 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 81541 Store32_1 [Register(0x38), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 4c 

# 81544 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("b")
# 81545 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("b")
21 3c 5c 

# inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 81548 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 8154b Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 5c 38 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(0n4/0x00000004u32))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8154e Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81551 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 81557 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 8155a LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 81560 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 81564 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 81567 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 8156a ClearCarry []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 8156b AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 3c 40 40 

# 8156f AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81570 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 81573 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81574 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81577 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(0n1/0x01u8))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }, Number(0n64/0x00000040u32))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(U32), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8157d Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 3c 5c 

# 81580 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 81586 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 81589 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 38 

# 8158c AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_59_t8f43 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 81592 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 38 5c 

# 81595 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81596 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_4_33 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n113/0x71u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# Number(0n113/0x71u8)
# 8159a LoadImm8 [Register(0x45), Constant8(0x71=113)]
#       tdf6e <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
#       Number(0n113/0x71u8)
04 45 71 

# if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
# 8159d Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
15 44 45 

# 815a0 JzImm [Label24(RpnCalc_handle_if_true_5_34)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
72 a8 15 08 

# 815a4 JmpImm [Label24(RpnCalc_handle_if_else_5_35)]
#       if tdcd9 == tdf6e then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n113/0x71u8) }
70 b4 15 08 

# :RpnCalc_handle_if_true_5_34 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_5_34
# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #574, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 815a8 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #574, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("RpnCalc_handle"), at #575, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f)
# 815ab Copy8 [Register(0x59), Register(0x00)]
#       return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("RpnCalc_handle"), at #575, replacing reference to ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f)
0b 59 00 

# 815ae JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 815b0 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_5_35 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #579, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 815b4 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #579, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# # In IlFunctionId("RpnCalc_handle"), at #580, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
# 815b7 Cmp8 [Register(0x44), Register(0x60)]
#       if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       # In IlFunctionId("RpnCalc_handle"), at #580, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
15 44 60 

# 815ba JzImm [Label24(RpnCalc_handle_if_true_6_36)]
#       if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       # In IlFunctionId("RpnCalc_handle"), at #580, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
72 c2 15 08 

# 815be JmpImm [Label24(RpnCalc_handle_if_else_6_37)]
#       if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       # In IlFunctionId("RpnCalc_handle"), at #580, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). if tdcd9 == t25ee then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' -> if tdcd9 == inline_RpnCalc_handle_putc_18_tac13 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37'
70 5f 16 08 

# :RpnCalc_handle_if_true_6_36 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 815c2 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 815c5 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 815c8 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 815ce Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #587, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 815d1 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #587, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #588, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2'
# 815d4 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #588, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2'
15 60 59 

# 815d7 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #588, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2'
72 5b 16 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #588, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 815db Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 815de AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 815e4 Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 3c 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 815e7 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 815ea Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 815ed AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 815f3 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 815f6 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 815fc Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 81600 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 81603 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 81606 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 81607 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 8160b AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8160c Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 8160f Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 81610 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81613 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 81616 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 8161c Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8161f Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 81622 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 81628 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 8162b Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 8162e AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 81634 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 81637 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 81638 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 8163b AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #611, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 81641 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #611, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #612, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 81647 Store32_1 [Register(0x48), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #612, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 3c 

# 8164a Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #612, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 8164b Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 8164e AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #615, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 81654 Store8 [Register(0x59), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #615, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
06 59 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 81657 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 5b 16 08 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8165b JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_6_37 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n32/0x20u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 8165f LoadImm8 [Register(0x45), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 45 20 

# if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
# 81662 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
15 44 45 

# 81665 JzImm [Label24(RpnCalc_handle_if_true_7_38)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
72 6d 16 08 

# 81669 JmpImm [Label24(RpnCalc_handle_if_else_7_39)]
#       if tdcd9 == tdf3b then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n32/0x20u8) }
70 0a 17 08 

# :RpnCalc_handle_if_true_7_38 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 8166d Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 81670 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 81673 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# PtrFieldDeref("c", "have_num")
# 81679 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #631, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 8167c LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #631, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #632, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'
# 8167f Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #632, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'
15 60 59 

# 81682 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #632, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'
72 06 17 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #632, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' -> if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 81686 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 81689 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 8168f Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 3c 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 81692 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 81695 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 81698 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# PtrFieldDeref("s", "first_free")
# 8169e Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
# 816a1 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 816a7 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
11 40 00 40 

# 816ab LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 42 00 

# 816ae LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
# 816b1 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
03 

# 816b2 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
30 38 40 40 

# 816b6 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(0n4/0x00000004u32)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 816b7 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 816ba Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 816bb Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 816be Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 816c1 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
# Ident("s")
# 816c7 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 816ca Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 40 5c 

# 816cd AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first_free")
# 816d3 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
# 816d6 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
21 40 3c 

# 816d9 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
# 816df Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
23 3c 5c 

# 816e2 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t8f43 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(0n1/0x01u8)) }
24 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(0n0/0x00000000u32) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n68/0x00000044u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 816e3 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 3c 

# 816e6 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("RpnCalc_handle"), at #655, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
# 816ec LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("RpnCalc_handle"), at #655, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  -> inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32 
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #656, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 816f2 Store32_1 [Register(0x48), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #656, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 3c 

# 816f5 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #656, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n0/0x00u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n72/0x00000048u32))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 816f6 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
21 38 3c 

# 816f9 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 3c 48 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
# 816ff Store8 [Register(0x59), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #659, replacing reference to inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_ta97f U8 -> mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f U8
06 59 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 81702 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 06 17 08 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81706 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_7_39 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n99/0x63u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# Number(0n99/0x63u8)
# 8170a LoadImm8 [Register(0x45), Constant8(0x63=99)]
#       t47ec <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
#       Number(0n99/0x63u8)
04 45 63 

# if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
# 8170d Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
15 44 45 

# 81710 JzImm [Label24(RpnCalc_handle_if_true_8_40)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
72 18 17 08 

# 81714 JmpImm [Label24(RpnCalc_handle_if_else_8_41)]
#       if tdcd9 == t47ec then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n99/0x63u8) }
70 3c 17 08 

# :RpnCalc_handle_if_true_8_40 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# 81718 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# 8171b Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
21 38 3c 

# 8171e AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
32 3c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81724 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 48 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 8172a Store32_1 [Register(0x48), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 48 3c 

# 8172d Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 8172e AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 38 44 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("RpnCalc_handle"), at #679, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
# 81734 Store32_1 [Register(0x48), Register(0x38)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #679, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
23 48 38 

# 81737 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("RpnCalc_handle"), at #679, replacing reference to inline_RpnCalc_handle_RpnCalc_init_50_t60ec with inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 -> mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81738 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_8_41 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n100/0x64u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# Number(0n100/0x64u8)
# 8173c LoadImm8 [Register(0x45), Constant8(0x64=100)]
#       tcc42 <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
#       Number(0n100/0x64u8)
04 45 64 

# if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
# 8173f Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
15 44 45 

# 81742 JzImm [Label24(RpnCalc_handle_if_true_9_42)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
72 4a 17 08 

# 81746 JmpImm [Label24(RpnCalc_handle_if_else_9_43)]
#       if tdcd9 == tcc42 then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n100/0x64u8) }
70 d1 18 08 

# :RpnCalc_handle_if_true_9_42 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8174a LoadImm8 [Register(0x45), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 45 00 

# :RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("stack_count")
# 8174d Copy8 [Register(0x61), Register(0x69)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 61 69 

# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# 81750 Cmp8 [Register(0x69), Register(0x45)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
15 69 45 

# 81753 JcImm [Label24(RpnCalc_handle_while_end_46)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
71 cd 18 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n58/0x3au8)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# 81757 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[a]=td0f3 None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 8175a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 81760 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 6a 17 08 00 

# 81766 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 1a 2c 08 

# 8176a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 81770 LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 81773 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #697, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 81775 LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #697, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #698, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 -> inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 8177b Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #698, replacing reference to inline_RpnCalc_handle_putc_23_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 -> inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #699, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 8177e LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #699, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_23_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #700, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2'
# 81781 Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #700, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2'
15 60 59 

# 81784 JzImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #700, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2'
72 a8 17 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #700, replacing reference to inline_RpnCalc_handle_putc_23_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_23_putc_if_true_0_1
# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 81788 LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8178b Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 8178e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 81794 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 9e 17 08 00 

# 8179a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 8179e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 817a4 JmpImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 a8 17 08 

# :inline_RpnCalc_handle_putc_23_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_end_0
# :inline_RpnCalc_handle_putc_23_function_end_putc None
# inline_RpnCalc_handle_putc_23_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\nCast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
# 817a8 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
20 3c 00 00 00 00 

# 817ae Copy8 [Register(0x45), Register(0x3c)]
#       t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(U32), value: Ident("i") }
0b 45 3c 

# inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# 817b1 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
21 40 5c 

# inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(U32), value: Ident(\"i\") }] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
# 817b4 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
20 00 04 00 00 00 

# 817ba Mul8_16 [Register(0x3c), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
11 3c 00 3c 

# 817be LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3e 00 

# 817c1 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
#       Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))
04 3f 00 

# inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
# 817c4 ClearCarry []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
03 

# 817c5 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
30 5c 3c 3c 

# 817c9 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U32))), new_type: Number(U32), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(0n4/0x00000004u32)))
31 

# inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# 817ca Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
22 3c 3c 

# tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# :inline_RpnCalc_handle_stack_get_48_function_end_stack_get None
# inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
# 817cd Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=tb336 None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
21 3c 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 104, 105]
# 817d0 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 69 

# 817d2 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 68 

# 817d4 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 64 

# 817d6 Push8 [Register(0x62)]
#       Saving reg0x62 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 62 

# 817d8 Push8 [Register(0x61)]
#       Saving reg0x61 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 61 

# 817da Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 60 

# 817dc Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5e 

# 817de Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5d 

# 817e0 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 5c 

# 817e2 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 59 

# 817e4 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 58 

# 817e6 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 57 

# 817e8 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 56 

# 817ea Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 55 

# 817ec Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 54 

# 817ee Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 53 

# 817f0 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 52 

# 817f2 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 51 

# 817f4 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 50 

# 817f6 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4f 

# 817f8 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4e 

# 817fa Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4d 

# 817fc Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4c 

# 817fe Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4b 

# 81800 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 4a 

# 81802 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 49 

# 81804 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 48 

# 81806 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 45 

# 81808 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 44 

# 8180a Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 43 

# 8180c Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 42 

# 8180e Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 41 

# 81810 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 40 

# 81812 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3f 

# 81814 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3e 

# 81816 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3d 

# 81818 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3c 

# 8181a Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3b 

# 8181c Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 3a 

# 8181e Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 39 

# 81820 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
09 38 

# 81822 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 81828 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 32 18 08 00 

# 8182e JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 23 2a 08 

# 81832 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 81838 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 38 

# 8183a Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 39 

# 8183c Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3a 

# 8183e Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3b 

# 81840 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3c 

# 81842 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3d 

# 81844 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3e 

# 81846 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 3f 

# 81848 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 40 

# 8184a Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 41 

# 8184c Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 42 

# 8184e Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 43 

# 81850 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 44 

# 81852 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 45 

# 81854 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 48 

# 81856 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 49 

# 81858 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4a 

# 8185a Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4b 

# 8185c Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4c 

# 8185e Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4d 

# 81860 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4e 

# 81862 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 4f 

# 81864 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 50 

# 81866 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 51 

# 81868 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 52 

# 8186a Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 53 

# 8186c Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 54 

# 8186e Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 55 

# 81870 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 56 

# 81872 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 57 

# 81874 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 58 

# 81876 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 59 

# 81878 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5c 

# 8187a Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5d 

# 8187c Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 5e 

# 8187e Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 60 

# 81880 Pop8 [Register(0x61)]
#       Restoring reg0x61 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 61 

# 81882 Pop8 [Register(0x62)]
#       Restoring reg0x62 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 62 

# 81884 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 64 

# 81886 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 68 

# 81888 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(U32), value: Ident("i") }] })] })
0a 69 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
# Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
# Number(0n10/0x0au8)
# # In IlFunctionId("RpnCalc_handle"), at #719, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 8188a LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] }) }
#       Call(Call { function: "putc", parameters: [Number(0n10/0x0au8)] })
#       Number(0n10/0x0au8)
#       # In IlFunctionId("RpnCalc_handle"), at #719, replacing reference to t25ee with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). t25ee <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #721, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,)
# 8188d Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #722, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
# 8188f LoadImm32 [Register(0x3c), Constant32(0x000f105c=987228)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #722, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t0 <- 0n987228/0x000f105cu32  -> inline_RpnCalc_handle_putc_15_t0 <- 0n987228/0x000f105cu32 
20 3c 5c 10 0f 00 

# inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("RpnCalc_handle"), at #723, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 -> inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
# 81895 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("RpnCalc_handle"), at #723, replacing reference to inline_RpnCalc_handle_putc_24_t0 with inline_RpnCalc_handle_putc_15_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 -> inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_handle"), at #724, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
# 81898 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_handle"), at #724, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_handle_putc_24_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f <- 0n0/0x00u8 
04 59 00 

# if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_handle"), at #725, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2'
# 8189b Cmp8 [Register(0x60), Register(0x59)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #725, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2'
15 60 59 

# 8189e JzImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_handle"), at #725, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2'
72 c2 18 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_handle\"), at #725, replacing reference to inline_RpnCalc_handle_putc_24_ta97f with inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' -> if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_RpnCalc_push_pending_61_ta97f then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_24_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# # In IlFunctionId("RpnCalc_handle"), at #727, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
# 818a2 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
#       # In IlFunctionId("RpnCalc_handle"), at #727, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  -> inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# # In IlFunctionId("RpnCalc_handle"), at #728, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
# 818a5 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       # In IlFunctionId("RpnCalc_handle"), at #728, replacing reference to inline_RpnCalc_handle_putc_24_tac13 with inline_RpnCalc_handle_putc_18_tac13 as they share the same const value: Number(0n10/0x0au8). None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) -> None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,)
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 818a8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 818ae StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c b8 18 08 00 

# 818b4 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 818b8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 818be JmpImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 c2 18 08 

# :inline_RpnCalc_handle_putc_24_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_end_0
# :inline_RpnCalc_handle_putc_24_function_end_putc None
# inline_RpnCalc_handle_putc_24_function_end_putc
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 818c2 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 818c5 Add8NoCarryIn [Register(0x45), Register(0x00), Register(0x45)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 45 00 45 

# goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 818c9 JmpImm [Label24(RpnCalc_handle_while_predicate_44)]
#       goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 4d 17 08 

# :RpnCalc_handle_while_end_46 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 818cd JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_9_43 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(0n57/0x39u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# Number(0n57/0x39u8)
# 818d1 LoadImm8 [Register(0x45), Constant8(0x39=57)]
#       teed8 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
#       Number(0n57/0x39u8)
04 45 39 

# if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
# 818d4 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
15 44 45 

# 818d7 JcImm [Label24(RpnCalc_handle_if_true_10_47)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
71 df 18 08 

# 818db JmpImm [Label24(RpnCalc_handle_if_else_10_48)]
#       if tdcd9 <= teed8 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(0n57/0x39u8) }
70 73 19 08 

# :RpnCalc_handle_if_true_10_47 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(0n48/0x30u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# Number(0n48/0x30u8)
# 818df LoadImm8 [Register(0x45), Constant8(0x30=48)]
#       tdcb0 <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
#       Number(0n48/0x30u8)
04 45 30 

# if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
# 818e2 Cmp8 [Register(0x45), Register(0x44)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
15 45 44 

# 818e5 JcImm [Label24(RpnCalc_handle_if_true_0_50)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
71 ed 18 08 

# 818e9 JmpImm [Label24(RpnCalc_handle_if_else_0_51)]
#       if tdcd9 >= tdcb0 then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }
70 6f 19 08 

# :RpnCalc_handle_if_true_0_50 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(0n48/0x30u8) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 818ed Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
# 818f0 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000048=72)]
#       tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n72/0x00000048u32))
32 38 48 00 00 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 818f6 LoadImm8 [Register(0x69), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 69 01 

# mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
# 818f9 Store8 [Register(0x69), Register(0x38)]
#       mem[tfdb7] <- ta11a U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(0n1/0x01u8) }
06 69 38 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 818fc Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 818ff Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 81902 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 81908 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 8190b Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 8190e AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 81914 Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 48 3c 

# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# 81917 Copy32 [Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
21 3c 38 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 8191a ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 8191b AddCarry32_1 [Register(0x38), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 38 

# 8191f AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 81920 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 81921 AddCarry32_1 [Register(0x38), Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 3c 

# 81925 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 81926 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 81927 AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 3c 3c 3c 

# 8192b AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 8192c ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 8192d AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 3c 38 38 

# 81931 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 None
# inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# 81932 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
23 38 48 

# 81935 Store32_2 []
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
24 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 81936 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 81939 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 8193c AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# 81942 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# 81945 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
21 38 48 

# 81948 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# PtrFieldDeref("c", "num")
# 8194e Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       PtrFieldDeref("c", "num")
22 48 3c 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) })\nCast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8)) }\nArithmetic(Subtract, Ident(\"ch\"), Number(0n48/0x30u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
# 81951 LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
04 00 d0 

# 81954 Add8NoCarryIn [Register(0x44), Register(0x00), Register(0x45)]
#       t9dae <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
#       Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8))
14 44 00 45 

# tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
# 81958 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
20 38 00 00 00 00 

# 8195e Copy8 [Register(0x45), Register(0x38)]
#       tdc11 U32 <- t9dae U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }
0b 45 38 

# tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
# 81961 ClearCarry []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
03 

# 81962 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
30 3c 38 38 

# 81966 AddCarry32_2 []
#       tbdb5 <- td60 Add Var(tdc11) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) })
31 

# mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
# 81967 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
23 38 48 

# 8196a Store32_2 []
#       mem[t6e8e] <- tbdb5 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Subtract, Ident("ch"), Number(0n48/0x30u8)) }) }
24 

# goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8196b JmpImm [Label24(RpnCalc_handle_if_end_49)]
#       goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 6f 19 08 

# :RpnCalc_handle_if_else_0_51 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8196f JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 73 19 08 

# :RpnCalc_handle_if_else_10_48 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_23
# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# Number(0n1/0x01u8)
# 81973 LoadImm8 [Register(0x69), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
#       Number(0n1/0x01u8)
04 69 01 

# return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(0n1/0x01u8)) }
# 81976 Copy8 [Register(0x69), Register(0x00)]
#       return Some(ta11a) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(0n1/0x01u8)) }
0b 69 00 

# 81979 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_RpnCalc_handle None
# function_end_RpnCalc_handle
# Unreachable None
# 8197b Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([108, 109, 110, 111])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([116, 117, 118, 119]) Number(0n987392/0x000f1100u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed (t44ed Ident("value")) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([121]) Number(0n0/0x00u8)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 (tae11 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([132, 133, 134, 135]) Number(0n987648/0x000f1200u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([124, 125, 126, 127]) Number(0n987652/0x000f1204u32)
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 (te468 Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n (Arg1 n Number(U8)) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 (t2187 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([136])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 (tf3c4 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_t0 (static "keyboard_enable" addr) Reg(U32) Some([116, 117, 118, 119]) Number(0n987144/0x000f1008u32)
# Var inline_RpnCalc_run_getchar_39_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_tb816 (tb816 TtyIn) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_te3c4 (te3c4 Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_teb6e (teb6e Ident("keyboard_enable")) Reg(U8) Some([112])
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([112])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([112])
# 81980 Copy32 [Register(0x00), Register(0x6c)]
#       Save function parameter 'calc' registers [0, 1, 2, 3] to locals [108, 109, 110, 111].
21 00 6c 

# :RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_predicate_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #1, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 81983 LoadImm8 [Register(0x79), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #1, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 79 00 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'
# 81986 Cmp8 [Register(0x79), Register(0x79)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'
15 79 79 

# 81989 JzImm [Label24(RpnCalc_run_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'
72 91 19 08 

# 8198d JmpImm [Label24(RpnCalc_run_while_end_2)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #2, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if ta97f == ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' -> if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2'
70 fc 1a 08 

# :RpnCalc_run_while_body_1 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(0n0/0x00u8), right: Number(0n0/0x00u8) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81991 LoadImm8 [Register(0x70), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 70 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n0/0x00u8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
# 81994 Cmp8 [Register(0x70), Register(0x79)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
15 70 79 

# 81997 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
72 9f 19 08 

# 8199b JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_end_2)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #8, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' -> if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2'
70 72 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_while_body_1 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(0n0/0x00u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 8199f IoReadyToRead [Register(0x70)]
#       ReadyToRead
79 70 

# inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
# 819a1 AndImm8 [Register(0x70), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_te3c4 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8))
18 70 01 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #12, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 819a4 LoadImm8 [Register(0x79), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #12, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 79 00 

# if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
# 819a7 Cmp8 [Register(0x70), Register(0x79)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
15 70 79 

# 819aa JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_0_5)]
#       if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'
72 e5 19 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_run\"), at #13, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' -> if inline_RpnCalc_run_getchar_39_te3c4 != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(BitwiseAnd, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(0n1/0x01u8)), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 819ae In0 [Register(0x78)]
#       inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 78 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
# # In IlFunctionId("RpnCalc_run"), at #16, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 
# 819b0 LoadImm32 [Register(0x74), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32 `.
#       # In IlFunctionId("RpnCalc_run"), at #16, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987392/0x000f1100u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 
20 74 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# 819b6 Copy8 [Register(0x78), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
0b 78 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
# # In IlFunctionId("RpnCalc_run"), at #18, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 
# 819b9 LoadImm32 [Register(0x7c), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32 `.
#       # In IlFunctionId("RpnCalc_run"), at #18, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987652/0x000f1204u32  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 
20 7c 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# # In IlFunctionId("RpnCalc_run"), at #19, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# 819bf Load8 [Register(0x7c), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("RpnCalc_run"), at #19, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
05 7c 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
# 819c2 LoadImm32 [Register(0x84), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
20 84 00 00 00 00 

# 819c8 Copy8 [Register(0x88), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }
0b 88 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
# # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
# 819cb ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
03 

# 819cc AddCarry32_1 [Register(0x74), Register(0x84), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
30 74 84 74 

# 819d0 AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "last") })
#       # In IlFunctionId("RpnCalc_run"), at #21, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s as they share the same const value: Number(0n987392/0x000f1100u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7)
31 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 819d1 Store8 [Register(0x80), Register(0x74)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 80 74 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "last")
# # In IlFunctionId("RpnCalc_run"), at #23, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
# 819d4 Load8 [Register(0x7c), Register(0x88)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "last")
#       # In IlFunctionId("RpnCalc_run"), at #23, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8
05 7c 88 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
# 819d7 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
04 00 01 

# 819da Add8NoCarryIn [Register(0x88), Register(0x00), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8))
14 88 00 70 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
# # In IlFunctionId("RpnCalc_run"), at #25, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 -> mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8
# 819de Store8 [Register(0x70), Register(0x7c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("RpnCalc_run"), at #25, replacing reference to inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff as they share the same const value: Number(0n987652/0x000f1204u32). mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8 -> mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tf3c4 U8
06 70 7c 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 819e1 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 12 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 819e5 LoadImm32 [Register(0x74), Constant32(0x000f1008=987144)]
#       inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
20 74 08 10 0f 00 

# inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Ident("keyboard_enable")
# 819eb Load8 [Register(0x74), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Ident("keyboard_enable")
05 74 70 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 819ee LoadImm8 [Register(0x79), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #31, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). inline_RpnCalc_run_getchar_39_ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 79 00 

# if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7'
# 819f1 Cmp8 [Register(0x70), Register(0x79)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7'
15 70 79 

# 819f4 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_1_7)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7'
72 12 1a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nComparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"RpnCalc_run\"), at #32, replacing reference to inline_RpnCalc_run_getchar_39_ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' -> if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7'\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_1_6)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_true_1_6
# None <= call Keyboard_poll() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52}
# Registers to save: []
# 819f8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 819fe StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c 08 1a 08 00 

# 81a04 JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 46 08 08 

# 81a08 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 81a0e JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 12 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_1_7 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_1_7
# :inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_end_3
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
# 81a12 LoadImm32 [Register(0x74), Constant32(0x000f1100=987392)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987392/0x000f1100u32 `.
20 74 00 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 81a18 LoadImm32 [Register(0x84), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 84 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 81a1e Load8 [Register(0x84), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 84 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
# 81a21 LoadImm32 [Register(0x7c), Constant32(0x000f1204=987652)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987652/0x000f1204u32 `.
20 7c 04 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 81a27 Load8 [Register(0x7c), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 7c 78 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 81a2a Cmp8 [Register(0x80), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 80 78 

# 81a2d JzImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 35 1a 08 

# 81a31 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 43 1a 08 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# Number(0n0/0x00u8)
# 81a35 LoadImm8 [Register(0x79), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       Number(0n0/0x00u8)
04 79 00 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 81a38 Copy8 [Register(0x79), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
0b 79 70 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# 81a3b JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
70 6e 1a 08 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 81a3f JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 43 1a 08 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
# 81a43 LoadImm32 [Register(0x84), Constant32(0x000f1200=987648)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987648/0x000f1200u32 `.
20 84 00 12 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 81a49 Load8 [Register(0x84), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 84 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
# 81a4c LoadImm32 [Register(0x7c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
20 7c 00 00 00 00 

# 81a52 Copy8 [Register(0x80), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }
0b 80 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
# 81a55 ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
03 

# 81a56 AddCarry32_1 [Register(0x74), Register(0x7c), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
30 74 7c 74 

# 81a5a AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(U32), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: PtrFieldDeref("s", "first") })
31 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 81a5b Load8 [Register(0x74), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 74 78 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# PtrFieldDeref("s", "first")
# 81a5e Load8 [Register(0x84), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
#       PtrFieldDeref("s", "first")
05 84 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
# 81a61 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
04 00 01 

# 81a64 Add8NoCarryIn [Register(0x80), Register(0x00), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8))
14 80 00 70 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
# 81a68 Store8 [Register(0x70), Register(0x84)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_te468 U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(0n1/0x01u8)) }
06 70 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 81a6b Copy8 [Register(0x78), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 78 70 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 81a6e JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_predicate_0)]
#       goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 94 19 08 

# :inline_RpnCalc_run_getchar_39_getchar_while_end_2 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_while_end_2
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# :inline_RpnCalc_run_getchar_39_function_end_getchar None
# inline_RpnCalc_run_getchar_39_function_end_getchar
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# 81a72 Copy32 [Register(0x6c), Register(0x00)]
#       Arg0[c]=calc Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
21 6c 00 

# 81a75 Copy8 [Register(0x70), Register(0x04)]
#       Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 70 04 

# Registers used by this function: {108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 132, 133, 134, 136]
# 81a78 Push8 [Register(0x88)]
#       Saving reg0x88 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 88 

# 81a7a Push8 [Register(0x86)]
#       Saving reg0x86 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 86 

# 81a7c Push8 [Register(0x85)]
#       Saving reg0x85 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 85 

# 81a7e Push8 [Register(0x84)]
#       Saving reg0x84 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 84 

# 81a80 Push8 [Register(0x80)]
#       Saving reg0x80 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 80 

# 81a82 Push8 [Register(0x7f)]
#       Saving reg0x7f before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7f 

# 81a84 Push8 [Register(0x7e)]
#       Saving reg0x7e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7e 

# 81a86 Push8 [Register(0x7d)]
#       Saving reg0x7d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7d 

# 81a88 Push8 [Register(0x7c)]
#       Saving reg0x7c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7c 

# 81a8a Push8 [Register(0x79)]
#       Saving reg0x79 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 79 

# 81a8c Push8 [Register(0x78)]
#       Saving reg0x78 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 78 

# 81a8e Push8 [Register(0x77)]
#       Saving reg0x77 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 77 

# 81a90 Push8 [Register(0x76)]
#       Saving reg0x76 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 76 

# 81a92 Push8 [Register(0x75)]
#       Saving reg0x75 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 75 

# 81a94 Push8 [Register(0x74)]
#       Saving reg0x74 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 74 

# 81a96 Push8 [Register(0x70)]
#       Saving reg0x70 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 70 

# 81a98 Push8 [Register(0x6f)]
#       Saving reg0x6f before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6f 

# 81a9a Push8 [Register(0x6e)]
#       Saving reg0x6e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6e 

# 81a9c Push8 [Register(0x6d)]
#       Saving reg0x6d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6d 

# 81a9e Push8 [Register(0x6c)]
#       Saving reg0x6c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6c 

# 81aa0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c fc ff ff ff 

# 81aa6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_handle))
25 0c b0 1a 08 00 

# 81aac JmpImm [Label24(:RpnCalc_handle)]
#       PseudoCall(Label24(:RpnCalc_handle))
70 92 09 08 

# 81ab0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c 04 00 00 00 

# 81ab6 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6c 

# 81ab8 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6d 

# 81aba Pop8 [Register(0x6e)]
#       Restoring reg0x6e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6e 

# 81abc Pop8 [Register(0x6f)]
#       Restoring reg0x6f after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6f 

# 81abe Pop8 [Register(0x70)]
#       Restoring reg0x70 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 70 

# 81ac0 Pop8 [Register(0x74)]
#       Restoring reg0x74 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 74 

# 81ac2 Pop8 [Register(0x75)]
#       Restoring reg0x75 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 75 

# 81ac4 Pop8 [Register(0x76)]
#       Restoring reg0x76 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 76 

# 81ac6 Pop8 [Register(0x77)]
#       Restoring reg0x77 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 77 

# 81ac8 Pop8 [Register(0x78)]
#       Restoring reg0x78 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 78 

# 81aca Pop8 [Register(0x79)]
#       Restoring reg0x79 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 79 

# 81acc Pop8 [Register(0x7c)]
#       Restoring reg0x7c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7c 

# 81ace Pop8 [Register(0x7d)]
#       Restoring reg0x7d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7d 

# 81ad0 Pop8 [Register(0x7e)]
#       Restoring reg0x7e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7e 

# 81ad2 Pop8 [Register(0x7f)]
#       Restoring reg0x7f after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7f 

# 81ad4 Pop8 [Register(0x80)]
#       Restoring reg0x80 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 80 

# 81ad6 Pop8 [Register(0x84)]
#       Restoring reg0x84 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 84 

# 81ad8 Pop8 [Register(0x85)]
#       Restoring reg0x85 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 85 

# 81ada Pop8 [Register(0x86)]
#       Restoring reg0x86 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 86 

# 81adc Pop8 [Register(0x88)]
#       Restoring reg0x88 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 88 

# 81ade Copy8 [Register(0x00), Register(0x70)]
#       Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 00 70 

# t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Ident("result")
# optimized away noop copy Instruction { source: "t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"result\"), right: Number(0n0/0x00u8) }\nIdent(\"result\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("RpnCalc_run"), at #70, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
# 81ae1 LoadImm8 [Register(0x79), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("RpnCalc_run"), at #70, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). ta97f <- 0n0/0x00u8  -> inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f <- 0n0/0x00u8 
04 79 00 

# if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("RpnCalc_run"), at #71, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'
# 81ae4 Cmp8 [Register(0x70), Register(0x79)]
#       if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #71, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'
15 70 79 

# 81ae7 JzImm [Label24(RpnCalc_run_if_true_0_4)]
#       if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #71, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'
72 ef 1a 08 

# 81aeb JmpImm [Label24(RpnCalc_run_if_else_0_5)]
#       if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("RpnCalc_run"), at #71, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). if t57fd == ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' -> if t57fd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5'
70 f8 1a 08 

# :RpnCalc_run_if_true_0_4 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(0n0/0x00u8) }, [Return { value: Some(Number(0n0/0x00u8)) }])], else_block: [] }
# RpnCalc_run_if_true_0_4
# return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(0n0/0x00u8)) }
# # In IlFunctionId("RpnCalc_run"), at #73, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f)
# 81aef Copy8 [Register(0x79), Register(0x00)]
#       return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(0n0/0x00u8)) }
#       # In IlFunctionId("RpnCalc_run"), at #73, replacing reference to ta97f with inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f as they share the same const value: Number(0n0/0x00u8). return Some(ta97f) -> return Some(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_ta97f)
0b 79 00 

# 81af2 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 81af4 JmpImm [Label24(RpnCalc_run_if_end_3)]
#       goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 f8 1a 08 

# :RpnCalc_run_if_else_0_5 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 81af8 JmpImm [Label24(RpnCalc_run_while_predicate_0)]
#       goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 83 19 08 

# :RpnCalc_run_while_end_2 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run None
# function_end_RpnCalc_run
# Unreachable None
# 81afc Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :delay
# Ret None
# Arg0=x
# Var t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([140, 141, 142, 143]) Number(0n0/0x00000000u32)
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([144, 145, 146, 147])
# Var x (Arg0 x Number(U32)) Reg(U32) Some([144, 145, 146, 147])
# 81b01 Copy32 [Register(0x00), Register(0x90)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [144, 145, 146, 147].
21 00 90 

# :delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81b04 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 8c 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
# 81b0a Cmp8 [Register(0x93), Register(0x8f)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
15 93 8f 

# 81b0d Cmp8IfZero [Register(0x92), Register(0x8e)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 92 8e 

# 81b10 Cmp8IfZero [Register(0x91), Register(0x8d)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 91 8d 

# 81b13 Cmp8IfZero [Register(0x90), Register(0x8c)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
16 90 8c 

# 81b16 JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }
72 24 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(0n0/0x00000000u32) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(0n0/0x00000000u32) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32)) }\nArithmetic(Subtract, Ident(\"x\"), Number(0n1/0x00000001u32))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
# Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
# 81b1a AddImm32IgnoreCarry [Register(0x90), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Subtract, Ident("x"), Number(0n1/0x00000001u32))
32 90 ff ff ff ff 

# goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# 81b20 JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
70 04 1b 08 

# :delay_while_end_2 Some('/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 81b24 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 81b26 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_a (Arg0 a Number(U32)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_b (Arg1 b Number(U32)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_hi (Local hi Number(U32) Reg(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_b (Arg1 b Number(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([177])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([177])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([178]) Number(0n0/0x00u8)
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([185])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([185])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_div16_43_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_r (Local r Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_t1506 (t1506 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([196])
# Var inline_div32_div16_43_t4299 (t4299 Index("x", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_t5508 (t5508 Ident("hi")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_t5be0 (t5be0 Index("b", Number(0n0/0x00u8))) Reg(U8) Some([197])
# Var inline_div32_div16_43_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([160, 161, 162, 163]) Number(0n0/0x00000000u32)
# Var inline_div32_div16_43_t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([156, 157, 158, 159]) Number(0n256/0x00000100u32)
# Var inline_div32_div16_43_ta670 (ta670 Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))) Reg(U8) Some([196])
# Var inline_div32_div16_43_tace9 (tace9 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_tad57 (tad57 Ident("x")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_taee0 (taee0 Ident("r")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_tb0ef (tb0ef Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_tcd34 (tcd34 Index("x", Number(0n2/0x02u8))) Reg(U8) Some([176])
# Var inline_div32_div16_43_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_x (Local x Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_44_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_44_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_44_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_44_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_a (Arg0 a Number(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_45_t17d0 (t17d0 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t1aa2 (t1aa2 Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_45_t32ea (t32ea Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_45_t4954 (t4954 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t837a (t837a Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t878b (t878b Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_45_t9170 (t9170 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) Reg(U8) Some([185])
# Var inline_div32_shiftright1_45_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_45_t965c (t965c Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tafc1 (tafc1 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tbe (tbe Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdb4c (tdb4c Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdbbe (tdbbe Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdc9f (tdc9f Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tf435 (tf435 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))) Reg(U8) Some([184])
# Var lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var mid (Local mid Number(U32) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var r (Local r Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([160, 161, 162, 163])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([160, 161, 162, 163])
# Var t4917 (t4917 Number(0n65536/0x00010000u32)) Reg(U32) Some([156, 157, 158, 159]) Number(0n65536/0x00010000u32)
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([156, 157, 158, 159])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([200, 201, 202, 203])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([160, 161, 162, 163])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([160, 161, 162, 163])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([160, 161, 162, 163])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([168, 169, 170, 171])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([204, 205, 206, 207])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([148, 149, 150, 151])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([204, 205, 206, 207])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([164, 165, 166, 167])
# Var x (Local x Number(U32) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# 81b2b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 81b31 Copy32 [Register(0x00), Register(0x94)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [148, 149, 150, 151].
21 00 94 

# 81b34 Copy32 [Register(0x04), Register(0x98)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [152, 153, 154, 155].
21 04 98 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 81b37 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81b3d Cmp8 [Register(0x9b), Register(0x97)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9b 97 

# 81b40 Cmp8IfZero [Register(0x9a), Register(0x96)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9a 96 

# 81b43 Cmp8IfZero [Register(0x99), Register(0x95)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 99 95 

# 81b46 Cmp8IfZero [Register(0x98), Register(0x94)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 98 94 

# 81b49 JcImm [Label24(div32_if_else_0_2)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 68 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# div32_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("div32"), at #5, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# 81b4d LoadImm32 [Register(0xa0), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("div32"), at #5, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
20 a0 00 00 00 00 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 81b53 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
32 0c 08 00 00 00 

# return Some(inline_div32_div16_43_t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# # In IlFunctionId("div32"), at #7, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). return Some(t60ec) -> return Some(inline_div32_div16_43_t60ec)
# 81b59 Copy32 [Register(0xa0), Register(0x00)]
#       return Some(inline_div32_div16_43_t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       # In IlFunctionId("div32"), at #7, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). return Some(t60ec) -> return Some(inline_div32_div16_43_t60ec)
21 a0 00 

# 81b5c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 81b62 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# 81b64 JmpImm [Label24(div32_if_end_0)]
#       goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
70 68 1b 08 

# :div32_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_else_0_2
# :div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# Number(0n65536/0x00010000u32)
# 81b68 LoadImm32 [Register(0x9c), Constant32(0x00010000=65536)]
#       t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
#       Number(0n65536/0x00010000u32)
20 9c 00 00 01 00 

# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
# 81b6e Cmp8 [Register(0x9f), Register(0x97)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
15 9f 97 

# 81b71 Cmp8IfZero [Register(0x9e), Register(0x96)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 9e 96 

# 81b74 Cmp8IfZero [Register(0x9d), Register(0x95)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 9d 95 

# 81b77 Cmp8IfZero [Register(0x9c), Register(0x94)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
16 9c 94 

# 81b7a JcImm [Label24(div32_if_else_0_5)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }
71 1e 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n65536/0x00010000u32) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n65536/0x00010000u32) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# div32_if_true_0_4
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81b7e Cmp8 [Register(0x9b), Register(0x97)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9b 97 

# 81b81 Cmp8IfZero [Register(0x9a), Register(0x96)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9a 96 

# 81b84 Cmp8IfZero [Register(0x99), Register(0x95)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 99 95 

# 81b87 Cmp8IfZero [Register(0x98), Register(0x94)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 98 94 

# 81b8a JcImm [Label24(inline_div32_div16_43_div16_if_else_0_2)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 9f 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(0n0/0x00000000u32)) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# Number(0n0/0x00000000u32)
# 81b8e LoadImm32 [Register(0xa0), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
#       Number(0n0/0x00000000u32)
20 a0 00 00 00 00 

# te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 81b94 Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(0n0/0x00000000u32)) }
# 81b97 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(0n0/0x00000000u32)) }
70 09 1e 08 

# goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# 81b9b JmpImm [Label24(inline_div32_div16_43_div16_if_end_0)]
#       goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
70 9f 1b 08 

# :inline_div32_div16_43_div16_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_else_0_2
# :inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_end_0
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 81b9f LoadImm32 [Register(0x9c), Constant32(0x00000100=256)]
#       inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 9c 00 01 00 00 

# if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 81ba5 Cmp8 [Register(0x9f), Register(0x97)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 9f 97 

# 81ba8 Cmp8IfZero [Register(0x9e), Register(0x96)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 9e 96 

# 81bab Cmp8IfZero [Register(0x9d), Register(0x95)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 9d 95 

# 81bae Cmp8IfZero [Register(0x9c), Register(0x94)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 9c 94 

# 81bb1 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_5)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 d0 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_4
# inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("a", Number(0n0/0x00u8))
# 81bb5 Copy8 [Register(0x94), Register(0xc4)]
#       inline_div32_div16_43_t3404 <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("a", Number(0n0/0x00u8))
0b 94 c4 

# inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# Index("b", Number(0n0/0x00u8))
# 81bb8 Copy8 [Register(0x98), Register(0xc5)]
#       inline_div32_div16_43_t5be0 <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
#       Index("b", Number(0n0/0x00u8))
0b 98 c5 

# inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
# 81bbb Divide8 [Register(0xc4), Register(0xc5), Register(0xc4)]
#       inline_div32_div16_43_ta670 <- inline_div32_div16_43_t3404 Divide Var(inline_div32_div16_43_t5be0) Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
#       Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8)))
17 c4 c5 c4 

# inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
# 81bbf LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
20 94 00 00 00 00 

# 81bc5 Copy8 [Register(0xc4), Register(0x94)]
#       inline_div32_div16_43_tb0ef U32 <- inline_div32_div16_43_ta670 U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
#       Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }
0b c4 94 

# te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_tb0ef U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nReturn { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index(\"a\", Number(0n0/0x00u8)), Index(\"b\", Number(0n0/0x00u8))) }) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
# 81bc8 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(U32), value: Arithmetic(Divide, Index("a", Number(0n0/0x00u8)), Index("b", Number(0n0/0x00u8))) }) }
70 09 1e 08 

# goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# 81bcc JmpImm [Label24(inline_div32_div16_43_div16_if_end_3)]
#       goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
70 d0 1b 08 

# :inline_div32_div16_43_div16_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_else_0_5
# :inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_end_3
# inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81bd0 LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 bc 00 00 00 00 

# inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
# Number(0n65535/0x0000ffffu32)
# 81bd6 LoadImm32 [Register(0x9c), Constant32(0x0000ffff=65535)]
#       inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0n65535/0x0000ffffu32) }
#       Number(0n65535/0x0000ffffu32)
20 9c ff ff 00 00 

# :inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_predicate_6
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81bdc Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 bc a0 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81bdf Cmp8 [Register(0x9f), Register(0xa3)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 9f a3 

# 81be2 Cmp8IfZero [Register(0x9e), Register(0xa2)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9e a2 

# 81be5 Cmp8IfZero [Register(0x9d), Register(0xa1)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9d a1 

# 81be8 Cmp8IfZero [Register(0x9c), Register(0xa0)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9c a0 

# 81beb JcImm [Label24(inline_div32_div16_43_div16_while_end_8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 03 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_body_7)], resolved: None }
# :inline_div32_div16_43_div16_while_body_7 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# inline_div32_div16_43_div16_while_body_7
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("lo")
# 81bef Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
#       Ident("lo")
21 bc a0 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\nArithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# 81bf2 ClearCarry []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
03 

# 81bf3 AddCarry32_1 [Register(0xa0), Register(0x9c), Register(0xa0)]
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
30 a0 9c a0 

# 81bf7 AddCarry32_2 []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
31 

# inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 81bf8 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 81bfb LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 81bfe Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf435 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 b8 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 81c03 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b b8 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 81c06 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 81c09 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 81c0c Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 81c11 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b b8 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 81c14 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 81c17 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 81c1a Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t878b <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 b9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 81c1f Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b b8 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 81c22 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 81c25 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 81c28 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t32ea <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 81c2d Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b b8 a3 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 81c30 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 81c33 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 81c36 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b b8 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 81c39 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3404 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 81c3c Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 81c3f Copy8 [Register(0xb0), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b0 b9 

# 81c42 AndImm8 [Register(0xb9), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9170 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 b9 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 81c45 Or8 [Register(0xb8), Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3404 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c b8 b9 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 81c49 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b b8 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 81c4c Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 81c4f Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81c52 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 81c55 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b b8 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 81c58 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3009 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 81c5b Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 81c5e Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b b9 b8 

# 81c61 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 81c64 Or8 [Register(0xb0), Register(0xb8), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe <- inline_div32_div16_43_inline_div16_shiftright1_42_t3009 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b0 b8 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 81c68 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b b8 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 81c6b Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 81c6e Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b b9 b8 

# 81c71 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4954 <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 81c74 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b b8 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 81c77 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 81c7a Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 81c7d Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b0 b8 

# 81c80 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t17d0 <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 81c83 Or8 [Register(0xb9), Register(0xb8), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t837a <- inline_div32_div16_43_inline_div16_shiftright1_42_t3b02 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c b9 b8 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 81c87 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b b8 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 81c8a Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t94df <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 81c8d Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81c90 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t965c <- inline_div32_div16_43_inline_div16_shiftright1_42_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 81c93 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b b8 a3 

# inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81c96 Copy32 [Register(0xa0), Register(0xc0)]
#       inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a0 c0 

# :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 None
# inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("mid")
# 81c99 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# 81c9c Copy32 [Register(0x98), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
21 98 a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 81c9f Mul8_16 [Register(0xa0), Register(0xa4), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 a0 a4 a8 

# 81ca3 LoadImm8 [Register(0xaa), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 aa 00 

# 81ca6 LoadImm8 [Register(0xab), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 ab 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81ca9 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81cac LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 b4 00 00 00 00 

# 81cb2 Copy8 [Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81cb5 Copy8 [Register(0xa5), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b a5 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81cb8 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 ac 00 00 00 00 

# 81cbe Copy8 [Register(0xb8), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b b8 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81cc1 Mul8_16 [Register(0xb4), Register(0xac), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 b4 ac ac 

# 81cc5 LoadImm8 [Register(0xae), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 ae 00 

# 81cc8 LoadImm8 [Register(0xaf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 af 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 81ccb Copy8 [Register(0xad), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b ad b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 81cce Copy8 [Register(0xb1), Register(0xaf)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b b1 af 

# inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 81cd1 Copy8 [Register(0xac), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t9922 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b ac b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 81cd4 Copy8 [Register(0xb1), Register(0xae)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b b1 ae 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 81cd7 LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 b2 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81cda Copy8 [Register(0xb2), Register(0xad)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b2 ad 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81cdd Copy8 [Register(0xb2), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b2 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 81ce0 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 81ce1 AddCarry32_1 [Register(0xa8), Register(0xac), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 a8 ac a8 

# 81ce5 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 81ce6 Copy8 [Register(0xa5), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te47a <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b a5 b8 

# inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 81ce9 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 ac 00 00 00 00 

# 81cef Copy8 [Register(0xb8), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b b8 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 81cf2 Mul8_16 [Register(0xa0), Register(0xac), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 a0 ac ac 

# 81cf6 LoadImm8 [Register(0xae), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 ae 00 

# 81cf9 LoadImm8 [Register(0xaf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 af 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 81cfc Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t3009 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 81cff LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 b4 00 00 00 00 

# 81d05 Copy8 [Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b b0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 81d08 Mul8_16 [Register(0xb4), Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 b4 a4 a0 

# 81d0c LoadImm8 [Register(0xa2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 a2 00 

# 81d0f LoadImm8 [Register(0xa3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tb9f0 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 a3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81d12 Copy32 [Register(0xac), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 ac a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81d15 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 81d16 AddCarry32_1 [Register(0xa4), Register(0xa0), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 a4 a0 ac 

# 81d1a AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 81d1b Copy8 [Register(0xae), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8575 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b ae b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 81d1e Copy8 [Register(0xb0), Register(0xaf)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b b0 af 

# inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 81d21 Copy8 [Register(0xad), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b ad b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 81d24 Copy8 [Register(0xb0), Register(0xae)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b b0 ae 

# inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 81d27 Copy8 [Register(0xac), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b ac b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 81d2a Copy8 [Register(0xb0), Register(0xad)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b b0 ad 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 81d2d Copy8 [Register(0xb2), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b b2 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 81d30 Copy32 [Register(0xac), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 ac a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81d33 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 81d34 AddCarry32_1 [Register(0xa8), Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 a8 a4 a0 

# 81d38 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 None
# inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n2/0x02u8))
# 81d39 Copy8 [Register(0xa2), Register(0xb0)]
#       inline_div32_div16_43_tcd34 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n2/0x02u8))
0b a2 b0 

# if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("div32"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11'
# 81d3c Cmp8 [Register(0xb0), Register(0xb2)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11'
15 b0 b2 

# 81d3f JcImm [Label24(inline_div32_div16_43_div16_if_else_0_11)]
#       if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11'
71 57 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"div32\"), at #142, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_tcd34 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' -> if inline_div32_div16_43_tcd34 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11'\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n2/0x02u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_10
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81d43 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81d46 Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 81d49 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81d4f JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 dc 1b 08 

# goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81d53 JmpImm [Label24(inline_div32_div16_43_div16_if_end_9)]
#       goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
70 57 1d 08 

# :inline_div32_div16_43_div16_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_11
# :inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_9
# inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Index("x", Number(0n3/0x03u8))
# 81d57 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_t4299 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Index("x", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("div32"), at #151, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
# 81d5a LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("div32"), at #151, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). inline_div32_div16_43_ta97f <- 0n0/0x00u8  -> inline_div32_div16_43_inline_div16_mul16_32_4_ta97f <- 0n0/0x00u8 
04 b2 00 

# if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
# # In IlFunctionId("div32"), at #152, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14'
# 81d5d Cmp8 [Register(0xb0), Register(0xb2)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #152, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14'
15 b0 b2 

# 81d60 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_14)]
#       if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("div32"), at #152, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14'
71 78 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"div32\"), at #152, replacing reference to inline_div32_div16_43_ta97f with inline_div32_div16_43_inline_div16_mul16_32_4_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_div32_div16_43_t4299 > inline_div32_div16_43_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' -> if inline_div32_div16_43_t4299 > inline_div32_div16_43_inline_div16_mul16_32_4_ta97f then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14'\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(0n3/0x03u8)), right: Number(0n0/0x00u8) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_13
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81d64 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81d67 Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 81d6a AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81d70 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 dc 1b 08 

# goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81d74 JmpImm [Label24(inline_div32_div16_43_div16_if_end_12)]
#       goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
70 78 1d 08 

# :inline_div32_div16_43_div16_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_14
# :inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_12
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 81d78 Cmp8 [Register(0xa3), Register(0x97)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 81d7b Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 81d7e Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 81d81 Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 81d84 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_17)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 9c 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_16
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81d88 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81d8b Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a0 9c 

# 81d8e AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81d94 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 dc 1b 08 

# goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81d98 JmpImm [Label24(inline_div32_div16_43_div16_if_end_15)]
#       goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
70 9c 1d 08 

# :inline_div32_div16_43_div16_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_17
# :inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_15
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 81d9c Cmp8 [Register(0xa3), Register(0x97)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 81d9f Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 81da2 Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 81da5 Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 81da8 JzImm [Label24(inline_div32_div16_43_div16_if_true_0_19)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 b0 1d 08 

# 81dac JmpImm [Label24(inline_div32_div16_43_div16_if_else_0_20)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 be 1d 08 

# :inline_div32_div16_43_div16_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_19
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81db0 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c0 a0 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81db3 Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81db6 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 09 1e 08 

# goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81dba JmpImm [Label24(inline_div32_div16_43_div16_if_end_18)]
#       goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
70 be 1d 08 

# :inline_div32_div16_43_div16_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_20
# :inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_18
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 81dbe Copy32 [Register(0xa0), Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a0 00 

# 81dc1 Invert8 [Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 81dc3 Invert8 [Register(0x01)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 81dc5 Invert8 [Register(0x02)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 81dc7 Invert8 [Register(0x03)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 81dc9 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 81dcf ClearCarry []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 81dd0 AddCarry32_1 [Register(0x94), Register(0x00), Register(0xa0)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 94 00 a0 

# 81dd4 AddCarry32_2 []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 81dd5 Cmp8 [Register(0x9b), Register(0xa3)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9b a3 

# 81dd8 Cmp8IfZero [Register(0x9a), Register(0xa2)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9a a2 

# 81ddb Cmp8IfZero [Register(0x99), Register(0xa1)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 99 a1 

# 81dde Cmp8IfZero [Register(0x98), Register(0xa0)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 98 a0 

# 81de1 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_23)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 f3 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_22 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_22
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81de5 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c0 a0 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81de8 Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81deb JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 09 1e 08 

# goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81def JmpImm [Label24(inline_div32_div16_43_div16_if_end_21)]
#       goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
70 f3 1d 08 

# :inline_div32_div16_43_div16_if_else_0_23 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_23
# :inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_21
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# 81df3 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 81df6 Copy32 [Register(0xa0), Register(0xbc)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 a0 bc 

# 81df9 AddImm32IgnoreCarry [Register(0xbc), Constant32(0x00000001=1)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 bc 01 00 00 00 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81dff JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
70 dc 1b 08 

# :inline_div32_div16_43_div16_while_end_8 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_while_end_8
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 81e03 Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 bc a0 

# te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 81e06 Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
21 a0 94 

# :inline_div32_div16_43_function_end_div16 None
# inline_div32_div16_43_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81e09 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
32 0c 08 00 00 00 

# return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81e0f Copy32 [Register(0x94), Register(0x00)]
#       return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
21 94 00 

# 81e12 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 81e18 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# 81e1a JmpImm [Label24(div32_if_end_3)]
#       goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
70 1e 1e 08 

# :div32_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_else_0_5
# :div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_end_3
# lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 81e1e LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 ac 00 00 00 00 

# hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
# Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
# Number(0xffffffffu32)
# 81e24 LoadImm32 [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(U32)), value: Number(0xffffffffu32) }
#       Number(0xffffffffu32)
20 9c ff ff ff ff 

# :div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_predicate_6
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81e2a Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 ac a0 

# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81e2d Cmp8 [Register(0x9f), Register(0xa3)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 9f a3 

# 81e30 Cmp8IfZero [Register(0x9e), Register(0xa2)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9e a2 

# 81e33 Cmp8IfZero [Register(0x9d), Register(0xa1)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9d a1 

# 81e36 Cmp8IfZero [Register(0x9c), Register(0xa0)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9c a0 

# 81e39 JcImm [Label24(div32_while_end_8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 7c 20 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(U32)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }] }
# div32_while_body_7
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# Ident("lo")
# 81e3d Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
#       Ident("lo")
21 ac a0 

# inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 81e40 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 81e43 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 81e46 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_44_tf435 <- inline_div32_shiftright1_44_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 b8 b8 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 81e4b Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b b8 a0 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 81e4e Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 81e51 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 81e54 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t1aa2 <- inline_div32_shiftright1_44_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 81e59 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b b8 a1 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 81e5c Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 81e5f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 81e62 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_t878b <- inline_div32_shiftright1_44_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 b9 b8 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 81e67 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b b8 a2 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 81e6a Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 81e6d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 81e70 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t32ea <- inline_div32_shiftright1_44_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 81e75 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b b8 a3 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 81e78 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 81e7b AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tbe <- inline_div32_shiftright1_44_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 81e7e Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b b8 a0 

# inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 81e81 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_t3404 <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 81e84 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 81e87 Copy8 [Register(0xb0), Register(0xb9)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b0 b9 

# 81e8a AndImm8 [Register(0xb9), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t9170 <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 b9 80 

# inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 81e8d Or8 [Register(0xb8), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_tafc1 <- inline_div32_shiftright1_44_t3404 BitwiseOr Var(inline_div32_shiftright1_44_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c b8 b9 b8 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 81e91 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b b8 a0 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 81e94 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 81e97 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81e9a AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tdc9f <- inline_div32_shiftright1_44_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 81e9d Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b b8 a1 

# inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 81ea0 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t3009 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 81ea3 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 81ea6 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b b9 b8 

# 81ea9 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_tdb4c <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 81eac Or8 [Register(0xb0), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_44_tdbbe <- inline_div32_shiftright1_44_t3009 BitwiseOr Var(inline_div32_shiftright1_44_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b0 b8 b8 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 81eb0 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b b8 a1 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 81eb3 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 81eb6 Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b b9 b8 

# 81eb9 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t4954 <- inline_div32_shiftright1_44_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 81ebc Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b b8 a2 

# inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 81ebf Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_44_t3b02 <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 81ec2 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 81ec5 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b0 b8 

# 81ec8 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t17d0 <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 81ecb Or8 [Register(0xb9), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_44_t837a <- inline_div32_shiftright1_44_t3b02 BitwiseOr Var(inline_div32_shiftright1_44_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c b9 b8 b8 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 81ecf Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b b8 a2 

# inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 81ed2 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t94df <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 81ed5 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81ed8 AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t965c <- inline_div32_shiftright1_44_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 81edb Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b b8 a3 

# inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81ede Copy32 [Register(0xa0), Register(0xc8)]
#       t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a0 c8 

# :inline_div32_shiftright1_44_function_end_shiftright1 None
# inline_div32_shiftright1_44_function_end_shiftright1
# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# 81ee1 Copy32 [Register(0x9c), Register(0xa0)]
#       inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
21 9c a0 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# Index("a", Number(0n0/0x00u8))
# 81ee4 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
# 81ee7 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
04 00 01 

# 81eea Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_45_tf435 <- inline_div32_shiftright1_45_t3404 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8))
1e 04 00 b8 b8 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
# 81eef Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf435 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n1/0x01u8)) }
0b b8 a0 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# Index("a", Number(0n1/0x01u8))
# 81ef2 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
# 81ef5 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
04 00 01 

# 81ef8 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t1aa2 <- inline_div32_shiftright1_45_t3009 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
# 81efd Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t1aa2 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n1/0x01u8)) }
0b b8 a1 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# Index("a", Number(0n2/0x02u8))
# 81f00 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
# 81f03 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
04 00 01 

# 81f06 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_t878b <- inline_div32_shiftright1_45_t3b02 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8))
1e 04 00 b9 b8 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
# 81f0b Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t878b U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n1/0x01u8)) }
0b b8 a2 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# Index("a", Number(0n3/0x03u8))
# 81f0e Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
# 81f11 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
04 00 01 

# 81f14 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t32ea <- inline_div32_shiftright1_45_t94df RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8))
1e 04 00 b0 b8 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
# 81f19 Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t32ea U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n1/0x01u8)) }
0b b8 a3 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n0/0x00u8))
# 81f1c Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
# 81f1f AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tbe <- inline_div32_shiftright1_45_t3404 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
# 81f22 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tbe U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n127/0x7fu8)) }
0b b8 a0 

# inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n0/0x00u8))
# 81f25 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_t3404 <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n0/0x00u8))
0b a0 b8 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# Index("a", Number(0n1/0x01u8))
# 81f28 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
# 81f2b Copy8 [Register(0xb0), Register(0xb9)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
0b b0 b9 

# 81f2e AndImm8 [Register(0xb9), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t9170 <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))
18 b9 80 

# inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
# 81f31 Or8 [Register(0xb8), Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_tafc1 <- inline_div32_shiftright1_45_t3404 BitwiseOr Var(inline_div32_shiftright1_45_t9170) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8)))
1c b8 b9 b8 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
# 81f35 Copy8 [Register(0xb8), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tafc1 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n128/0x80u8))) }
0b b8 a0 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n1/0x01u8))
# 81f38 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
# 81f3b Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81f3e AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tdc9f <- inline_div32_shiftright1_45_t3009 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
# 81f41 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdc9f U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n127/0x7fu8)) }
0b b8 a1 

# inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n1/0x01u8))
# 81f44 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t3009 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n1/0x01u8))
0b a1 b0 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# Index("a", Number(0n2/0x02u8))
# 81f47 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
# 81f4a Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
0b b9 b8 

# 81f4d AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_tdb4c <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
# 81f50 Or8 [Register(0xb0), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_45_tdbbe <- inline_div32_shiftright1_45_t3009 BitwiseOr Var(inline_div32_shiftright1_45_tdb4c) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8)))
1c b0 b8 b8 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
# 81f54 Copy8 [Register(0xb8), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_tdbbe U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n128/0x80u8))) }
0b b8 a1 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n2/0x02u8))
# 81f57 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
# 81f5a Copy8 [Register(0xb9), Register(0xb8)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
0b b9 b8 

# 81f5d AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t4954 <- inline_div32_shiftright1_45_t3b02 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
# 81f60 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t4954 U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n127/0x7fu8)) }
0b b8 a2 

# inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Index("a", Number(0n2/0x02u8))
# 81f63 Copy8 [Register(0xa2), Register(0xb9)]
#       inline_div32_shiftright1_45_t3b02 <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Index("a", Number(0n2/0x02u8))
0b a2 b9 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# Index("a", Number(0n3/0x03u8))
# 81f66 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
# 81f69 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
0b b0 b8 

# 81f6c AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t17d0 <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))
18 b8 80 

# inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
# 81f6f Or8 [Register(0xb9), Register(0xb8), Register(0xb8)]
#       inline_div32_shiftright1_45_t837a <- inline_div32_shiftright1_45_t3b02 BitwiseOr Var(inline_div32_shiftright1_45_t17d0) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8)))
1c b9 b8 b8 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
# 81f73 Copy8 [Register(0xb8), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t837a U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n128/0x80u8))) }
0b b8 a2 

# inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# Index("a", Number(0n3/0x03u8))
# 81f76 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t94df <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
#       Index("a", Number(0n3/0x03u8))
0b a3 b0 

# inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
# 81f79 Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
0b b0 b8 

# 81f7c AndImm8 [Register(0xb8), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t965c <- inline_div32_shiftright1_45_t94df BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8))
18 b8 7f 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
# 81f7f Copy8 [Register(0xb8), Register(0xa3)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_t965c U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n127/0x7fu8)) }
0b b8 a3 

# inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# :inline_div32_shiftright1_45_function_end_shiftright1 None
# inline_div32_shiftright1_45_function_end_shiftright1
# mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# 81f82 ClearCarry []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
03 

# 81f83 AddCarry32_1 [Register(0xc8), Register(0xa0), Register(0xa4)]
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
30 c8 a0 a4 

# 81f87 AddCarry32_2 []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(U32)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
31 

# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 81f88 Copy32 [Register(0x0c), Register(0xcc)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c cc 

# tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# 81f8b Copy32 [Register(0xcc), Register(0xa0)]
#       tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
21 cc a0 

# None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# 81f8e Copy32 [Register(0xa4), Register(0x00)]
#       Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a4 00 

# 81f91 Copy32 [Register(0x98), Register(0x04)]
#       Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 98 04 

# 81f94 Copy32 [Register(0xa0), Register(0x08)]
#       Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a0 08 

# Registers used by this function: {148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207}
# Registers used by callee tree: {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111}
# Registers to save: []
# 81f97 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 81f9d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c a7 1f 08 00 

# 81fa3 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 c1 25 08 

# 81fa7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 81fad Copy32 [Register(0x0c), Register(0xcc)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c cc 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 81fb0 Copy32 [Register(0xcc), Register(0xa0)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 cc a0 

# 81fb3 AddImm32IgnoreCarry [Register(0xa0), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 a0 04 00 00 00 

# tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# LocalFieldDeref("x64", "hi")
# 81fb9 Load32 [Register(0xa0), Register(0xa8)]
#       tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       LocalFieldDeref("x64", "hi")
22 a0 a8 

# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# # In IlFunctionId("div32"), at #309, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
# 81fbc LoadImm32 [Register(0xa0), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
#       # In IlFunctionId("div32"), at #309, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). t60ec <- 0n0/0x00000000u32  -> inline_div32_div16_43_t60ec <- 0n0/0x00000000u32 
20 a0 00 00 00 00 

# if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
# # In IlFunctionId("div32"), at #310, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'
# 81fc2 Cmp8 [Register(0xab), Register(0xa3)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #310, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'
15 ab a3 

# 81fc5 Cmp8IfZero [Register(0xaa), Register(0xa2)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #310, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'
16 aa a2 

# 81fc8 Cmp8IfZero [Register(0xa9), Register(0xa1)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #310, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'
16 a9 a1 

# 81fcb Cmp8IfZero [Register(0xa8), Register(0xa0)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #310, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'
16 a8 a0 

# 81fce JcImm [Label24(div32_if_else_0_11)]
#       if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("div32"), at #310, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'
71 e3 1f 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(0n0/0x00000000u32) }\n# In IlFunctionId(\"div32\"), at #310, replacing reference to t60ec with inline_div32_div16_43_t60ec as they share the same const value: Number(0n0/0x00000000u32). if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' -> if tb973 > inline_div32_div16_43_t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11'\n", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(0n0/0x00000000u32) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_10
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81fd2 Copy32 [Register(0xa4), Register(0x9c)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a4 9c 

# 81fd5 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 81fdb JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 2a 1e 08 

# goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# 81fdf JmpImm [Label24(div32_if_end_9)]
#       goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
70 e3 1f 08 

# :div32_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_11
# :div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_9
# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 81fe3 Copy32 [Register(0x0c), Register(0xcc)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c cc 

# x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# 81fe6 Load32 [Register(0xcc), Register(0xa0)]
#       x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(U32)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
22 cc a0 

# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 81fe9 Cmp8 [Register(0xa3), Register(0x97)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 81fec Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 81fef Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 81ff2 Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 81ff5 JcImm [Label24(div32_if_else_0_14)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 0a 20 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }, Continue])], else_block: [] }
# div32_if_true_0_13
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
# 81ff9 Copy32 [Register(0xa4), Register(0x9c)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
21 a4 9c 

# 81ffc AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Subtract, Ident("mid"), Number(0n1/0x01u8))
32 9c ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 82002 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 2a 1e 08 

# goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# 82006 JmpImm [Label24(div32_if_end_12)]
#       goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
70 0a 20 08 

# :div32_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_14
# :div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_12
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 8200a Cmp8 [Register(0xa3), Register(0x97)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 8200d Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 82010 Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 82013 Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 82016 JzImm [Label24(div32_if_true_0_16)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 1e 20 08 

# 8201a JmpImm [Label24(div32_if_else_0_17)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 33 20 08 

# :div32_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_16
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 8201e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 82024 Copy32 [Register(0xa4), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a4 00 

# 82027 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 8202d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# 8202f JmpImm [Label24(div32_if_end_15)]
#       goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
70 33 20 08 

# :div32_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_17
# :div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_15
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 82033 Copy32 [Register(0xa0), Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a0 00 

# 82036 Invert8 [Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 82038 Invert8 [Register(0x01)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 8203a Invert8 [Register(0x02)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 8203c Invert8 [Register(0x03)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 8203e AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 82044 ClearCarry []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 82045 AddCarry32_1 [Register(0x94), Register(0x00), Register(0xa0)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 94 00 a0 

# 82049 AddCarry32_2 []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(U32)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 8204a Cmp8 [Register(0x9b), Register(0xa3)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9b a3 

# 8204d Cmp8IfZero [Register(0x9a), Register(0xa2)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9a a2 

# 82050 Cmp8IfZero [Register(0x99), Register(0xa1)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 99 a1 

# 82053 Cmp8IfZero [Register(0x98), Register(0xa0)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 98 a0 

# 82056 JcImm [Label24(div32_if_else_0_20)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 6f 20 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_19
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 8205a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 82060 Copy32 [Register(0xa4), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a4 00 

# 82063 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 82069 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# 8206b JmpImm [Label24(div32_if_end_18)]
#       goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
70 6f 20 08 

# :div32_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_20
# :div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_18
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"mid\"), Number(0n1/0x01u8))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
# 8206f Copy32 [Register(0xa4), Register(0xac)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
21 a4 ac 

# 82072 AddImm32IgnoreCarry [Register(0xac), Constant32(0x00000001=1)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("mid"), Number(0n1/0x01u8))
32 ac 01 00 00 00 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# 82078 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
70 2a 1e 08 

# :div32_while_end_8 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_while_end_8
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 8207c Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 ac a0 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 8207f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
32 0c 08 00 00 00 

# return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 82085 Copy32 [Register(0xa0), Register(0x00)]
#       return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
21 a0 00 

# 82088 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 8208e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_div32 None
# function_end_div32
# Unreachable None
# 82090 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([210])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([211])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([211])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([212])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([211])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([212])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }) Reg(U32) Some([220, 221, 222, 223])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([212])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([211])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 (tf14 Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) Reg(U8) Some([224])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([211])
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([211])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([211])
# Var t1730 (t1730 Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))) Reg(U8) Some([212])
# Var t2176 (t2176 Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))) Reg(U8) Some([212])
# Var t3e8f (t3e8f Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))) Reg(U8) Some([211])
# Var t4028 (t4028 Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))) Reg(U8) Some([211])
# Var t6611 (t6611 Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))) Reg(U8) Some([210])
# Var t791e (t791e Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))) Reg(U8) Some([211])
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([228, 229, 230, 231]) Number(0n2/0x00000002u32)
# Var tb5dc (tb5dc Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))) Reg(U8) Some([210])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([210])
# 82095 Copy8 [Register(0x00), Register(0xd3)]
#       Save function parameter 'i' registers [0] to locals [211].
0b 00 d3 

# 82098 Copy8 [Register(0x04), Register(0xd2)]
#       Save function parameter 'ch' registers [4] to locals [210].
0b 04 d2 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))\nAssign { target: Ident(\"row\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Divide, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xd3), Register(0xd3)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
# 8209b LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 8209e Divide8 [Register(0xd3), Register(0x00), Register(0xd4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Divide, Ident("i"), Number(0n20/0x14u8))
17 d3 00 d4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Ident("i")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xd3), Register(0xd3)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8)))\nArithmetic(Multiply, Ident(\"row\"), Number(0n20/0x14u8))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd4), Register(0xd4)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
# 820a2 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
04 00 14 

# 820a5 Mul8_8 [Register(0xd4), Register(0x00), Register(0xe0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tf14 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
#       Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))
10 d4 00 e0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
# 820a9 Copy8 [Register(0xe0), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
0b e0 00 

# 820ac Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
02 00 

# 820ae Add8NoCarryIn [Register(0xd3), Register(0x00), Register(0xd3)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tf14) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(0n20/0x14u8)))
14 d3 00 d3 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 820b2 LoadImm32 [Register(0xdc), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 dc 23 08 08 00 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd4), Register(0xd4)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
# 820b8 LoadImm32 [Register(0xd8), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
20 d8 00 00 00 00 

# 820be Copy8 [Register(0xd4), Register(0xd8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }
0b d4 d8 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
# 820c1 ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
03 

# 820c2 AddCarry32_1 [Register(0xdc), Register(0xd8), Register(0xd8)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
30 dc d8 d8 

# 820c6 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(U32), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 820c7 Load8 [Register(0xd8), Register(0xd4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 d8 d4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0xd3), Register(0xd3)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 820ca Add8NoCarryIn [Register(0xd4), Register(0xd3), Register(0xd3)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 d4 d3 d3 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0xd3), Register(0xd3)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical None
# inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(0n4/0x04u8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xd3), Register(0xd3)], resolved: None }
# t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
# 820ce LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
04 00 04 

# 820d1 Shift8 [Constant8(0x05=5), Register(0x00), Register(0xd3), Register(0xd4)]
#       t1730 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8))
1e 05 00 d3 d4 

# t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
# 820d6 OrImm8 [Register(0xd4), Constant8(0x08=8)]
#       t2176 <- t1730 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))
19 d4 08 

# None <= call io_write1(t2176,) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n8/0x08u8), Arithmetic(ShiftRight, Ident("pos"), Number(0n4/0x04u8)))] })
# 820d9 Out1 [Register(0xd4)]
#       IoWrite1
69 d4 

# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))] })\nArithmetic(BitwiseAnd, Ident(\"pos\"), Number(0n15/0x0fu8))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xd3), Register(0xd3)], resolved: None }
# t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
# 820db AndImm8 [Register(0xd3), Constant8(0x0f=15)]
#       t791e <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
#       Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))
18 d3 0f 

# None <= call io_write1(t791e,) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseAnd, Ident("pos"), Number(0n15/0x0fu8))] })
# 820de Out1 [Register(0xd3)]
#       IoWrite1
69 d3 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 820e0 LoadImm32 [Register(0xe4), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e4 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 820e6 Copy32 [Register(0xe4), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e4 00 

# Registers used by this function: {210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 820e9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 820ef StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c f9 20 08 00 

# 820f5 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 01 1b 08 

# 820f9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(0n4/0x04u8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xd2), Register(0xd2)], resolved: None }
# t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
# 820ff LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
04 00 04 

# 82102 Shift8 [Constant8(0x05=5), Register(0x00), Register(0xd2), Register(0xd3)]
#       t4028 <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8))
1e 05 00 d2 d3 

# t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
# 82107 OrImm8 [Register(0xd3), Constant8(0x80=128)]
#       t3e8f <- t4028 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))
19 d3 80 

# None <= call io_write1(t3e8f,) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(ShiftRight, Ident("ch"), Number(0n4/0x04u8)))] })
# 8210a Out1 [Register(0xd3)]
#       IoWrite1
69 d3 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))] })\nArithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8)))\nArithmetic(BitwiseAnd, Ident(\"ch\"), Number(0n15/0x0fu8))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xd2), Register(0xd2)], resolved: None }
# t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
# 8210c AndImm8 [Register(0xd2), Constant8(0x0f=15)]
#       t6611 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
#       Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8))
18 d2 0f 

# tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
# 8210f OrImm8 [Register(0xd2), Constant8(0x80=128)]
#       tb5dc <- t6611 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
#       Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))
19 d2 80 

# None <= call io_write1(tb5dc,) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(BitwiseOr, Number(0n128/0x80u8), Arithmetic(BitwiseAnd, Ident("ch"), Number(0n15/0x0fu8)))] })
# 82112 Out1 [Register(0xd2)]
#       IoWrite1
69 d2 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 82114 LoadImm32 [Register(0xe4), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 e4 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 8211a Copy32 [Register(0xe4), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 e4 00 

# Registers used by this function: {210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 8211d AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82123 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 2d 21 08 00 

# 82129 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 01 1b 08 

# 8212d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 82133 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 82135 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([232])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([236, 237, 238, 239]) Number(0n987145/0x000f1009u32)
# Var t385d (t385d Number(0n1/0x00000001u32)) Reg(U32) Some([236, 237, 238, 239]) Number(0n1/0x00000001u32)
# Var t3d69 (t3d69 Number(0n3/0x03u8)) Reg(U8) Some([232]) Number(0n3/0x03u8)
# Var t477 (t477 Number(0n8/0x08u8)) Reg(U8) Some([232]) Number(0n8/0x08u8)
# Var t9498 (t9498 Number(0n2/0x00000002u32)) Reg(U32) Some([236, 237, 238, 239]) Number(0n2/0x00000002u32)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([240, 241, 242, 243])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([240, 241, 242, 243])
# Var t9f48 (t9f48 Number(0n2/0x02u8)) Reg(U8) Some([232]) Number(0n2/0x02u8)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([232]) Number(0n1/0x01u8)
# Var ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([244]) Number(0n0/0x00u8)
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([232])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([244]) Number(0n80/0x50u8)
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([245]) Number(0n32/0x20u8)
# Var tec13 (tec13 Number(0n12/0x0cu8)) Reg(U8) Some([232]) Number(0n12/0x0cu8)
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 8213a LoadImm32 [Register(0xec), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
20 ec 09 10 0f 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82140 LoadImm8 [Register(0xf4), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 f4 00 

# mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
# 82143 Store8 [Register(0xf4), Register(0xec)]
#       mem[t0] <- ta97f U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(0n0/0x00u8) }
06 f4 ec 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82146 LoadImm8 [Register(0xe8), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 e8 00 

# :lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 82149 LoadImm8 [Register(0xf4), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 f4 50 

# if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 8214c Cmp8 [Register(0xf4), Register(0xe8)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 f4 e8 

# 8214f JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 73 21 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 82153 LoadImm32 [Register(0xf0), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 f0 00 00 00 00 

# 82159 Copy8 [Register(0xe8), Register(0xf0)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b e8 f0 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 8215c AddImm32IgnoreCarry [Register(0xf0), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 f0 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 82162 LoadImm8 [Register(0xf5), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 f5 20 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 82165 Store8 [Register(0xf5), Register(0xf0)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 f5 f0 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe8), Register(0xe8)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 82168 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 8216b Add8NoCarryIn [Register(0xe8), Register(0x00), Register(0xe8)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 e8 00 e8 

# goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 8216f JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
70 49 21 08 

# :lcd_init_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# lcd_init_while_end_2
# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 82173 LoadImm8 [Register(0xe8), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 e8 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 82176 Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 82178 LoadImm32 [Register(0xec), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 ec 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 8217e Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 ec 00 

# Registers used by this function: {232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82181 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82187 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 91 21 08 00 

# 8218d JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 01 1b 08 

# 82191 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 82197 LoadImm8 [Register(0xe8), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(80,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 e8 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 8219a Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 8219c LoadImm32 [Register(0xec), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 ec 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 821a2 Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 ec 00 

# Registers used by this function: {232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 821a5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 821ab StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c b5 21 08 00 

# 821b1 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 01 1b 08 

# 821b5 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# Number(0n3/0x03u8)
# 821bb LoadImm8 [Register(0xe8), Constant8(0x03=3)]
#       t3d69 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
#       Number(0n3/0x03u8)
04 e8 03 

# None <= call io_write1(t3d69,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n3/0x03u8)] })
# 821be Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# Number(0n1/0x00000001u32)
# 821c0 LoadImm32 [Register(0xec), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
#       Number(0n1/0x00000001u32)
20 ec 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
# 821c6 Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n1/0x00000001u32)] })
21 ec 00 

# Registers used by this function: {232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 821c9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 821cf StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c d9 21 08 00 

# 821d5 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 01 1b 08 

# 821d9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 821df LoadImm8 [Register(0xe8), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 e8 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 821e2 Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 821e4 LoadImm32 [Register(0xec), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 ec 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 821ea Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 ec 00 

# Registers used by this function: {232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 821ed AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 821f3 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c fd 21 08 00 

# 821f9 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 01 1b 08 

# 821fd AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# Number(0n2/0x02u8)
# 82203 LoadImm8 [Register(0xe8), Constant8(0x02=2)]
#       t9f48 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
#       Number(0n2/0x02u8)
04 e8 02 

# None <= call io_write1(t9f48,) Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n2/0x02u8)] })
# 82206 Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# Number(0n8/0x08u8)
# 82208 LoadImm8 [Register(0xe8), Constant8(0x08=8)]
#       t477 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
#       Number(0n8/0x08u8)
04 e8 08 

# None <= call io_write1(t477,) Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n8/0x08u8)] })
# 8220b Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 8220d LoadImm32 [Register(0xec), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 ec 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 82213 Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 ec 00 

# Registers used by this function: {232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82216 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 8221c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 26 22 08 00 

# 82222 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 01 1b 08 

# 82226 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 8222c LoadImm8 [Register(0xf4), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 f4 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 8222f Out1 [Register(0xf4)]
#       IoWrite1
69 f4 

# tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# Number(0n12/0x0cu8)
# 82231 LoadImm8 [Register(0xe8), Constant8(0x0c=12)]
#       tec13 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
#       Number(0n12/0x0cu8)
04 e8 0c 

# None <= call io_write1(tec13,) Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n12/0x0cu8)] })
# 82234 Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 82236 LoadImm32 [Register(0xec), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 ec 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 8223c Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 ec 00 

# Registers used by this function: {232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 8223f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82245 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 4f 22 08 00 

# 8224b JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 01 1b 08 

# 8224f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# Number(0n0/0x00u8)
# 82255 LoadImm8 [Register(0xf4), Constant8(0x00=0)]
#       ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(96,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
#       Number(0n0/0x00u8)
04 f4 00 

# None <= call io_write1(ta97f,) Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n0/0x00u8)] })
# 82258 Out1 [Register(0xf4)]
#       IoWrite1
69 f4 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# Number(0n1/0x01u8)
# 8225a LoadImm8 [Register(0xe8), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
#       Number(0n1/0x01u8)
04 e8 01 

# None <= call io_write1(ta11a,) Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(0n1/0x01u8)] })
# 8225d Out1 [Register(0xe8)]
#       IoWrite1
69 e8 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# Number(0n2/0x00000002u32)
# 8225f LoadImm32 [Register(0xec), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
#       Number(0n2/0x00000002u32)
20 ec 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
# Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
# 82265 Copy32 [Register(0xec), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] }) }
#       Call(Call { function: "delay", parameters: [Number(0n2/0x00000002u32)] })
21 ec 00 

# Registers used by this function: {232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82268 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 8226e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 78 22 08 00 

# 82274 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 01 1b 08 

# 82278 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 8227e JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 82280 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([246])
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([246])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) Number(0n987145/0x000f1009u32)
# Var t164d (t164d Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }) Reg(U32) Some([252, 253, 254, 255])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([16]) Number(0n10/0x0au8)
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([17])
# Var t78f0 (t78f0 Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([246])
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([246])
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) Reg(U32) Some([252, 253, 254, 255])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([246]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([246])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([18]) Number(0n32/0x20u8)
# Var tefac (tefac Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))) Reg(U8) Some([17])
# Var tf5a3 (tf5a3 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))) Reg(U8) Some([246])
# 82285 Copy8 [Register(0x00), Register(0xf6)]
#       Save function parameter 'ch' registers [0] to locals [246].
0b 00 f6 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(0n10/0x0au8) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf6), Register(0xf6)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 82288 LoadImm8 [Register(0x10), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 10 0a 

# if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
# 8228b Cmp8 [Register(0xf6), Register(0x10)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
15 f6 10 

# 8228e JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
72 96 22 08 

# 82292 JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == t25ee then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }
70 eb 22 08 

# :lcd_putc_if_true_0_1 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 82296 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
20 f8 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# 8229c Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
05 f8 11 

# t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
# 8229f LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 14 

# 822a2 Divide8 [Register(0x11), Register(0x00), Register(0xf6)]
#       t78f0 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
#       Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8))
17 11 00 f6 

# tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
# 822a6 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
04 00 01 

# 822a9 Add8NoCarryIn [Register(0xf6), Register(0x00), Register(0xf6)]
#       tf5a3 <- t78f0 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8))
14 f6 00 f6 

# next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
# 822ad LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
04 00 14 

# 822b0 Mul8_8 [Register(0xf6), Register(0x00), Register(0xf6)]
#       next <- tf5a3 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(0n20/0x14u8)), Number(0n1/0x01u8)), Number(0n20/0x14u8))
10 f6 00 f6 

# :lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_predicate_3
# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 822b4 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #11, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0xf6), Register(0xf6)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 822b7 Cmp8 [Register(0xf6), Register(0x11)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 f6 11 

# 822ba JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 e7 22 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }] }
# lcd_putc_while_body_4
# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
# 822be Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #16, replacing reference to t2 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t2] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 822c1 LoadImm32 [Register(0xfc), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 fc 00 00 00 00 

# 822c7 Copy8 [Register(0x11), Register(0xfc)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 11 fc 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 822ca AddImm32IgnoreCarry [Register(0xfc), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 fc 0c 10 0f 00 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 822d0 LoadImm8 [Register(0x12), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 12 20 

# mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
# 822d3 Store8 [Register(0x12), Register(0xfc)]
#       mem[t164d] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(0n32/0x20u8) }
06 12 fc 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
# 822d6 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #23, replacing reference to t4 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t4] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 822d9 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 822dc Add8NoCarryIn [Register(0x11), Register(0x00), Register(0x11)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 11 00 11 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
# 822e0 Store8 [Register(0x11), Register(0xf8)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #25, replacing reference to t3 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t3] <- tefac U8 -> mem[t0] <- tefac U8
06 11 f8 

# goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 822e3 JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 b4 22 08 

# :lcd_putc_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 822e7 JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 38 23 08 

# :lcd_putc_if_else_0_2 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_else_0_2
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 822eb LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #30, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 f8 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
# 822f1 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #31, replacing reference to t5 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t5] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
# 822f4 LoadImm32 [Register(0xfc), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
20 fc 00 00 00 00 

# 822fa Copy8 [Register(0x11), Register(0xfc)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }
0b 11 fc 

# t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
# 822fd AddImm32IgnoreCarry [Register(0xfc), Constant32(0x000f100c=987148)]
#       t164d <- tad4e Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("lcd_current") })
32 fc 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf6), Register(0xf6)], resolved: None }
# mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 82303 Store8 [Register(0xf6), Register(0xfc)]
#       mem[t164d] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 f6 fc 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
# 82306 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #37, replacing reference to t6 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t6] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf6), Register(0xf6)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 82309 Copy8 [Register(0x11), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 11 00 

# 8230c Copy8 [Register(0xf6), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b f6 04 

# Registers used by this function: {16, 17, 18, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231}
# Registers to save: []
# 8230f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 82315 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 1f 23 08 00 

# 8231b JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 95 20 08 

# 8231f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #40, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t7 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
# 82325 LoadImm32 [Register(0xf8), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #40, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t7 <- 0n987145/0x000f1009u32  -> t0 <- 0n987145/0x000f1009u32 
20 f8 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
# 8232b Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #42, replacing reference to t8 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t8] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
# 8232e LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
04 00 01 

# 82331 Add8NoCarryIn [Register(0x11), Register(0x00), Register(0x11)]
#       tefac <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8))
14 11 00 11 

# mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
# # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
# 82335 Store8 [Register(0x11), Register(0xf8)]
#       mem[t0] <- tefac U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(0n1/0x01u8)) }
#       # In IlFunctionId("lcd_putc"), at #44, replacing reference to t7 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). mem[t7] <- tefac U8 -> mem[t0] <- tefac U8
06 11 f8 

# :lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_end_0
# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Ident("lcd_current")
# # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
# 82338 Load8 [Register(0xf8), Register(0x11)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_putc"), at #47, replacing reference to t9 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t9] U8 -> t5dda <- mem[t0] U8
05 f8 11 

# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 8233b LoadImm8 [Register(0xf6), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 f6 50 

# if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
# 8233e Cmp8 [Register(0xf6), Register(0x11)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
15 f6 11 

# 82341 JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
71 49 23 08 

# 82345 JmpImm [Label24(lcd_putc_if_else_0_8)]
#       if t5dda >= td749 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }
70 63 23 08 

# :lcd_putc_if_true_0_7 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(0n80/0x50u8) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/lutcomp/programs/lib/lcd.j':(63,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {16, 17, 18, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231}
# Registers to save: []
# 82349 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 8234f StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c 59 23 08 00 

# 82355 JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 6a 23 08 

# 82359 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 8235f JmpImm [Label24(lcd_putc_if_end_6)]
#       goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
70 63 23 08 

# :lcd_putc_if_else_0_8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_else_0_8
# :lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 82363 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 82365 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([19])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([20])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([24, 25, 26, 27]) Number(0n987145/0x000f1009u32)
# Var t54b2 (t54b2 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }) Reg(U32) Some([24, 25, 26, 27])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([20])
# Var t760c (t760c Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) Reg(U32) Some([24, 25, 26, 27])
# Var t81b5 (t81b5 Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))) Reg(U8) Some([20])
# Var t9586 (t9586 Number(0n60/0x3cu8)) Reg(U8) Some([19]) Number(0n60/0x3cu8)
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) Reg(U32) Some([28, 29, 30, 31])
# Var t9e70 (t9e70 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }) Reg(U32) Some([28, 29, 30, 31])
# Var ta094 (ta094 Index("lcd_display", Ident("i"))) Reg(U8) Some([32])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([20])
# Var td749 (td749 Number(0n80/0x50u8)) Reg(U8) Some([19]) Number(0n80/0x50u8)
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([19])
# Var tdf3b (tdf3b Number(0n32/0x20u8)) Reg(U8) Some([19]) Number(0n32/0x20u8)
# Var tfd89 (tfd89 Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) Reg(U8) Some([19])
# t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 8236a LoadImm32 [Register(0x18), Constant32(0x000f1009=987145)]
#       t0 <- 0n987145/0x000f1009u32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
20 18 09 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# Ident("lcd_current")
# # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
# 82370 Load8 [Register(0x18), Register(0x14)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
#       Ident("lcd_current")
#       # In IlFunctionId("lcd_scroll_up"), at #2, replacing reference to t1 with t0 as they share the same const value: Number(0n987145/0x000f1009u32). t5dda <- mem[t1] U8 -> t5dda <- mem[t0] U8
05 18 14 

# t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
# 82373 LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
04 00 ec 

# 82376 Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       t81b5 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8))
14 14 00 14 

# mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
# 8237a Store8 [Register(0x14), Register(0x18)]
#       mem[t0] <- t81b5 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(0n20/0x14u8)) }
06 14 18 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 8237d LoadImm8 [Register(0x14), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 14 00 

# :lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# Number(0n60/0x3cu8)
# 82380 LoadImm8 [Register(0x13), Constant8(0x3c=60)]
#       t9586 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
#       Number(0n60/0x3cu8)
04 13 3c 

# if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
# 82383 Cmp8 [Register(0x13), Register(0x14)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
15 13 14 

# 82386 JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }
71 f9 23 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t9586 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n60/0x3cu8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n60/0x3cu8) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n20/0x14u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
# 8238a LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
04 00 14 

# 8238d Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x13)]
#       tfd89 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))
14 14 00 13 

# t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
# 82391 LoadImm32 [Register(0x18), Constant32(0x00000000=0)]
#       Zero-pad for t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
20 18 00 00 00 00 

# 82397 Copy8 [Register(0x13), Register(0x18)]
#       t760c U32 <- tfd89 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }
0b 13 18 

# t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
# 8239a AddImm32IgnoreCarry [Register(0x18), Constant32(0x000f100c=987148)]
#       t54b2 <- t760c Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)) })
32 18 0c 10 0f 00 

# ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
# 823a0 Load8 [Register(0x18), Register(0x13)]
#       ch <- mem[t54b2] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(0n20/0x14u8)))
05 18 13 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 823a3 LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 1c 00 00 00 00 

# 823a9 Copy8 [Register(0x14), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 14 1c 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 823ac AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 1c 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# 823b2 Load8 [Register(0x1c), Register(0x20)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
05 1c 20 

# if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# 823b5 Cmp8 [Register(0x13), Register(0x20)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
15 13 20 

# 823b8 JzImm [Label24(lcd_scroll_up_if_else_0_5)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
72 ee 23 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_4)], resolved: None }
# :lcd_scroll_up_if_true_0_4 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_4
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 823bc LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 1c 00 00 00 00 

# 823c2 Copy8 [Register(0x14), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 14 1c 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 823c5 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 1c 0c 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 823cb Store8 [Register(0x13), Register(0x1c)]
#       mem[t9e70] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 13 1c 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 823ce Copy8 [Register(0x14), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 14 00 

# 823d1 Copy8 [Register(0x13), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 13 04 

# Registers used by this function: {19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231}
# Registers to save: []
# 823d4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 823da StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c e4 23 08 00 

# 823e0 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 95 20 08 

# 823e4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# goto lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 823ea JmpImm [Label24(lcd_scroll_up_if_end_3)]
#       goto lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 ee 23 08 

# :lcd_scroll_up_if_else_0_5 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_else_0_5
# :lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_end_3
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 823ee LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 823f1 Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 14 00 14 

# goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 823f5 JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 80 23 08 

# :lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_predicate_6
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# Number(0n80/0x50u8)
# 823f9 LoadImm8 [Register(0x13), Constant8(0x50=80)]
#       td749 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
#       Number(0n80/0x50u8)
04 13 50 

# if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
# 823fc Cmp8 [Register(0x13), Register(0x14)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
15 13 14 

# 823ff JcImm [Label24(lcd_scroll_up_while_end_8)]
#       if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }
71 5c 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < td749 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(0n80/0x50u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_7)], resolved: None }
# :lcd_scroll_up_while_body_7 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(0n80/0x50u8) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }] }
# lcd_scroll_up_while_body_7
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 82403 LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 1c 00 00 00 00 

# 82409 Copy8 [Register(0x14), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 14 1c 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 8240c AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 1c 0c 10 0f 00 

# ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Index("lcd_display", Ident("i"))
# 82412 Load8 [Register(0x1c), Register(0x20)]
#       ta094 <- mem[t9e70] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Index("lcd_display", Ident("i"))
05 1c 20 

# tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# Number(0n32/0x20u8)
# 82415 LoadImm8 [Register(0x13), Constant8(0x20=32)]
#       tdf3b <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
#       Number(0n32/0x20u8)
04 13 20 

# if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
# 82418 Cmp8 [Register(0x20), Register(0x13)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
15 20 13 

# 8241b JzImm [Label24(lcd_scroll_up_if_else_0_11)]
#       if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }
72 51 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta094 != tdf3b then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(0n32/0x20u8) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_10)], resolved: None }
# :lcd_scroll_up_if_true_0_10 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(0n32/0x20u8) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_10
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(0n32/0x20u8) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }) }\nArithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
# 8241f LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
20 1c 00 00 00 00 

# 82425 Copy8 [Register(0x14), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }
0b 14 1c 

# t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
# Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
# 82428 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f100c=987148)]
#       t9e70 <- t9725 Add Number(0n987148/0x000f100cu32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") }) }
#       Arithmetic(Add, Number(0n987148/0x000f100cu32), Cast { old_type: Some(Number(U8)), new_type: Number(U32), value: Ident("i") })
32 1c 0c 10 0f 00 

# mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
# 8242e Store8 [Register(0x13), Register(0x1c)]
#       mem[t9e70] <- tdf3b U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(0n32/0x20u8) }
06 13 1c 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(0n32/0x20u8)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
# 82431 Copy8 [Register(0x14), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 14 00 

# 82434 Copy8 [Register(0x13), Register(0x04)]
#       Arg1[ch]=tdf3b None <= call lcd_draw_char(td0f3,tdf3b,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(0n32/0x20u8)] })
0b 13 04 

# Registers used by this function: {19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231}
# Registers to save: []
# 82437 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 8243d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 47 24 08 00 

# 82443 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 95 20 08 

# 82447 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# goto lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 8244d JmpImm [Label24(lcd_scroll_up_if_end_9)]
#       goto lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 51 24 08 

# :lcd_scroll_up_if_else_0_11 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_else_0_11
# :lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_end_9
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8)) }\nArithmetic(Add, Ident(\"i\"), Number(0n1/0x01u8))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x14), Register(0x14)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
# Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
# 82451 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
04 00 01 

# 82454 Add8NoCarryIn [Register(0x14), Register(0x00), Register(0x14)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(0n1/0x01u8)) }
#       Arithmetic(Add, Ident("i"), Number(0n1/0x01u8))
14 14 00 14 

# goto lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 82458 JmpImm [Label24(lcd_scroll_up_while_predicate_6)]
#       goto lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 f9 23 08 

# :lcd_scroll_up_while_end_8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_while_end_8
# return None None
# Return { value: None }
# 8245c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 8245e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(0n0/0x00000000u32)) Reg(U32) Some([36, 37, 38, 39]) Number(0n0/0x00000000u32)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }) Reg(U32) Some([40, 41, 42, 43]) Number(0n987728/0x000f1250u32)
# Var inline_main_RpnCalc_init_51_t6e8e (t6e8e Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }) Reg(U32) Some([40, 41, 42, 43]) Number(0n987732/0x000f1254u32)
# Var inline_main_putc_25_t0 (static "lcd_enable" addr) Reg(U32) Some([36, 37, 38, 39]) Number(0n987228/0x000f105cu32)
# Var inline_main_putc_25_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_25_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([45]) Number(0n0/0x00u8)
# Var inline_main_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) Number(0n82/0x52u8)
# Var inline_main_putc_26_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) Number(0n80/0x50u8)
# Var inline_main_putc_27_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) Number(0n78/0x4eu8)
# Var inline_main_putc_28_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) Number(0n10/0x0au8)
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([44])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([36, 37, 38, 39]) Number(0n987664/0x000f1210u32)
# None <= call stdio_init() Some('programs/app/rpn.j':(4,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 20, 21, 22, 23, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 209, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245}
# Registers to save: []
# 82463 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 

# 82469 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c 73 24 08 00 

# 8246f JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 bf 2c 08 

# 82473 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 

# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 82479 LoadImm8 [Register(0x2c), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 2c 52 

# None <= call io_write0(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8247c Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 8247e LoadImm32 [Register(0x24), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 24 5c 10 0f 00 

# inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82484 Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 24 2c 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82487 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 2d 00 

# if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 8248a Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 2c 2d 

# 8248d JzImm [Label24(inline_main_putc_25_putc_if_else_0_2)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 b1 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_25_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_25_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_25_putc_if_true_0_1
# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 82491 LoadImm8 [Register(0x2c), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 2c 52 

# None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82494 Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_25_tac13 None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 82497 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 8249d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c a7 24 08 00 

# 824a3 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 824a7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 824ad JmpImm [Label24(inline_main_putc_25_putc_if_end_0)]
#       goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 b1 24 08 

# :inline_main_putc_25_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_else_0_2
# :inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_end_0
# :inline_main_putc_25_function_end_putc None
# inline_main_putc_25_function_end_putc
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 824b1 LoadImm8 [Register(0x2c), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 2c 50 

# None <= call io_write0(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 824b4 Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# 824b6 LoadImm32 [Register(0x24), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #16, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
20 24 5c 10 0f 00 

# inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #17, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 -> inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8
# 824bc Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #17, replacing reference to inline_main_putc_26_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 -> inline_main_putc_26_t76c7 <- mem[inline_main_putc_25_t0] U8
05 24 2c 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #18, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_26_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# 824bf LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #18, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_26_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
04 2d 00 

# if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #19, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2'
# 824c2 Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #19, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2'
15 2c 2d 

# 824c5 JzImm [Label24(inline_main_putc_26_putc_if_else_0_2)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #19, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2'
72 e9 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #19, replacing reference to inline_main_putc_26_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_26_t76c7 != inline_main_putc_26_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' -> if inline_main_putc_26_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_26_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_26_putc_if_true_0_1
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 824c9 LoadImm8 [Register(0x2c), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 2c 50 

# None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 824cc Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_26_tac13 None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 824cf AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 824d5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c df 24 08 00 

# 824db JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 824df AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 824e5 JmpImm [Label24(inline_main_putc_26_putc_if_end_0)]
#       goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 e9 24 08 

# :inline_main_putc_26_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_else_0_2
# :inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_end_0
# :inline_main_putc_26_function_end_putc None
# inline_main_putc_26_function_end_putc
# tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(0n987664/0x000f1210u32)
# 824e9 LoadImm32 [Register(0x24), Constant32(0x000f1210=987664)]
#       tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(12,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(0n987664/0x000f1210u32)
20 24 10 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
# 824ef LoadImm32 [Register(0x28), Constant32(0x000f1250=987728)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(U32), value: Ident("s") }, Number(0n64/0x00000040u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987728/0x000f1250u32 `.
20 28 50 12 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 824f5 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 24 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
# 824fb Store32_1 [Register(0x24), Register(0x28)]
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
23 24 28 

# 824fe Store32_2 []
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(0n0/0x00000000u32) }
24 

# :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
# 824ff LoadImm32 [Register(0x28), Constant32(0x000f1254=987732)]
#       inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(U32), value: Ident("c") }, Number(0n68/0x00000044u32))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987732/0x000f1254u32 `.
20 28 54 12 0f 00 

# mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
# # In IlFunctionId("main"), at #34, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
# 82505 Store32_1 [Register(0x24), Register(0x28)]
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("main"), at #34, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
23 24 28 

# 82508 Store32_2 []
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(0n0/0x00000000u32) }
#       # In IlFunctionId("main"), at #34, replacing reference to inline_main_RpnCalc_init_51_t60ec with inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec as they share the same const value: Number(0n0/0x00000000u32). mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 -> mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32
24 

# :inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 82509 LoadImm8 [Register(0x2c), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 2c 4e 

# None <= call io_write0(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8250c Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #38, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# 8250e LoadImm32 [Register(0x24), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #38, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
20 24 5c 10 0f 00 

# inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #39, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 -> inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8
# 82514 Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #39, replacing reference to inline_main_putc_27_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 -> inline_main_putc_27_t76c7 <- mem[inline_main_putc_25_t0] U8
05 24 2c 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #40, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_27_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# 82517 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #40, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_27_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
04 2d 00 

# if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #41, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2'
# 8251a Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #41, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2'
15 2c 2d 

# 8251d JzImm [Label24(inline_main_putc_27_putc_if_else_0_2)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #41, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2'
72 41 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #41, replacing reference to inline_main_putc_27_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_27_t76c7 != inline_main_putc_27_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' -> if inline_main_putc_27_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_27_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_27_putc_if_true_0_1
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 82521 LoadImm8 [Register(0x2c), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 2c 4e 

# None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82524 Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_27_tac13 None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 82527 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 8252d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 37 25 08 00 

# 82533 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 82537 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 8253d JmpImm [Label24(inline_main_putc_27_putc_if_end_0)]
#       goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 41 25 08 

# :inline_main_putc_27_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_else_0_2
# :inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_end_0
# :inline_main_putc_27_function_end_putc None
# inline_main_putc_27_function_end_putc
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 82541 LoadImm8 [Register(0x2c), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 2c 0a 

# None <= call io_write0(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82544 Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #51, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
# 82546 LoadImm32 [Register(0x24), Constant32(0x000f105c=987228)]
#       inline_main_putc_25_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #51, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t0 <- 0n987228/0x000f105cu32  -> inline_main_putc_25_t0 <- 0n987228/0x000f105cu32 
20 24 5c 10 0f 00 

# inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# # In IlFunctionId("main"), at #52, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 -> inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8
# 8254c Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
#       # In IlFunctionId("main"), at #52, replacing reference to inline_main_putc_28_t0 with inline_main_putc_25_t0 as they share the same const value: Number(0n987228/0x000f105cu32). inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 -> inline_main_putc_28_t76c7 <- mem[inline_main_putc_25_t0] U8
05 24 2c 

# inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("main"), at #53, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_28_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
# 8254f LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_25_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("main"), at #53, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). inline_main_putc_28_ta97f <- 0n0/0x00u8  -> inline_main_putc_25_ta97f <- 0n0/0x00u8 
04 2d 00 

# if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# # In IlFunctionId("main"), at #54, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2'
# 82552 Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #54, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2'
15 2c 2d 

# 82555 JzImm [Label24(inline_main_putc_28_putc_if_else_0_2)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       # In IlFunctionId("main"), at #54, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2'
72 79 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n# In IlFunctionId(\"main\"), at #54, replacing reference to inline_main_putc_28_ta97f with inline_main_putc_25_ta97f as they share the same const value: Number(0n0/0x00u8). if inline_main_putc_28_t76c7 != inline_main_putc_28_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' -> if inline_main_putc_28_t76c7 != inline_main_putc_25_ta97f then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2'\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_28_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_28_putc_if_true_0_1
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 82559 LoadImm8 [Register(0x2c), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 2c 0a 

# None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8255c Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_28_tac13 None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 8255f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82565 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 6f 25 08 00 

# 8256b JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 8256f AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 82575 JmpImm [Label24(inline_main_putc_28_putc_if_end_0)]
#       goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 79 25 08 

# :inline_main_putc_28_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_else_0_2
# :inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_end_0
# :inline_main_putc_28_function_end_putc None
# inline_main_putc_28_function_end_putc
# tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(0n987664/0x000f1210u32)
# 82579 LoadImm32 [Register(0x24), Constant32(0x000f1210=987664)]
#       tca8 <- 0n987664/0x000f1210u32  Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(0n987664/0x000f1210u32)
20 24 10 12 0f 00 

# Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# 8257f Copy32 [Register(0x24), Register(0x00)]
#       Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
21 24 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [36, 40, 41, 42, 43, 44, 45]
# 82582 Push8 [Register(0x2d)]
#       Saving reg0x2d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2d 

# 82584 Push8 [Register(0x2c)]
#       Saving reg0x2c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2c 

# 82586 Push8 [Register(0x2b)]
#       Saving reg0x2b before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2b 

# 82588 Push8 [Register(0x2a)]
#       Saving reg0x2a before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2a 

# 8258a Push8 [Register(0x29)]
#       Saving reg0x29 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 29 

# 8258c Push8 [Register(0x28)]
#       Saving reg0x28 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 28 

# 8258e Push8 [Register(0x24)]
#       Saving reg0x24 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 24 

# 82590 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c fc ff ff ff 

# 82596 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_run))
25 0c a0 25 08 00 

# 8259c JmpImm [Label24(:RpnCalc_run)]
#       PseudoCall(Label24(:RpnCalc_run))
70 80 19 08 

# 825a0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c 04 00 00 00 

# 825a6 Pop8 [Register(0x24)]
#       Restoring reg0x24 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 24 

# 825a8 Pop8 [Register(0x28)]
#       Restoring reg0x28 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 28 

# 825aa Pop8 [Register(0x29)]
#       Restoring reg0x29 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 29 

# 825ac Pop8 [Register(0x2a)]
#       Restoring reg0x2a after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2a 

# 825ae Pop8 [Register(0x2b)]
#       Restoring reg0x2b after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2b 

# 825b0 Pop8 [Register(0x2c)]
#       Restoring reg0x2c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2c 

# 825b2 Pop8 [Register(0x2d)]
#       Restoring reg0x2d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2d 

# 825b4 Copy8 [Register(0x00), Register(0x2c)]
#       Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0b 00 2c 

# return Some(t2a99) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# 825b7 Copy8 [Register(0x2c), Register(0x00)]
#       return Some(t2a99) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
0b 2c 00 

# 825ba JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_main None
# function_end_main
# Unreachable None
# 825bc Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(U32)) Reg(U32) Some([48, 49, 50, 51])
# Var a_hi (Local a_hi Number(U32) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var b (Arg1 b Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b_hi (Local b_hi Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_10_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_10_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([89])
# Var inline_mul32_64_mul16_32_10_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([89])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([90]) Number(0n0/0x00u8)
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([91])
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(U32)) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_11_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_11_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_11_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([90])
# Var inline_mul32_64_mul16_32_8_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([90])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_8_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([89])
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(U32) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(U32) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(U32) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_t30b9 (t30b9 Index("d", Number(0n0/0x00u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_t34f7 (t34f7 Index("d", Number(0n1/0x01u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_t6ca9 (t6ca9 Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_t6ec2 (t6ec2 Index("f", Number(0n1/0x01u8))) Reg(U8) Some([100])
# Var inline_mul32_64_mul16_32_9_t8575 (t8575 Index("d", Number(0n2/0x02u8))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_t9922 (t9922 Index("f", Number(0n0/0x00u8))) Reg(U8) Some([100])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_tb9f0 (tb9f0 Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }) Reg(U32) Some([96, 97, 98, 99])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_te47a (te47a Index("b", Number(0n1/0x01u8))) Reg(U8) Some([89])
# Var t1335 (t1335 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }) Reg(U32) Some([104, 105, 106, 107])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([52, 53, 54, 55])
# Var t3970 (t3970 Index("temp", Number(0n2/0x02u8))) Reg(U8) Some([88])
# Var t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([92])
# Var t3b80 (t3b80 Index("temp", Number(0n3/0x03u8))) Reg(U8) Some([88])
# Var t3d83 (t3d83 Index("temp", Number(0n1/0x01u8))) Reg(U8) Some([88])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }) Reg(U32) Some([52, 53, 54, 55])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([56, 57, 58, 59])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))) Reg(U32) Some([52, 53, 54, 55])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([68, 69, 70, 71])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([68, 69, 70, 71])
# Var t82cc (t82cc Index("b", Number(0n2/0x02u8))) Reg(U8) Some([91])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([48, 49, 50, 51])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([52, 53, 54, 55])
# Var t9186 (t9186 Index("temp", Number(0n0/0x00u8))) Reg(U8) Some([88])
# Var t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([92])
# Var ta5f7 (ta5f7 Index("b", Number(0n3/0x03u8))) Reg(U8) Some([91])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var te546 (te546 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }) Reg(U32) Some([108, 109, 110, 111])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([108, 109, 110, 111])
# Var temp (Local temp Number(U32) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var temp_hi (Local temp_hi Number(U32) Reg(U32)) Reg(U32) Some([96, 97, 98, 99])
# Var temp_lo (Local temp_lo Number(U32) Reg(U32)) Reg(U32) Some([104, 105, 106, 107])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([56, 57, 58, 59])
# 825c1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 825c7 Copy32 [Register(0x00), Register(0x30)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [48, 49, 50, 51].
21 00 30 

# 825ca Copy32 [Register(0x04), Register(0x38)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [56, 57, 58, 59].
21 04 38 

# 825cd Copy32 [Register(0x08), Register(0x40)]
#       Save function parameter 'c' registers [8, 9, 10, 11] to locals [64, 65, 66, 67].
21 08 40 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 825d0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 825d6 LoadImm32 [Register(0x34), Constant32(0x00000000=0)]
#       a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 34 00 00 00 00 

# t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# Index("a", Number(0n3/0x03u8))
# 825dc Copy8 [Register(0x33), Register(0x5c)]
#       t94df <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
#       Index("a", Number(0n3/0x03u8))
0b 33 5c 

# a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
# 825df Copy8 [Register(0x5c), Register(0x35)]
#       a_hi[0x01..0x02] <- t94df U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(0n1/0x01u8)), var_type: None, value: Index("a", Number(0n3/0x03u8)) }
0b 5c 35 

# t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# Index("a", Number(0n2/0x02u8))
# 825e2 Copy8 [Register(0x32), Register(0x5c)]
#       t3b02 <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
#       Index("a", Number(0n2/0x02u8))
0b 32 5c 

# a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
# 825e5 Copy8 [Register(0x5c), Register(0x34)]
#       a_hi[0x00..0x01] <- t3b02 U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(0n0/0x00u8)), var_type: None, value: Index("a", Number(0n2/0x02u8)) }
0b 5c 34 

# b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 825e8 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 3c 00 00 00 00 

# ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# Index("b", Number(0n3/0x03u8))
# 825ee Copy8 [Register(0x3b), Register(0x5b)]
#       ta5f7 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
#       Index("b", Number(0n3/0x03u8))
0b 3b 5b 

# b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
# 825f1 Copy8 [Register(0x5b), Register(0x3d)]
#       b_hi[0x01..0x02] <- ta5f7 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(0n1/0x01u8)), var_type: None, value: Index("b", Number(0n3/0x03u8)) }
0b 5b 3d 

# t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# Index("b", Number(0n2/0x02u8))
# 825f4 Copy8 [Register(0x3a), Register(0x5b)]
#       t82cc <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
#       Index("b", Number(0n2/0x02u8))
0b 3a 5b 

# b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
# 825f7 Copy8 [Register(0x5b), Register(0x3c)]
#       b_hi[0x00..0x01] <- t82cc U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(0n0/0x00u8)), var_type: None, value: Index("b", Number(0n2/0x02u8)) }
0b 5b 3c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 825fa Copy32 [Register(0x30), Register(0x44)]
#       inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 30 44 

# inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 825fd Copy32 [Register(0x38), Register(0x48)]
#       inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 48 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 82600 Mul8_16 [Register(0x44), Register(0x48), Register(0x50)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 44 48 50 

# 82604 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 82607 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8260a Copy8 [Register(0x45), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 45 5e 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 8260d LoadImm32 [Register(0x60), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 60 00 00 00 00 

# 82613 Copy8 [Register(0x5e), Register(0x60)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5e 60 

# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 82616 Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 59 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 82619 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 8261f Copy8 [Register(0x59), Register(0x54)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 59 54 

# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82622 Mul8_16 [Register(0x60), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 60 54 54 

# 82626 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 82629 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 8262c Copy8 [Register(0x55), Register(0x5a)]
#       inline_mul32_64_mul16_32_8_t6ec2 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 5a 

# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 8262f Copy8 [Register(0x5a), Register(0x57)]
#       inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 5a 57 

# inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 82632 Copy8 [Register(0x54), Register(0x5a)]
#       inline_mul32_64_mul16_32_8_t9922 <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 5a 

# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 82635 Copy8 [Register(0x5a), Register(0x56)]
#       inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 5a 56 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("mul32_64"), at #27, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# 82638 LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("mul32_64"), at #27, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
04 5a 00 

# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #28, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# 8263b Copy8 [Register(0x5a), Register(0x55)]
#       inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #28, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5a 55 

# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #29, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 8263e Copy8 [Register(0x5a), Register(0x54)]
#       inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #29, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5a 54 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 82641 ClearCarry []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 82642 AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 82646 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 82647 Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_8_te47a <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 59 

# inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8264a LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 82650 Copy8 [Register(0x59), Register(0x54)]
#       inline_mul32_64_mul16_32_8_t6ca9 U32 <- inline_mul32_64_mul16_32_8_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 59 54 

# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82653 Mul8_16 [Register(0x44), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 44 54 54 

# 82657 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 8265a LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8265d Copy8 [Register(0x45), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t3009 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 45 5e 

# inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82660 LoadImm32 [Register(0x60), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 60 00 00 00 00 

# 82666 Copy8 [Register(0x5e), Register(0x60)]
#       inline_mul32_64_mul16_32_8_tb9f0 U32 <- inline_mul32_64_mul16_32_8_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5e 60 

# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 82669 Mul8_16 [Register(0x60), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 60 48 44 

# 8266d LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 46 00 

# 82670 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tb9f0 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 47 00 

# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 82673 Copy32 [Register(0x54), Register(0x48)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 48 

# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82676 ClearCarry []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 82677 AddCarry32_1 [Register(0x48), Register(0x44), Register(0x54)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 44 54 

# 8267b AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 8267c Copy8 [Register(0x56), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t8575 <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 5e 

# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 8267f Copy8 [Register(0x5e), Register(0x57)]
#       inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 5e 57 

# inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 82682 Copy8 [Register(0x55), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t34f7 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 5e 

# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 82685 Copy8 [Register(0x5e), Register(0x56)]
#       inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 5e 56 

# inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 82688 Copy8 [Register(0x54), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t30b9 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 5e 

# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 8268b Copy8 [Register(0x5e), Register(0x55)]
#       inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 5e 55 

# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #50, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 8268e Copy8 [Register(0x5a), Register(0x54)]
#       inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #50, replacing reference to inline_mul32_64_mul16_32_8_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_ta97f U8 -> inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5a 54 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 82691 Copy32 [Register(0x54), Register(0x48)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 48 

# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 82694 ClearCarry []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82695 AddCarry32_1 [Register(0x50), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 48 44 

# 82699 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# :inline_mul32_64_mul16_32_8_function_end_mul16_32 None
# inline_mul32_64_mul16_32_8_function_end_mul16_32
# mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# 8269a Store32_1 [Register(0x44), Register(0x40)]
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
23 44 40 

# 8269d Store32_2 []
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
24 

# t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 8269e Copy32 [Register(0x40), Register(0x68)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 40 68 

# 826a1 AddImm32IgnoreCarry [Register(0x68), Constant32(0x00000004=4)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 68 04 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 826a7 Copy32 [Register(0x34), Register(0x44)]
#       inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 34 44 

# inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 826aa Copy32 [Register(0x3c), Register(0x48)]
#       inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 3c 48 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 826ad Mul8_16 [Register(0x44), Register(0x48), Register(0x50)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 44 48 50 

# 826b1 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 826b4 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 826b7 Copy8 [Register(0x45), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 45 5e 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 826ba LoadImm32 [Register(0x60), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 60 00 00 00 00 

# 826c0 Copy8 [Register(0x5e), Register(0x60)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5e 60 

# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 826c3 Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 59 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 826c6 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 826cc Copy8 [Register(0x59), Register(0x54)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 59 54 

# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 826cf Mul8_16 [Register(0x60), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 60 54 54 

# 826d3 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 826d6 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 826d9 Copy8 [Register(0x55), Register(0x64)]
#       inline_mul32_64_mul16_32_9_t6ec2 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 55 64 

# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 826dc Copy8 [Register(0x64), Register(0x57)]
#       inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 64 57 

# inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 826df Copy8 [Register(0x54), Register(0x64)]
#       inline_mul32_64_mul16_32_9_t9922 <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 54 64 

# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 826e2 Copy8 [Register(0x64), Register(0x56)]
#       inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 64 56 

# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #75, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# 826e5 Copy8 [Register(0x5a), Register(0x55)]
#       inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #75, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5a 55 

# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #76, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 826e8 Copy8 [Register(0x5a), Register(0x54)]
#       inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #76, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5a 54 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 826eb ClearCarry []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 826ec AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 826f0 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 826f1 Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_9_te47a <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 49 59 

# inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 826f4 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 54 00 00 00 00 

# 826fa Copy8 [Register(0x59), Register(0x54)]
#       inline_mul32_64_mul16_32_9_t6ca9 U32 <- inline_mul32_64_mul16_32_9_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 59 54 

# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 826fd Mul8_16 [Register(0x44), Register(0x54), Register(0x54)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 44 54 54 

# 82701 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 56 00 

# 82704 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 57 00 

# inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 82707 Copy8 [Register(0x45), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t3009 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 45 5e 

# inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 8270a LoadImm32 [Register(0x60), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 60 00 00 00 00 

# 82710 Copy8 [Register(0x5e), Register(0x60)]
#       inline_mul32_64_mul16_32_9_tb9f0 U32 <- inline_mul32_64_mul16_32_9_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5e 60 

# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 82713 Mul8_16 [Register(0x60), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 60 48 44 

# 82717 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 46 00 

# 8271a LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tb9f0 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 47 00 

# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 8271d Copy32 [Register(0x54), Register(0x48)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 48 

# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82720 ClearCarry []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 82721 AddCarry32_1 [Register(0x48), Register(0x44), Register(0x54)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 44 54 

# 82725 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 82726 Copy8 [Register(0x56), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t8575 <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 56 5e 

# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 82729 Copy8 [Register(0x5e), Register(0x57)]
#       inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 5e 57 

# inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 8272c Copy8 [Register(0x55), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t34f7 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 55 5e 

# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 8272f Copy8 [Register(0x5e), Register(0x56)]
#       inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 5e 56 

# inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 82732 Copy8 [Register(0x54), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t30b9 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 54 5e 

# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 82735 Copy8 [Register(0x5e), Register(0x55)]
#       inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 5e 55 

# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #97, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 82738 Copy8 [Register(0x5a), Register(0x54)]
#       inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #97, replacing reference to inline_mul32_64_mul16_32_9_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_ta97f U8 -> inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5a 54 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8273b Copy32 [Register(0x54), Register(0x48)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 48 

# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8273e ClearCarry []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 8273f AddCarry32_1 [Register(0x50), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 48 44 

# 82743 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# :inline_mul32_64_mul16_32_9_function_end_mul16_32 None
# inline_mul32_64_mul16_32_9_function_end_mul16_32
# mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# 82744 Store32_1 [Register(0x44), Register(0x68)]
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
23 44 68 

# 82747 Store32_2 []
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
24 

# temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
# Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 82748 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
#       Assign { target: Ident("temp_lo"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 68 00 00 00 00 

# temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
# Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
# Number(0n0/0x00000000u32)
# 8274e LoadImm32 [Register(0x60), Constant32(0x00000000=0)]
#       temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
#       Assign { target: Ident("temp_hi"), var_type: Some(Number(U32)), value: Number(0n0/0x00000000u32) }
#       Number(0n0/0x00000000u32)
20 60 00 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 82754 Mul8_16 [Register(0x34), Register(0x38), Register(0x44)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 34 38 44 

# 82758 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 46 00 

# 8275b LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 47 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8275e Copy8 [Register(0x35), Register(0x58)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 35 58 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 82761 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 82767 Copy8 [Register(0x58), Register(0x50)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 58 50 

# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 8276a Copy8 [Register(0x39), Register(0x5b)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 39 5b 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8276d LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 82773 Copy8 [Register(0x5b), Register(0x48)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5b 48 

# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82776 Mul8_16 [Register(0x50), Register(0x48), Register(0x48)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 50 48 48 

# 8277a LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 8277d LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 82780 Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_10_t6ec2 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 49 59 

# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 82783 Copy8 [Register(0x59), Register(0x4b)]
#       inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 59 4b 

# inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 82786 Copy8 [Register(0x48), Register(0x59)]
#       inline_mul32_64_mul16_32_10_t9922 <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 48 59 

# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 82789 Copy8 [Register(0x59), Register(0x4a)]
#       inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 59 4a 

# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# 8278c Copy8 [Register(0x5a), Register(0x49)]
#       inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5a 49 

# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 8278f Copy8 [Register(0x5a), Register(0x48)]
#       inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5a 48 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 82792 ClearCarry []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 82793 AddCarry32_1 [Register(0x44), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 44 48 44 

# 82797 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 82798 Copy8 [Register(0x39), Register(0x5b)]
#       inline_mul32_64_mul16_32_10_te47a <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 39 5b 

# inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 8279b LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 48 00 00 00 00 

# 827a1 Copy8 [Register(0x5b), Register(0x48)]
#       inline_mul32_64_mul16_32_10_t6ca9 U32 <- inline_mul32_64_mul16_32_10_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 5b 48 

# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 827a4 Mul8_16 [Register(0x34), Register(0x48), Register(0x48)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 34 48 48 

# 827a8 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4a 00 

# 827ab LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 4b 00 

# inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 827ae Copy8 [Register(0x35), Register(0x58)]
#       inline_mul32_64_mul16_32_10_t3009 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 35 58 

# inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 827b1 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 50 00 00 00 00 

# 827b7 Copy8 [Register(0x58), Register(0x50)]
#       inline_mul32_64_mul16_32_10_tb9f0 U32 <- inline_mul32_64_mul16_32_10_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 58 50 

# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 827ba Mul8_16 [Register(0x50), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 50 38 34 

# 827be LoadImm8 [Register(0x36), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 36 00 

# 827c1 LoadImm8 [Register(0x37), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tb9f0 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 37 00 

# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 827c4 Copy32 [Register(0x48), Register(0x38)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 48 38 

# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 827c7 ClearCarry []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 827c8 AddCarry32_1 [Register(0x38), Register(0x34), Register(0x48)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 38 34 48 

# 827cc AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 827cd Copy8 [Register(0x4a), Register(0x58)]
#       inline_mul32_64_mul16_32_10_t8575 <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 4a 58 

# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 827d0 Copy8 [Register(0x58), Register(0x4b)]
#       inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 58 4b 

# inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 827d3 Copy8 [Register(0x49), Register(0x58)]
#       inline_mul32_64_mul16_32_10_t34f7 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 49 58 

# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 827d6 Copy8 [Register(0x58), Register(0x4a)]
#       inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 58 4a 

# inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 827d9 Copy8 [Register(0x48), Register(0x58)]
#       inline_mul32_64_mul16_32_10_t30b9 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 48 58 

# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 827dc Copy8 [Register(0x58), Register(0x49)]
#       inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 58 49 

# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# 827df Copy8 [Register(0x5a), Register(0x48)]
#       inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
0b 5a 48 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 827e2 Copy32 [Register(0x48), Register(0x38)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 48 38 

# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 827e5 ClearCarry []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 827e6 AddCarry32_1 [Register(0x44), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 44 38 34 

# 827ea AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32 None
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 827eb Copy8 [Register(0x34), Register(0x58)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 34 58 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 827ee Copy8 [Register(0x58), Register(0x6a)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 58 6a 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 827f1 Copy8 [Register(0x35), Register(0x58)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 35 58 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 827f4 Copy8 [Register(0x58), Register(0x6b)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 58 6b 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 827f7 Copy8 [Register(0x36), Register(0x58)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 36 58 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 827fa Copy8 [Register(0x58), Register(0x60)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 58 60 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 827fd Copy8 [Register(0x37), Register(0x58)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 37 58 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 82800 Copy8 [Register(0x58), Register(0x61)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 58 61 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 82803 Copy32 [Register(0x0c), Register(0x6c)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 6c 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 82806 Copy32 [Register(0x68), Register(0x34)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 68 34 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 82809 Store32_1 [Register(0x34), Register(0x6c)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 34 6c 

# 8280c Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 8280d Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 82810 Copy32 [Register(0x6c), Register(0x34)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 6c 34 

# 82813 AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 34 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 82819 Copy32 [Register(0x60), Register(0x38)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 60 38 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 8281c Store32_1 [Register(0x38), Register(0x34)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 38 34 

# 8281f Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 82820 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 82823 Copy32 [Register(0x6c), Register(0x34)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 6c 34 

# 82826 AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 34 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 8282c Copy32 [Register(0x34), Register(0x38)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 34 38 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 8282f Copy32 [Register(0x40), Register(0x34)]
#       inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 40 34 

# inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82832 Copy32 [Register(0x40), Register(0x44)]
#       inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 40 44 

# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 82835 Load32 [Register(0x34), Register(0x48)]
#       inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 34 48 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82838 Copy32 [Register(0x44), Register(0x4c)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 44 4c 

# 8283b AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 4c 04 00 00 00 

# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 82841 Copy32 [Register(0x34), Register(0x50)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 34 50 

# 82844 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 8284a Load32 [Register(0x50), Register(0x54)]
#       inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 50 54 

# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 8284d Copy32 [Register(0x38), Register(0x50)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 38 50 

# 82850 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 82856 Load32 [Register(0x50), Register(0x50)]
#       inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 50 50 

# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 82859 ClearCarry []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 8285a AddCarry32_1 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 54 50 50 

# 8285e AddCarry32_2 []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 8285f Store32_1 [Register(0x50), Register(0x4c)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 50 4c 

# 82862 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 82863 Load32 [Register(0x34), Register(0x4c)]
#       inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 34 4c 

# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 82866 Load32 [Register(0x38), Register(0x34)]
#       inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 38 34 

# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 82869 ClearCarry []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 8286a AddCarry32_1 [Register(0x4c), Register(0x34), Register(0x34)]
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 4c 34 34 

# 8286e AddCarry32_2 []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 8286f Store32_1 [Register(0x34), Register(0x44)]
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 34 44 

# 82872 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 82873 Load32 [Register(0x44), Register(0x38)]
#       inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 44 38 

# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 82876 Copy32 [Register(0x48), Register(0x34)]
#       inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 48 34 

# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 82879 Cmp8 [Register(0x37), Register(0x3b)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 37 3b 

# 8287c Cmp8IfZero [Register(0x36), Register(0x3a)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 36 3a 

# 8287f Cmp8IfZero [Register(0x35), Register(0x39)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 35 39 

# 82882 Cmp8IfZero [Register(0x34), Register(0x38)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 34 38 

# 82885 JcImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 ac 28 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82889 Copy32 [Register(0x44), Register(0x4c)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 44 4c 

# 8288c AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 4c 04 00 00 00 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 82892 Copy32 [Register(0x44), Register(0x4c)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 44 4c 

# 82895 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 4c 04 00 00 00 

# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 8289b Load32 [Register(0x4c), Register(0x34)]
#       inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 4c 34 

# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 8289e AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 34 01 00 00 00 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 828a4 Store32_1 [Register(0x34), Register(0x4c)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 34 4c 

# 828a7 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 828a8 JmpImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 ac 28 08 

# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# :inline_mul32_64_add_U64_0_function_end_add_U64 None
# inline_mul32_64_add_U64_0_function_end_add_U64
# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# 828ac Copy32 [Register(0x3c), Register(0x34)]
#       inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
#       Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
21 3c 34 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 828af Mul8_16 [Register(0x30), Register(0x34), Register(0x38)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 30 34 38 

# 828b3 LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3a 00 

# 828b6 LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3b 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 828b9 Copy8 [Register(0x31), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 31 5c 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 828bc LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 44 00 00 00 00 

# 828c2 Copy8 [Register(0x5c), Register(0x44)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5c 44 

# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 828c5 Copy8 [Register(0x35), Register(0x58)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 35 58 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 828c8 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 3c 00 00 00 00 

# 828ce Copy8 [Register(0x58), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 58 3c 

# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 828d1 Mul8_16 [Register(0x44), Register(0x3c), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 44 3c 3c 

# 828d5 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 3e 00 

# 828d8 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 3f 00 

# inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# Index("f", Number(0n1/0x01u8))
# 828db Copy8 [Register(0x3d), Register(0x5d)]
#       inline_mul32_64_mul16_32_11_t6ec2 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
#       Index("f", Number(0n1/0x01u8))
0b 3d 5d 

# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
# 828de Copy8 [Register(0x5d), Register(0x3f)]
#       inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t6ec2 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(0n3/0x03u8)), var_type: None, value: Index("f", Number(0n1/0x01u8)) }
0b 5d 3f 

# inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# Index("f", Number(0n0/0x00u8))
# 828e1 Copy8 [Register(0x3c), Register(0x5d)]
#       inline_mul32_64_mul16_32_11_t9922 <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
#       Index("f", Number(0n0/0x00u8))
0b 3c 5d 

# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
# 828e4 Copy8 [Register(0x5d), Register(0x3e)]
#       inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_t9922 U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(0n2/0x02u8)), var_type: None, value: Index("f", Number(0n0/0x00u8)) }
0b 5d 3e 

# inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# # In IlFunctionId("mul32_64"), at #222, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
# 828e7 LoadImm8 [Register(0x5a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
#       # In IlFunctionId("mul32_64"), at #222, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_ta97f <- 0n0/0x00u8  -> inline_mul32_64_mul16_32_10_ta97f <- 0n0/0x00u8 
04 5a 00 

# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #223, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
# 828ea Copy8 [Register(0x5a), Register(0x3d)]
#       inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(0n1/0x01u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #223, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5a 3d 

# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #224, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 828ed Copy8 [Register(0x5a), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #224, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5a 3c 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 828f0 ClearCarry []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 828f1 AddCarry32_1 [Register(0x38), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 38 3c 38 

# 828f5 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(U32), value: Index(\"b\", Number(0n1/0x01u8)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# Index("b", Number(0n1/0x01u8))
# 828f6 Copy8 [Register(0x35), Register(0x58)]
#       inline_mul32_64_mul16_32_11_te47a <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
#       Index("b", Number(0n1/0x01u8))
0b 35 58 

# inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
# 828f9 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
20 3c 00 00 00 00 

# 828ff Copy8 [Register(0x58), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_t6ca9 U32 <- inline_mul32_64_mul16_32_11_te47a U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
#       Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }
0b 58 3c 

# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
# 82902 Mul8_16 [Register(0x30), Register(0x3c), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
11 30 3c 3c 

# 82906 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 3e 00 

# 82909 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_t6ca9) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(U32), value: Index("b", Number(0n1/0x01u8)) })
04 3f 00 

# inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# Index("a", Number(0n1/0x01u8))
# 8290c Copy8 [Register(0x31), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_t3009 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
#       Index("a", Number(0n1/0x01u8))
0b 31 5c 

# inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
# 8290f LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
20 44 00 00 00 00 

# 82915 Copy8 [Register(0x5c), Register(0x44)]
#       inline_mul32_64_mul16_32_11_tb9f0 U32 <- inline_mul32_64_mul16_32_11_t3009 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }
0b 5c 44 

# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index(\"a\", Number(0n1/0x01u8)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
# 82918 Mul8_16 [Register(0x44), Register(0x34), Register(0x30)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
11 44 34 30 

# 8291c LoadImm8 [Register(0x32), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 32 00 

# 8291f LoadImm8 [Register(0x33), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tb9f0 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(U32)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(U32), value: Index("a", Number(0n1/0x01u8)) }, Ident("b"))
04 33 00 

# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 82922 Copy32 [Register(0x3c), Register(0x34)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 3c 34 

# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82925 ClearCarry []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 82926 AddCarry32_1 [Register(0x34), Register(0x30), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 34 30 3c 

# 8292a AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# Index("d", Number(0n2/0x02u8))
# 8292b Copy8 [Register(0x3e), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_t8575 <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
#       Index("d", Number(0n2/0x02u8))
0b 3e 5c 

# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
# 8292e Copy8 [Register(0x5c), Register(0x3f)]
#       inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t8575 U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(0n3/0x03u8)), var_type: None, value: Index("d", Number(0n2/0x02u8)) }
0b 5c 3f 

# inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# Index("d", Number(0n1/0x01u8))
# 82931 Copy8 [Register(0x3d), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_t34f7 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
#       Index("d", Number(0n1/0x01u8))
0b 3d 5c 

# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
# 82934 Copy8 [Register(0x5c), Register(0x3e)]
#       inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_t34f7 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(0n2/0x02u8)), var_type: None, value: Index("d", Number(0n1/0x01u8)) }
0b 5c 3e 

# inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# Index("d", Number(0n0/0x00u8))
# 82937 Copy8 [Register(0x3c), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_t30b9 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
#       Index("d", Number(0n0/0x00u8))
0b 3c 5c 

# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
# 8293a Copy8 [Register(0x5c), Register(0x3d)]
#       inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_t30b9 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(0n1/0x01u8)), var_type: None, value: Index("d", Number(0n0/0x00u8)) }
0b 5c 3d 

# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
# # In IlFunctionId("mul32_64"), at #245, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
# 8293d Copy8 [Register(0x5a), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(0n0/0x00u8)), var_type: None, value: Number(0n0/0x00u8) }
#       # In IlFunctionId("mul32_64"), at #245, replacing reference to inline_mul32_64_mul16_32_11_ta97f with inline_mul32_64_mul16_32_10_ta97f as they share the same const value: Number(0n0/0x00u8). inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_ta97f U8 -> inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_ta97f U8
0b 5a 3c 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 82940 Copy32 [Register(0x3c), Register(0x34)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 3c 34 

# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 82943 ClearCarry []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82944 AddCarry32_1 [Register(0x38), Register(0x34), Register(0x30)]
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 38 34 30 

# 82948 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 82949 Copy32 [Register(0x30), Register(0x34)]
#       temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 30 34 

# :inline_mul32_64_mul16_32_11_function_end_mul16_32 None
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# Index("temp", Number(0n0/0x00u8))
# 8294c Copy8 [Register(0x34), Register(0x58)]
#       t9186 <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
#       Index("temp", Number(0n0/0x00u8))
0b 34 58 

# temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
# 8294f Copy8 [Register(0x58), Register(0x6a)]
#       temp_lo[0x02..0x03] <- t9186 U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(0n2/0x02u8)), var_type: None, value: Index("temp", Number(0n0/0x00u8)) }
0b 58 6a 

# t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# Index("temp", Number(0n1/0x01u8))
# 82952 Copy8 [Register(0x35), Register(0x58)]
#       t3d83 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
#       Index("temp", Number(0n1/0x01u8))
0b 35 58 

# temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
# 82955 Copy8 [Register(0x58), Register(0x6b)]
#       temp_lo[0x03..0x04] <- t3d83 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(0n3/0x03u8)), var_type: None, value: Index("temp", Number(0n1/0x01u8)) }
0b 58 6b 

# t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# Index("temp", Number(0n2/0x02u8))
# 82958 Copy8 [Register(0x36), Register(0x58)]
#       t3970 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
#       Index("temp", Number(0n2/0x02u8))
0b 36 58 

# temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
# 8295b Copy8 [Register(0x58), Register(0x60)]
#       temp_hi[0x00..0x01] <- t3970 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(0n0/0x00u8)), var_type: None, value: Index("temp", Number(0n2/0x02u8)) }
0b 58 60 

# t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# Index("temp", Number(0n3/0x03u8))
# 8295e Copy8 [Register(0x37), Register(0x58)]
#       t3b80 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
#       Index("temp", Number(0n3/0x03u8))
0b 37 58 

# temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
# 82961 Copy8 [Register(0x58), Register(0x61)]
#       temp_hi[0x01..0x02] <- t3b80 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(0n1/0x01u8)), var_type: None, value: Index("temp", Number(0n3/0x03u8)) }
0b 58 61 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 82964 Copy32 [Register(0x0c), Register(0x6c)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 6c 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 82967 Copy32 [Register(0x68), Register(0x34)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 68 34 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 8296a Store32_1 [Register(0x34), Register(0x6c)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 34 6c 

# 8296d Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# Ident("__frame_pointer")
# 8296e Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
# 82971 Copy32 [Register(0x6c), Register(0x34)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
21 6c 34 

# 82974 AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n4/0x00000004u32))
32 34 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 8297a Copy32 [Register(0x60), Register(0x38)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 60 38 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 8297d Store32_1 [Register(0x38), Register(0x34)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 38 34 

# 82980 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# Ident("__frame_pointer")
# 82981 Copy32 [Register(0x0c), Register(0x6c)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
#       Ident("__frame_pointer")
21 0c 6c 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
# 82984 Copy32 [Register(0x6c), Register(0x34)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
21 6c 34 

# 82987 AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(0n0/0x00000000u32))
32 34 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 8298d Copy32 [Register(0x34), Register(0x38)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 34 38 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82990 Copy32 [Register(0x40), Register(0x30)]
#       inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 40 30 

# inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82993 Copy32 [Register(0x38), Register(0x34)]
#       inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 38 34 

# inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82996 Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 40 38 

# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(U32)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 82999 Load32 [Register(0x30), Register(0x3c)]
#       inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(U32)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 30 3c 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 8299c Copy32 [Register(0x38), Register(0x40)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 38 40 

# 8299f AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 40 04 00 00 00 

# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
# 829a5 Copy32 [Register(0x30), Register(0x44)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
21 30 44 

# 829a8 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 829ae Load32 [Register(0x44), Register(0x48)]
#       inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 44 48 

# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
# 829b1 Copy32 [Register(0x34), Register(0x44)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
21 34 44 

# 829b4 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("b") }, Number(0n4/0x00000004u32))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 829ba Load32 [Register(0x44), Register(0x44)]
#       inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 44 44 

# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 829bd ClearCarry []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 829be AddCarry32_1 [Register(0x48), Register(0x44), Register(0x44)]
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 48 44 44 

# 829c2 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 829c3 Store32_1 [Register(0x44), Register(0x40)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 44 40 

# 829c6 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 829c7 Load32 [Register(0x30), Register(0x40)]
#       inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 30 40 

# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 829ca Load32 [Register(0x34), Register(0x30)]
#       inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 34 30 

# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 829cd ClearCarry []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 829ce AddCarry32_1 [Register(0x40), Register(0x30), Register(0x30)]
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 40 30 30 

# 829d2 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 829d3 Store32_1 [Register(0x30), Register(0x38)]
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 30 38 

# 829d6 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 829d7 Load32 [Register(0x38), Register(0x34)]
#       inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 38 34 

# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 829da Copy32 [Register(0x3c), Register(0x30)]
#       inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 3c 30 

# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 829dd Cmp8 [Register(0x33), Register(0x37)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 33 37 

# 829e0 Cmp8IfZero [Register(0x32), Register(0x36)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 32 36 

# 829e3 Cmp8IfZero [Register(0x31), Register(0x35)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 31 35 

# 829e6 Cmp8IfZero [Register(0x30), Register(0x34)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 30 34 

# 829e9 JcImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 10 2a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }])], else_block: [] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 829ed Copy32 [Register(0x38), Register(0x40)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 38 40 

# 829f0 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 40 04 00 00 00 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(0n1/0x00000001u32))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }, Number(0n4/0x00000004u32))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(U32), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
# 829f6 Copy32 [Register(0x38), Register(0x40)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
21 38 40 

# 829f9 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(U32), value: Ident("c") }, Number(0n4/0x00000004u32))
32 40 04 00 00 00 

# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# PtrFieldDeref("c", "hi")
# 829ff Load32 [Register(0x40), Register(0x30)]
#       inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
#       PtrFieldDeref("c", "hi")
22 40 30 

# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
# 82a02 AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32))
32 30 01 00 00 00 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
# 82a08 Store32_1 [Register(0x30), Register(0x40)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
23 30 40 

# 82a0b Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(0n1/0x00000001u32)) }
24 

# goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 82a0c JmpImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 10 2a 08 

# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# :inline_mul32_64_add_U64_1_function_end_add_U64 None
# inline_mul32_64_add_U64_1_function_end_add_U64
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
# Return { value: None }
# 82a10 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
#       Return { value: None }
32 0c 08 00 00 00 

# return None None
# Return { value: None }
# 82a16 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 82a1c JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_mul32_64 None
# function_end_mul32_64
# Unreachable None
# 82a1e Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec32
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var b (Local b Number(U32) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_a (Arg0 a Number(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a (Arg0 a Number(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d (t1a5d Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d (t286d Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 (t3009 Index("a", Number(0n1/0x01u8))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 (t3b02 Index("a", Number(0n2/0x02u8))) Reg(U8) Some([122])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e (t4b1e Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b (t4e2b Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) Reg(U8) Some([122])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 (t7123 Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 (t7d53 Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c (t858c Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 (t8792 Ident("a")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e (t8c2e Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df (t94df Index("a", Number(0n3/0x03u8))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 (ta4e7 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 (tb4e5 Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 (td726 Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 (te6a8 Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 (tf695 Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 (tfbb9 Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([124, 125, 126, 127]) Number(0n987656/0x000f1208u32)
# Var inline_print_dec32_div32_by10_47_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_tb7c3 (tb7c3 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }) Reg(U32) Some([116, 117, 118, 119]) Number(0n987660/0x000f120cu32)
# Var inline_print_dec32_div32_by10_47_tef1a (tef1a Number(0xcccccccdu32)) Reg(U32) Some([128, 129, 130, 131]) Number(0xcccccccdu32)
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(U32)) Reg(U32) Some([112, 113, 114, 115])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(U32) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([112, 113, 114, 115])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([132])
# Var inline_print_dec32_putc_29_t0 (static "lcd_enable" addr) Reg(U32) Some([116, 117, 118, 119]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec32_putc_29_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([121])
# Var inline_print_dec32_putc_29_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([120]) Number(0n0/0x00u8)
# Var inline_print_dec32_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([132])
# Var t3404 (t3404 Index("a", Number(0n0/0x00u8))) Reg(U8) Some([132])
# Var t6f38 (t6f38 Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))) Reg(U8) Some([132])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([112, 113, 114, 115])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([124, 125, 126, 127])
# Var t9c15 (t9c15 Number(0n256/0x00000100u32)) Reg(U32) Some([116, 117, 118, 119]) Number(0n256/0x00000100u32)
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([116, 117, 118, 119])
# 82a23 Copy32 [Register(0x00), Register(0x70)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [112, 113, 114, 115].
21 00 70 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Ident("a")
# 82a26 Copy32 [Register(0x70), Register(0x7c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Ident("a")
21 70 7c 

# t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# Number(0n256/0x00000100u32)
# 82a29 LoadImm32 [Register(0x74), Constant32(0x00000100=256)]
#       t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
#       Number(0n256/0x00000100u32)
20 74 00 01 00 00 

# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
# 82a2f Cmp8 [Register(0x77), Register(0x7f)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
15 77 7f 

# 82a32 Cmp8IfZero [Register(0x76), Register(0x7e)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 76 7e 

# 82a35 Cmp8IfZero [Register(0x75), Register(0x7d)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 75 7d 

# 82a38 Cmp8IfZero [Register(0x74), Register(0x7c)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
16 74 7c 

# 82a3b JcImm [Label24(print_dec32_if_else_0_2)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }
71 61 2a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(0n256/0x00000100u32) }\n", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(0n256/0x00000100u32) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }, Return { value: None }])], else_block: [] }
# print_dec32_if_true_0_1
# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# Index("a", Number(0n0/0x00u8))
# 82a3f Copy8 [Register(0x70), Register(0x84)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
#       Index("a", Number(0n0/0x00u8))
0b 70 84 

# None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
# 82a42 Copy8 [Register(0x84), Register(0x00)]
#       Arg0[a]=t3404 None <= call print_dec8(t3404,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(0n0/0x00u8))] })
0b 84 00 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 82a45 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 82a4b StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 55 2a 08 00 

# 82a51 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 1a 2c 08 

# 82a55 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# return None Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# Return { value: None }
# 82a5b JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 82a5d JmpImm [Label24(print_dec32_if_end_0)]
#       goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
70 61 2a 08 

# :print_dec32_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_else_0_2
# :print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# Ident("a")
# 82a61 Copy32 [Register(0x70), Register(0x7c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
#       Ident("a")
21 70 7c 

# inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# 82a64 Copy32 [Register(0x7c), Register(0x74)]
#       inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
21 7c 74 

# inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# Number(0xcccccccdu32)
# 82a67 LoadImm32 [Register(0x80), Constant32(0xcccccccd=3435973837)]
#       inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       Number(0xcccccccdu32)
20 80 cd cc cc cc 

# inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# Number(0n987656/0x000f1208u32)
# 82a6d LoadImm32 [Register(0x7c), Constant32(0x000f1208=987656)]
#       inline_print_dec32_div32_by10_47_t1c61 <- 0n987656/0x000f1208u32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
#       AddressOf(Ident("prod"))
#       Number(0n987656/0x000f1208u32)
20 7c 08 12 0f 00 

# None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
# 82a73 Copy32 [Register(0x74), Register(0x00)]
#       Arg0[a]=inline_print_dec32_div32_by10_47_a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 74 00 

# 82a76 Copy32 [Register(0x80), Register(0x04)]
#       Arg1[b]=inline_print_dec32_div32_by10_47_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 80 04 

# 82a79 Copy32 [Register(0x7c), Register(0x08)]
#       Arg2[c]=inline_print_dec32_div32_by10_47_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(0xcccccccdu32), AddressOf(Ident("prod"))] })
21 7c 08 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111}
# Registers to save: []
# 82a7c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 82a82 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 8c 2a 08 00 

# 82a88 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 c1 25 08 

# 82a8c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
# Number(0n987660/0x000f120cu32)
# 82a92 LoadImm32 [Register(0x74), Constant32(0x000f120c=987660)]
#       inline_print_dec32_div32_by10_47_tb7c3 <- 0n987660/0x000f120cu32  Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U32)), value: Arithmetic(Add, Number(0n987656/0x000f1208u32), Number(0n4/0x00000004u32)) }
#       Number(0n987660/0x000f120cu32)
20 74 0c 12 0f 00 

# inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# 82a98 Load32 [Register(0x74), Register(0x74)]
#       inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tb7c3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
22 74 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\nCall(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# Index("a", Number(0n0/0x00u8))
# 82a9b Copy8 [Register(0x74), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n0/0x00u8))
0b 74 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
# 82a9e LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
04 00 03 

# 82aa1 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x78), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8))
1e 04 00 78 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
# 82aa6 Copy8 [Register(0x78), Register(0x74)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tfbb9 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n0/0x00u8)), Number(0n3/0x03u8)) }
0b 78 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# Index("a", Number(0n1/0x01u8))
# 82aa9 Copy8 [Register(0x75), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n1/0x01u8))
0b 75 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
# 82aac LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
04 00 03 

# 82aaf Shift8 [Constant8(0x04=4), Register(0x00), Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8))
1e 04 00 79 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
# 82ab4 Copy8 [Register(0x78), Register(0x75)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t858c U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n1/0x01u8)), Number(0n3/0x03u8)) }
0b 78 75 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# Index("a", Number(0n2/0x02u8))
# 82ab7 Copy8 [Register(0x76), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n2/0x02u8))
0b 76 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
# 82aba LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
04 00 03 

# 82abd Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7a), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8))
1e 04 00 7a 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
# 82ac2 Copy8 [Register(0x78), Register(0x76)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7d53 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n2/0x02u8)), Number(0n3/0x03u8)) }
0b 78 76 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# Index("a", Number(0n3/0x03u8))
# 82ac5 Copy8 [Register(0x77), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
#       Index("a", Number(0n3/0x03u8))
0b 77 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
# 82ac8 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
04 00 03 

# 82acb Shift8 [Constant8(0x04=4), Register(0x00), Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
#       Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8))
1e 04 00 79 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
# 82ad0 Copy8 [Register(0x78), Register(0x77)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4b1e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(0n3/0x03u8)), Number(0n3/0x03u8)) }
0b 78 77 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n0/0x00u8))
# 82ad3 Copy8 [Register(0x74), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n0/0x00u8))
0b 74 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
# 82ad6 AndImm8 [Register(0x78), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8))
18 78 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
# 82ad9 Copy8 [Register(0x78), Register(0x74)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1a5d U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n0/0x00u8)), Number(0n31/0x1fu8)) }
0b 78 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n0/0x00u8))
# 82adc Copy8 [Register(0x74), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n0/0x00u8))
0b 74 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n1/0x01u8))
# 82adf Copy8 [Register(0x75), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n1/0x01u8))
0b 75 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
# 82ae2 Copy8 [Register(0x79), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
0b 79 7a 

# 82ae5 AndImm8 [Register(0x7a), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))
18 7a e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
# 82ae8 Or8 [Register(0x78), Register(0x7a), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3404 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t4e2b) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8)))
1c 78 7a 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
# 82aec Copy8 [Register(0x78), Register(0x74)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_td726 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(0n0/0x00u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n0/0x00u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n224/0xe0u8))) }
0b 78 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n1/0x01u8))
# 82aef Copy8 [Register(0x75), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n1/0x01u8))
0b 75 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
# 82af2 Copy8 [Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
0b 79 78 

# 82af5 AndImm8 [Register(0x78), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8))
18 78 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
# 82af8 Copy8 [Register(0x78), Register(0x75)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t7123 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n1/0x01u8)), Number(0n31/0x1fu8)) }
0b 78 75 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n1/0x01u8))
# 82afb Copy8 [Register(0x75), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n1/0x01u8))
0b 75 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n2/0x02u8))
# 82afe Copy8 [Register(0x76), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n2/0x02u8))
0b 76 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
# 82b01 Copy8 [Register(0x7a), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
0b 7a 78 

# 82b04 AndImm8 [Register(0x78), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))
18 78 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
# 82b07 Or8 [Register(0x79), Register(0x78), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3009 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta4e7) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8)))
1c 79 78 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
# 82b0b Copy8 [Register(0x78), Register(0x75)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tb4e5 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(0n1/0x01u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n1/0x01u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n224/0xe0u8))) }
0b 78 75 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n2/0x02u8))
# 82b0e Copy8 [Register(0x76), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n2/0x02u8))
0b 76 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
# 82b11 Copy8 [Register(0x7a), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
0b 7a 78 

# 82b14 AndImm8 [Register(0x78), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8))
18 78 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
# 82b17 Copy8 [Register(0x78), Register(0x76)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tf695 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n2/0x02u8)), Number(0n31/0x1fu8)) }
0b 78 76 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Index("a", Number(0n2/0x02u8))
# 82b1a Copy8 [Register(0x76), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Index("a", Number(0n2/0x02u8))
0b 76 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# Index("a", Number(0n3/0x03u8))
# 82b1d Copy8 [Register(0x77), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
#       Index("a", Number(0n3/0x03u8))
0b 77 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
# 82b20 Copy8 [Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
0b 79 78 

# 82b23 AndImm8 [Register(0x78), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))
18 78 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
# 82b26 Or8 [Register(0x7a), Register(0x78), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3b02 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t286d) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
#       Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8)))
1c 7a 78 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
# 82b2a Copy8 [Register(0x78), Register(0x76)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8c2e U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(0n2/0x02u8)), var_type: None, value: Arithmetic(BitwiseOr, Index("a", Number(0n2/0x02u8)), Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n224/0xe0u8))) }
0b 78 76 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# Index("a", Number(0n3/0x03u8))
# 82b2d Copy8 [Register(0x77), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
#       Index("a", Number(0n3/0x03u8))
0b 77 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
# 82b30 Copy8 [Register(0x79), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
0b 79 78 

# 82b33 AndImm8 [Register(0x78), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t94df BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
#       Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8))
18 78 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
# 82b36 Copy8 [Register(0x78), Register(0x77)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te6a8 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(0n3/0x03u8)), var_type: None, value: Arithmetic(BitwiseAnd, Index("a", Number(0n3/0x03u8)), Number(0n31/0x1fu8)) }
0b 78 77 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 None
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# :inline_print_dec32_div32_by10_47_function_end_div32_by10 None
# inline_print_dec32_div32_by10_47_function_end_div32_by10
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# 82b39 Copy32 [Register(0x74), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
21 74 00 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132]
# 82b3c Push8 [Register(0x84)]
#       Saving reg0x84 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 84 

# 82b3e Push8 [Register(0x83)]
#       Saving reg0x83 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 83 

# 82b40 Push8 [Register(0x82)]
#       Saving reg0x82 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 82 

# 82b42 Push8 [Register(0x81)]
#       Saving reg0x81 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 81 

# 82b44 Push8 [Register(0x80)]
#       Saving reg0x80 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 80 

# 82b46 Push8 [Register(0x7f)]
#       Saving reg0x7f before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7f 

# 82b48 Push8 [Register(0x7e)]
#       Saving reg0x7e before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7e 

# 82b4a Push8 [Register(0x7d)]
#       Saving reg0x7d before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7d 

# 82b4c Push8 [Register(0x7c)]
#       Saving reg0x7c before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7c 

# 82b4e Push8 [Register(0x7a)]
#       Saving reg0x7a before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7a 

# 82b50 Push8 [Register(0x79)]
#       Saving reg0x79 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 79 

# 82b52 Push8 [Register(0x78)]
#       Saving reg0x78 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 78 

# 82b54 Push8 [Register(0x77)]
#       Saving reg0x77 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 77 

# 82b56 Push8 [Register(0x76)]
#       Saving reg0x76 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 76 

# 82b58 Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 75 

# 82b5a Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 74 

# 82b5c Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 73 

# 82b5e Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 72 

# 82b60 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 71 

# 82b62 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 70 

# 82b64 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 82b6a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 74 2b 08 00 

# 82b70 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 23 2a 08 

# 82b74 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 82b7a Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 70 

# 82b7c Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 71 

# 82b7e Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 72 

# 82b80 Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 73 

# 82b82 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 74 

# 82b84 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 75 

# 82b86 Pop8 [Register(0x76)]
#       Restoring reg0x76 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 76 

# 82b88 Pop8 [Register(0x77)]
#       Restoring reg0x77 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 77 

# 82b8a Pop8 [Register(0x78)]
#       Restoring reg0x78 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 78 

# 82b8c Pop8 [Register(0x79)]
#       Restoring reg0x79 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 79 

# 82b8e Pop8 [Register(0x7a)]
#       Restoring reg0x7a after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7a 

# 82b90 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7c 

# 82b92 Pop8 [Register(0x7d)]
#       Restoring reg0x7d after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7d 

# 82b94 Pop8 [Register(0x7e)]
#       Restoring reg0x7e after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7e 

# 82b96 Pop8 [Register(0x7f)]
#       Restoring reg0x7f after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7f 

# 82b98 Pop8 [Register(0x80)]
#       Restoring reg0x80 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 80 

# 82b9a Pop8 [Register(0x81)]
#       Restoring reg0x81 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 81 

# 82b9c Pop8 [Register(0x82)]
#       Restoring reg0x82 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 82 

# 82b9e Pop8 [Register(0x83)]
#       Restoring reg0x83 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 83 

# 82ba0 Pop8 [Register(0x84)]
#       Restoring reg0x84 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 84 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Ident("a")
# 82ba2 Copy32 [Register(0x70), Register(0x7c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Ident("a")
21 70 7c 

# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }\nArithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))\nCall(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# 82ba5 Copy32 [Register(0x74), Register(0x70)]
#       inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
21 74 70 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82ba8 ClearCarry []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 82ba9 AddCarry32_1 [Register(0x70), Register(0x70), Register(0x70)]
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 70 70 70 

# 82bad AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82bae ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 82baf AddCarry32_1 [Register(0x70), Register(0x70), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 70 70 74 

# 82bb3 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U32)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 82bb4 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 82bb5 AddCarry32_1 [Register(0x74), Register(0x74), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 74 74 74 

# 82bb9 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 82bba ClearCarry []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 82bbb AddCarry32_1 [Register(0x74), Register(0x70), Register(0x70)]
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 74 70 70 

# 82bbf AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 None
# inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# 82bc0 Copy32 [Register(0x70), Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
21 70 00 

# 82bc3 Invert8 [Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 00 

# 82bc5 Invert8 [Register(0x01)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 01 

# 82bc7 Invert8 [Register(0x02)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 02 

# 82bc9 Invert8 [Register(0x03)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 03 

# 82bcb AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
32 00 01 00 00 00 

# 82bd1 ClearCarry []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
03 

# 82bd2 AddCarry32_1 [Register(0x7c), Register(0x00), Register(0x70)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
30 7c 00 70 

# 82bd6 AddCarry32_2 []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
31 

# t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# Index("a", Number(0n0/0x00u8))
# 82bd7 Copy8 [Register(0x70), Register(0x84)]
#       t3404 <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
#       Index("a", Number(0n0/0x00u8))
0b 70 84 

# t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
# 82bda LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
04 00 30 

# 82bdd Add8NoCarryIn [Register(0x84), Register(0x00), Register(0x84)]
#       t6f38 <- t3404 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))
14 84 00 84 

# inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_c <- t6f38 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(0n0/0x00u8)), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82be1 Out0 [Register(0x84)]
#       IoWrite0
68 84 

# inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82be3 LoadImm32 [Register(0x74), Constant32(0x000f105c=987228)]
#       inline_print_dec32_putc_29_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 74 5c 10 0f 00 

# inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82be9 Load8 [Register(0x74), Register(0x79)]
#       inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 74 79 

# inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82bec LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_print_dec32_putc_29_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 78 00 

# if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 82bef Cmp8 [Register(0x79), Register(0x78)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 79 78 

# 82bf2 JzImm [Label24(inline_print_dec32_putc_29_putc_if_else_0_2)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 13 2c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_ta97f then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_putc_if_true_0_1)], resolved: None }
# :inline_print_dec32_putc_29_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec32_putc_29_putc_if_true_0_1
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82bf6 Copy8 [Register(0x84), Register(0x00)]
#       Arg0[ch]=inline_print_dec32_putc_29_tac13 None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 84 00 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 82bf9 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82bff StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 09 2c 08 00 

# 82c05 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 82c09 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 82c0f JmpImm [Label24(inline_print_dec32_putc_29_putc_if_end_0)]
#       goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 13 2c 08 

# :inline_print_dec32_putc_29_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_else_0_2
# :inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_end_0
# :inline_print_dec32_putc_29_function_end_putc None
# inline_print_dec32_putc_29_function_end_putc
# return None None
# Return { value: None }
# 82c13 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec32 None
# function_end_print_dec32
# Unreachable None
# 82c15 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec8
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([133])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([134])
# Var inline_print_dec8_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([133])
# Var inline_print_dec8_putc_30_t0 (static "lcd_enable" addr) Reg(U32) Some([136, 137, 138, 139]) Number(0n987228/0x000f105cu32)
# Var inline_print_dec8_putc_30_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([134])
# Var inline_print_dec8_putc_30_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([140]) Number(0n0/0x00u8)
# Var inline_print_dec8_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([133])
# Var t25ee (t25ee Number(0n10/0x0au8)) Reg(U8) Some([134]) Number(0n10/0x0au8)
# Var t5673 (t5673 Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))) Reg(U8) Some([133])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([133])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([134])
# Var tf5e0 (tf5e0 Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) Reg(U8) Some([134])
# 82c1a Copy8 [Register(0x00), Register(0x85)]
#       Save function parameter 'a' registers [0] to locals [133].
0b 00 85 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }, [Assign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }, Assign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"a\"), right: Number(0n10/0x0au8) }\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# Number(0n10/0x0au8)
# 82c1d LoadImm8 [Register(0x86), Constant8(0x0a=10)]
#       t25ee <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
#       Number(0n10/0x0au8)
04 86 0a 

# if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
# 82c20 Cmp8 [Register(0x86), Register(0x85)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
15 86 85 

# 82c23 JcImm [Label24(print_dec8_if_true_0_1)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
71 2b 2c 08 

# 82c27 JmpImm [Label24(print_dec8_if_else_0_2)]
#       if t8792 >= t25ee then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }
70 7b 2c 08 

# :print_dec8_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(0n10/0x0au8) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }])], else_block: [] }
# print_dec8_if_true_0_1
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8)) }\nArithmetic(Divide, Ident(\"a\"), Number(0n10/0x0au8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
# Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
# 82c2b LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
04 00 0a 

# 82c2e Divide8 [Register(0x85), Register(0x00), Register(0x86)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8)) }
#       Arithmetic(Divide, Ident("a"), Number(0n10/0x0au8))
17 85 00 86 

# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x86), Register(0x86)], resolved: None }
# None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# 82c32 Copy8 [Register(0x86), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0b 86 00 

# Registers used by this function: {133, 134, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [133, 134, 136, 137, 138, 139, 140]
# 82c35 Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8c 

# 82c37 Push8 [Register(0x8b)]
#       Saving reg0x8b before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8b 

# 82c39 Push8 [Register(0x8a)]
#       Saving reg0x8a before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8a 

# 82c3b Push8 [Register(0x89)]
#       Saving reg0x89 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 89 

# 82c3d Push8 [Register(0x88)]
#       Saving reg0x88 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 88 

# 82c3f Push8 [Register(0x86)]
#       Saving reg0x86 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 86 

# 82c41 Push8 [Register(0x85)]
#       Saving reg0x85 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 85 

# 82c43 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 82c49 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 53 2c 08 00 

# 82c4f JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 1a 2c 08 

# 82c53 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 82c59 Pop8 [Register(0x85)]
#       Restoring reg0x85 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 85 

# 82c5b Pop8 [Register(0x86)]
#       Restoring reg0x86 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 86 

# 82c5d Pop8 [Register(0x88)]
#       Restoring reg0x88 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 88 

# 82c5f Pop8 [Register(0x89)]
#       Restoring reg0x89 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 89 

# 82c61 Pop8 [Register(0x8a)]
#       Restoring reg0x8a after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8a 

# 82c63 Pop8 [Register(0x8b)]
#       Restoring reg0x8b after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8b 

# 82c65 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8c 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8)))\nArithmetic(Multiply, Ident(\"b\"), Number(0n10/0x0au8))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x86), Register(0x86)], resolved: None }
# tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
# 82c67 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
04 00 0a 

# 82c6a Mul8_8 [Register(0x86), Register(0x00), Register(0x86)]
#       tf5e0 <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
#       Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))
10 86 00 86 

# a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
# 82c6e Copy8 [Register(0x86), Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
0b 86 00 

# 82c71 Negate8 [Register(0x00)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
02 00 

# 82c73 Add8NoCarryIn [Register(0x85), Register(0x00), Register(0x85)]
#       a <- t8792 Subtract Var(tf5e0) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(0n10/0x0au8)))
14 85 00 85 

# goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 82c77 JmpImm [Label24(print_dec8_if_end_0)]
#       goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
70 7b 2c 08 

# :print_dec8_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_else_0_2
# :print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_end_0
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\nArithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))\nIdent(\"a\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
# 82c7b LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
04 00 30 

# 82c7e Add8NoCarryIn [Register(0x85), Register(0x00), Register(0x85)]
#       t5673 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
#       Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))
14 85 00 85 

# inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(0n48/0x30u8))] })
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_c <- t5673 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(0n48/0x30u8))] })\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82c82 Out0 [Register(0x85)]
#       IoWrite0
68 85 

# inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82c84 LoadImm32 [Register(0x88), Constant32(0x000f105c=987228)]
#       inline_print_dec8_putc_30_t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
20 88 5c 10 0f 00 

# inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Ident("lcd_enable")
# 82c8a Load8 [Register(0x88), Register(0x86)]
#       inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Ident("lcd_enable")
05 88 86 

# inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82c8d LoadImm8 [Register(0x8c), Constant8(0x00=0)]
#       inline_print_dec8_putc_30_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 8c 00 

# if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
# 82c90 Cmp8 [Register(0x86), Register(0x8c)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
15 86 8c 

# 82c93 JzImm [Label24(inline_print_dec8_putc_30_putc_if_else_0_2)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }
72 b8 2c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_ta97f then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(0n0/0x00u8) }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_putc_if_true_0_1)], resolved: None }
# :inline_print_dec8_putc_30_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(0n0/0x00u8) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec8_putc_30_putc_if_true_0_1
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82c97 Copy8 [Register(0x85), Register(0x00)]
#       Arg0[ch]=inline_print_dec8_putc_30_tac13 None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 85 00 

# Registers used by this function: {133, 134, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 246, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [140]
# 82c9a Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8c 

# 82c9c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82ca2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c ac 2c 08 00 

# 82ca8 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 85 22 08 

# 82cac AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 82cb2 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8c 

# goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 82cb4 JmpImm [Label24(inline_print_dec8_putc_30_putc_if_end_0)]
#       goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 b8 2c 08 

# :inline_print_dec8_putc_30_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_else_0_2
# :inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_end_0
# :inline_print_dec8_putc_30_function_end_putc None
# inline_print_dec8_putc_30_function_end_putc
# return None None
# Return { value: None }
# 82cb8 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec8 None
# function_end_print_dec8
# Unreachable None
# 82cba Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :stdio_init
# Ret None
# Var inline_stdio_init_queue_init_35_ta97f (ta97f Number(0n0/0x00u8)) Reg(U8) Some([141]) Number(0n0/0x00u8)
# Var inline_stdio_init_queue_init_35_tb702 (tb702 Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }) Reg(U32) Some([144, 145, 146, 147]) Number(0n987648/0x000f1200u32)
# Var inline_stdio_init_queue_init_35_tc1ff (tc1ff Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }) Reg(U32) Some([144, 145, 146, 147]) Number(0n987652/0x000f1204u32)
# Var t0 (static "lcd_enable" addr) Reg(U32) Some([148, 149, 150, 151]) Number(0n987228/0x000f105cu32)
# Var t1 (static "keyboard_enable" addr) Reg(U32) Some([148, 149, 150, 151]) Number(0n987144/0x000f1008u32)
# Var ta11a (ta11a Number(0n1/0x01u8)) Reg(U8) Some([152]) Number(0n1/0x01u8)
# t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82cbf LoadImm32 [Register(0x94), Constant32(0x000f105c=987228)]
#       t0 <- 0n987228/0x000f105cu32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 94 5c 10 0f 00 

# ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# Number(0n1/0x01u8)
# 82cc5 LoadImm8 [Register(0x98), Constant8(0x01=1)]
#       ta11a <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
#       Number(0n1/0x01u8)
04 98 01 

# mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82cc8 Store8 [Register(0x98), Register(0x94)]
#       mem[t0] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 98 94 

# t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82ccb LoadImm32 [Register(0x94), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
20 94 08 10 0f 00 

# mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
# 82cd1 Store8 [Register(0x98), Register(0x94)]
#       mem[t1] <- ta11a U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(0n1/0x01u8) }
06 98 94 

# inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
# 82cd4 LoadImm32 [Register(0x90), Constant32(0x000f1200=987648)]
#       inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n256/0x00000100u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987648/0x000f1200u32 `.
20 90 00 12 0f 00 

# inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# Number(0n0/0x00u8)
# 82cda LoadImm8 [Register(0x8d), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_ta97f <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
#       Number(0n0/0x00u8)
04 8d 00 

# mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
# 82cdd Store8 [Register(0x8d), Register(0x90)]
#       mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(0n0/0x00u8) }
06 8d 90 

# inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
# 82ce0 LoadImm32 [Register(0x90), Constant32(0x000f1204=987652)]
#       inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
#       Cast { old_type: Some(Number(U32)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(U32), value: Ident("s") }, Number(0n260/0x00000104u32))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987652/0x000f1204u32 `.
20 90 04 12 0f 00 

# mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
# 82ce6 Store8 [Register(0x8d), Register(0x90)]
#       mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_ta97f U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(0n0/0x00u8) }
06 8d 90 

# :inline_stdio_init_queue_init_35_function_end_queue_init None
# inline_stdio_init_queue_init_35_function_end_queue_init
# None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {141, 144, 145, 146, 147, 148, 149, 150, 151, 152}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 209, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245}
# Registers to save: [141, 144, 145, 146, 147]
# 82ce9 Push8 [Register(0x93)]
#       Saving reg0x93 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 93 

# 82ceb Push8 [Register(0x92)]
#       Saving reg0x92 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 92 

# 82ced Push8 [Register(0x91)]
#       Saving reg0x91 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 91 

# 82cef Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 90 

# 82cf1 Push8 [Register(0x8d)]
#       Saving reg0x8d before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 8d 

# 82cf3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 82cf9 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c 03 2d 08 00 

# 82cff JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 3a 21 08 

# 82d03 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# 82d09 Pop8 [Register(0x8d)]
#       Restoring reg0x8d after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 8d 

# 82d0b Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 90 

# 82d0d Pop8 [Register(0x91)]
#       Restoring reg0x91 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 91 

# 82d0f Pop8 [Register(0x92)]
#       Restoring reg0x92 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 92 

# 82d11 Pop8 [Register(0x93)]
#       Restoring reg0x93 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 93 

# None <= call KeyBoard_init() Some('/lutcomp/programs/lib/stdio.j':(15,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {141, 144, 145, 146, 147, 148, 149, 150, 151, 152}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 82d13 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 

# 82d19 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c 23 2d 08 00 

# 82d1f JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 08 08 

# 82d23 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 82d29 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 82d2b Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

