v2.0 raw
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) } -> 987136
# const Number(USIZE, 987136) -> 987136
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) } -> 987136
# const Number(USIZE, 987136) -> 987136
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 0) -> 0
# const AddressOf(Ident("stdin")) -> 987236
# const Number(USIZE, 987236) -> 987236
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) } -> 987136
# const Number(USIZE, 987136) -> 987136
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) } -> 987136
# const Number(USIZE, 987136) -> 987136
# const Number(U8, 1) -> 1
# const Number(U8, 0) -> 0
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 1) -> 1
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) } -> 987140
# const Number(USIZE, 987140) -> 987140
# const Number(U8, 0) -> 0
# In IlFunctionId("Keyboard_poll"), resolved the constant val `[100, 16, 15, 0]` for var `tfff6`.
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 43) -> 43
# const Number(U8, 2) -> 2
# const Number(U8, 45) -> 45
# const Number(U8, 2) -> 2
# const Number(U8, 42) -> 42
# const Number(U8, 2) -> 2
# const Number(U8, 47) -> 47
# const Number(U8, 2) -> 2
# const Number(U8, 115) -> 115
# const Number(U8, 2) -> 2
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 69) -> 69
# const Number(U8, 82) -> 82
# const Number(U8, 82) -> 82
# const Number(U8, 10) -> 10
# const Number(U8, 1) -> 1
# const Number(U8, 0) -> 0
# const Number(U8, 1) -> 1
# const Number(U8, 43) -> 43
# const Number(U8, 10) -> 10
# const Number(U8, 45) -> 45
# const Number(U8, 10) -> 10
# const Number(U8, 42) -> 42
# const Number(U8, 10) -> 10
# const Number(U8, 47) -> 47
# const Number(U8, 10) -> 10
# const Number(U8, 115) -> 115
# const Number(U8, 113) -> 113
# const Number(U8, 0) -> 0
# const Number(U8, 10) -> 10
# const Number(U8, 32) -> 32
# const Number(U8, 99) -> 99
# const Number(U8, 100) -> 100
# const Number(U8, 0) -> 0
# const Number(U8, 58) -> 58
# const Number(U8, 10) -> 10
# const Number(U8, 57) -> 57
# const Number(U8, 48) -> 48
# const Number(U8, 1) -> 1
# const Number(U8, 1) -> 1
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `stack` - which is also never modified. Replacing refs to latter with the former and deleting the copy: stack <- c U32
# In IlFunctionId("RpnCalc_handle"), `c` is never written to, but is copied to `t7f48` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t7f48 <- c U32
# const Number(USIZE, 0) -> 0
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `s` - which is also never modified. Replacing refs to latter with the former and deleting the copy: s <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb2e9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb2e9 <- c U32
# In IlFunctionId("RpnCalc_init"), `c` is never written to, but is copied to `tb1ed` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tb1ed <- c U32
# const Number(U8, 0) -> 0
# const Number(USIZE, 0) -> 0
# const Number(U8, 0) -> 0
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `tbc15` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tbc15 <- c U32
# In IlFunctionId("RpnCalc_push_pending"), `c` is never written to, but is copied to `t4760` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4760 <- c U32
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# In IlFunctionId("RpnCalc_run"), `calc` is never written to, but is copied to `td337` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td337 <- calc U32
# In IlFunctionId("add_U64"), `a` is never written to, but is copied to `t3203` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t3203 <- a U32
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `teec0` - which is also never modified. Replacing refs to latter with the former and deleting the copy: teec0 <- b U32
# In IlFunctionId("add_U64"), `b` is never written to, but is copied to `t24ae` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t24ae <- b U32
# const Number(USIZE, 0) -> 0
# const Number(USIZE, 0) -> 0
# const Number(USIZE, 256) -> 256
# const Number(USIZE, 0) -> 0
# const Number(USIZE, 65535) -> 65535
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(USIZE, 0) -> 0
# const Number(USIZE, 65536) -> 65536
# const Number(USIZE, 0) -> 0
# const Number(USIZE, 4294967295) -> 4294967295
# const Number(USIZE, 0) -> 0
# In IlFunctionId("div32"), removing no-op il instruction: t4a94 <- te825 Add Number(0n0/0x00000000u32)
# const Number(USIZE, 3435973837) -> 3435973837
# const AddressOf(Ident("prod")) -> 987500
# const Number(USIZE, 987500) -> 987500
# const Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987500), Number(USIZE, 4)) } -> 987504
# const Number(USIZE, 987504) -> 987504
# In IlFunctionId("div32_by10"), resolved the constant val `[108, 17, 15, 0]` for var `t1c61`.
# In IlFunctionId("div32_by10"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const AddressOf(Ident("stdin")) -> 987236
# const Number(USIZE, 987236) -> 987236
# const Number(U8, 0) -> 0
# const AddressOf(Ident("stdin")) -> 987236
# const Number(USIZE, 987236) -> 987236
# In IlFunctionId("getchar"), resolved the constant val `[8, 16, 15, 0]` for var `t0`.
# In IlFunctionId("getchar"), resolved the constant val `[100, 16, 15, 0]` for var `tfff6`.
# const Number(USIZE, 2) -> 2
# const Number(USIZE, 2) -> 2
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `td0f3` - which is also never modified. Replacing refs to latter with the former and deleting the copy: td0f3 <- i U8
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 80) -> 80
# const Number(U8, 32) -> 32
# const Number(U8, 3) -> 3
# const Number(USIZE, 1) -> 1
# const Number(U8, 3) -> 3
# const Number(USIZE, 1) -> 1
# const Number(U8, 3) -> 3
# const Number(USIZE, 1) -> 1
# const Number(U8, 2) -> 2
# const Number(USIZE, 2) -> 2
# const Number(U8, 2) -> 2
# const Number(U8, 8) -> 8
# const Number(USIZE, 2) -> 2
# const Number(U8, 0) -> 0
# const Number(U8, 12) -> 12
# const Number(USIZE, 2) -> 2
# const Number(U8, 0) -> 0
# const Number(U8, 1) -> 1
# const Number(USIZE, 2) -> 2
# In IlFunctionId("lcd_init"), resolved the constant val `[12, 16, 15, 0]` for var `t0`.
# const Number(U8, 10) -> 10
# const Number(U8, 32) -> 32
# const Number(U8, 80) -> 80
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t0`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t1`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t2`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t3`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t4`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t5`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t6`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t7`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t8`.
# In IlFunctionId("lcd_putc"), resolved the constant val `[12, 16, 15, 0]` for var `t9`.
# const Number(U8, 0) -> 0
# const Number(U8, 60) -> 60
# const Number(U8, 80) -> 80
# const Number(U8, 32) -> 32
# const Number(U8, 32) -> 32
# const Number(U8, 32) -> 32
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `[12, 16, 15, 0]` for var `t0`.
# In IlFunctionId("lcd_scroll_up"), resolved the constant val `[12, 16, 15, 0]` for var `t1`.
# const Number(U8, 82) -> 82
# const Number(U8, 80) -> 80
# const AddressOf(Ident("calc")) -> 987508
# const Number(USIZE, 987508) -> 987508
# const Number(U8, 78) -> 78
# const Number(U8, 10) -> 10
# const AddressOf(Ident("calc")) -> 987508
# const Number(USIZE, 987508) -> 987508
# In IlFunctionId("main"), resolved the constant val `[116, 17, 15, 0]` for var `tca8`.
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(USIZE, 0) -> 0
# const Number(USIZE, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(USIZE, 0) -> 0
# const Number(USIZE, 0) -> 0
# const Number(USIZE, 0) -> 0
# const Number(USIZE, 0) -> 0
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t8956` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8956 <- c U32
# In IlFunctionId("mul32_64"), `c` is never written to, but is copied to `t2558` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t2558 <- c U32
# In IlFunctionId("mul8"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# In IlFunctionId("mul8_16"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U8
# In IlFunctionId("mul8_16"), `y` is never written to, but is copied to `t8ae2` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8ae2 <- y U8
# const Number(USIZE, 256) -> 256
# const Number(U8, 0) -> 0
# In IlFunctionId("print_dec32_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# const Number(U8, 10) -> 10
# const Number(U8, 0) -> 0
# In IlFunctionId("print_dec8_test"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U8
# const Number(U8, 10) -> 10
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# In IlFunctionId("putc"), resolved the constant val `[96, 16, 15, 0]` for var `t0`.
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_pop"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t565a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t565a <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("queue_push"), `s` is never written to, but is copied to `t1d36` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t1d36 <- s U32
# In IlFunctionId("queue_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U8
# const Number(U8, 0) -> 0
# const Number(U8, 0) -> 0
# const Number(U8, 13) -> 13
# const Number(U8, 10) -> 10
# const Number(U8, 0) -> 0
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_get"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_get"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# const Number(USIZE, 0) -> 0
# In IlFunctionId("stack_init"), `s` is never written to, but is copied to `t4bb9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t4bb9 <- s U32
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_pop"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `t587d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t587d <- s U32
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `values` - which is also never modified. Replacing refs to latter with the former and deleting the copy: values <- s U32
# In IlFunctionId("stack_push"), `s` is never written to, but is copied to `tf90a` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tf90a <- s U32
# In IlFunctionId("stack_push"), `n` is never written to, but is copied to `t531d` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t531d <- n U32
# const Number(U8, 1) -> 1
# const Number(U8, 1) -> 1
# const AddressOf(Ident("stdin")) -> 987236
# const Number(USIZE, 987236) -> 987236
# In IlFunctionId("stdio_init"), resolved the constant val `[96, 16, 15, 0]` for var `t0`.
# In IlFunctionId("stdio_init"), resolved the constant val `[8, 16, 15, 0]` for var `t1`.
# In IlFunctionId("stdio_init"), resolved the constant val `[100, 16, 15, 0]` for var `tfff6`.
# const AddressOf(Ident("c")) -> 987584
# const Number(USIZE, 987584) -> 987584
# const AddressOf(Ident("c")) -> 987584
# const Number(USIZE, 987584) -> 987584
# In IlFunctionId("test_add_U64"), resolved the constant val `[192, 17, 15, 0]` for var `tcc7b`.
# In IlFunctionId("test_add_U64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_add_U64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# const Number(U8, 0) -> 0
# In IlFunctionId("test_delay"), `x` is never written to, but is copied to `tad57` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tad57 <- x U32
# const Number(U8, 0) -> 0
# const AddressOf(Ident("c")) -> 987592
# const Number(USIZE, 987592) -> 987592
# const AddressOf(Ident("c")) -> 987592
# const Number(USIZE, 987592) -> 987592
# In IlFunctionId("test_mul32_64"), resolved the constant val `[200, 17, 15, 0]` for var `tcc7b`.
# In IlFunctionId("test_mul32_64"), `a` is never written to, but is copied to `t8792` - which is also never modified. Replacing refs to latter with the former and deleting the copy: t8792 <- a U32
# In IlFunctionId("test_mul32_64"), `b` is never written to, but is copied to `tace9` - which is also never modified. Replacing refs to latter with the former and deleting the copy: tace9 <- b U32
# In IlFunctionId("Keyboard_poll"), resolved the constant val `[100, 16, 15, 0]` for var `inline_Keyboard_poll_queue_push_37_s`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `[100, 16, 15, 0]` for var `inline_Keyboard_poll_queue_push_37_t4d4f`.
# In IlFunctionId("Keyboard_poll"), resolved the constant val `[104, 17, 15, 0]` for var `inline_Keyboard_poll_queue_push_37_tc1ff`.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `inline_Keyboard_poll_queue_push_37_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"Keyboard_poll\"), replacing `inline_Keyboard_poll_queue_push_37_t4d4f <- inline_Keyboard_poll_queue_push_37_s U32` with constant `inline_Keyboard_poll_queue_push_37_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("Keyboard_poll"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Keyboard.j':(31,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(USIZE, 987236)"] })
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[69]` for var `inline_RpnCalc_handle_putc_15_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[69]` for var `inline_RpnCalc_handle_putc_15_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[82]` for var `inline_RpnCalc_handle_putc_16_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[82]` for var `inline_RpnCalc_handle_putc_16_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[82]` for var `inline_RpnCalc_handle_putc_17_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[82]` for var `inline_RpnCalc_handle_putc_17_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_18_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_18_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_19_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_19_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_20_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_20_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_21_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_21_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_22_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_22_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[58]` for var `inline_RpnCalc_handle_putc_23_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[58]` for var `inline_RpnCalc_handle_putc_23_tac13`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_24_c`.
# In IlFunctionId("RpnCalc_handle"), resolved the constant val `[10]` for var `inline_RpnCalc_handle_putc_24_tac13`.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_c <- tb507 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_c <- t9c38 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_c <- t9c38 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_c <- tebdf U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_15_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_15_c <- tb507 U8` with constant `inline_RpnCalc_handle_putc_15_c <- 0n69/0x45u8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_16_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_16_c <- t9c38 U8` with constant `inline_RpnCalc_handle_putc_16_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_17_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_17_c <- t9c38 U8` with constant `inline_RpnCalc_handle_putc_17_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_18_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_18_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_18_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_19_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_19_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_19_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_20_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_20_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_20_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_21_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_21_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_21_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_22_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_22_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_22_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_23_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_23_c <- tebdf U8` with constant `inline_RpnCalc_handle_putc_23_c <- 0n58/0x3au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `inline_RpnCalc_handle_putc_24_c` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "# In IlFunctionId(\"RpnCalc_handle\"), replacing `inline_RpnCalc_handle_putc_24_c <- td7b5 U8` with constant `inline_RpnCalc_handle_putc_24_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("RpnCalc_handle"), var `t9c38` is written to, but never read. Removing the instruction that writes to it: (t9c38 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] })
# In IlFunctionId("RpnCalc_handle"), var `t9c38` is written to, but never read. Removing the instruction that writes to it: (t9c38 <- 0n82/0x52u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] })
# In IlFunctionId("RpnCalc_handle"), var `tb507` is written to, but never read. Removing the instruction that writes to it: (tb507 <- 0n69/0x45u8 , Some('/lutcomp/programs/lib/rpnlib.j':(55,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 69)] })", "Number(U8, 69)", "Number(U8, 69)"] })
# In IlFunctionId("RpnCalc_handle"), var `tebdf` is written to, but never read. Removing the instruction that writes to it: (tebdf <- 0n58/0x3au8 , Some('/lutcomp/programs/lib/rpnlib.j':(70,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 58)] })", "Number(U8, 58)", "Number(U8, 58)"] })
# In IlFunctionId("RpnCalc_run"), resolved the constant val `[100, 16, 15, 0]` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `[100, 16, 15, 0]` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `[100, 17, 15, 0]` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `[104, 17, 15, 0]` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `[100, 16, 15, 0]` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `[100, 16, 15, 0]` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f`.
# In IlFunctionId("RpnCalc_run"), resolved the constant val `[104, 17, 15, 0]` for var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff`.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(19,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(18,5)), SourceContext { contexts: ["Assign { target: Ident(\"value\"), var_type: Some(Number(U8)), value: Index(\"values\", PtrFieldDeref(\"s\", \"first\")) }", "Index(\"values\", PtrFieldDeref(\"s\", \"first\"))", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"first\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(13,5)), SourceContext { contexts: ["IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }", "Comparison { op: Equals, left: PtrFieldDeref(\"s\", \"first\"), right: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"first\")", "PtrFieldDeref(\"s\", \"first\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1))", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(26,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"last\"), Number(U8, 1)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(25,5)), SourceContext { contexts: ["Assign { target: Index(\"values\", PtrFieldDeref(\"s\", \"last\")), var_type: None, value: Ident(\"n\") }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident(\"values\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") })", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref(\"s\", \"last\") }", "PtrFieldDeref(\"s\", \"last\")", "PtrFieldDeref(\"s\", \"last\")", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"RpnCalc_run\"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(USIZE, 987236)"] })
# In IlFunctionId("RpnCalc_run"), var `inline_RpnCalc_run_getchar_39_tfff6` is written to, but never read. Removing the instruction that writes to it: (inline_RpnCalc_run_getchar_39_tfff6 <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/stdio.j':(21,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(USIZE, 987236)"] })
# In IlFunctionId("lcd_draw_char"), `i` is never written to, but is copied to `inline_lcd_draw_char_lcd_logical_to_physical_3_i` - which is also never modified. Replacing refs to latter with the former and deleting the copy: inline_lcd_draw_char_lcd_logical_to_physical_3_i <- i U8
# In IlFunctionId("main"), resolved the constant val `[116, 17, 15, 0]` for var `inline_main_RpnCalc_init_51_c`.
# In IlFunctionId("main"), resolved the constant val `[116, 17, 15, 0]` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s`.
# In IlFunctionId("main"), resolved the constant val `[180, 17, 15, 0]` for var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957`.
# In IlFunctionId("main"), resolved the constant val `[184, 17, 15, 0]` for var `inline_main_RpnCalc_init_51_t6e8e`.
# In IlFunctionId("main"), resolved the constant val `[82]` for var `inline_main_putc_25_c`.
# In IlFunctionId("main"), resolved the constant val `[82]` for var `inline_main_putc_25_tac13`.
# In IlFunctionId("main"), resolved the constant val `[80]` for var `inline_main_putc_26_c`.
# In IlFunctionId("main"), resolved the constant val `[80]` for var `inline_main_putc_26_tac13`.
# In IlFunctionId("main"), resolved the constant val `[78]` for var `inline_main_putc_27_c`.
# In IlFunctionId("main"), resolved the constant val `[78]` for var `inline_main_putc_27_tac13`.
# In IlFunctionId("main"), resolved the constant val `[10]` for var `inline_main_putc_28_c`.
# In IlFunctionId("main"), resolved the constant val `[10]` for var `inline_main_putc_28_tac13`.
# In IlFunctionId("main"), replacing `inline_main_putc_25_c <- t9c38 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_c <- t8fe0 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987508/0x000f1174u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987508/0x000f1174u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987572/0x000f11b4u32 `.
# In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987576/0x000f11b8u32 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_c <- te6fd U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_c <- td7b5 U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_c <- 0n987508/0x000f1174u32 , Some('programs/app/rpn.j':(12,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] }) }", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "Call(Call { function: \"RpnCalc_init\", parameters: [AddressOf(Ident(\"calc\"))] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_c <- tca8 U32` with constant `inline_main_RpnCalc_init_51_c <- 0n987508/0x000f1174u32 `."] })
# In IlFunctionId("main"), var `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s` is written to, but never read. Removing the instruction that writes to it: (inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987508/0x000f1174u32 , Some('/lutcomp/programs/lib/rpnlib.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })", "# In IlFunctionId(\"main\"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- inline_main_RpnCalc_init_51_c U32` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s <- 0n987508/0x000f1174u32 `."] })
# In IlFunctionId("main"), var `inline_main_putc_25_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_25_c <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_25_c <- t9c38 U8` with constant `inline_main_putc_25_c <- 0n82/0x52u8 `."] })
# In IlFunctionId("main"), var `inline_main_putc_26_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_26_c <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_26_c <- t8fe0 U8` with constant `inline_main_putc_26_c <- 0n80/0x50u8 `."] })
# In IlFunctionId("main"), var `inline_main_putc_27_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_27_c <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_27_c <- te6fd U8` with constant `inline_main_putc_27_c <- 0n78/0x4eu8 `."] })
# In IlFunctionId("main"), var `inline_main_putc_28_c` is written to, but never read. Removing the instruction that writes to it: (inline_main_putc_28_c <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "# In IlFunctionId(\"main\"), replacing `inline_main_putc_28_c <- td7b5 U8` with constant `inline_main_putc_28_c <- 0n10/0x0au8 `."] })
# In IlFunctionId("main"), var `t8fe0` is written to, but never read. Removing the instruction that writes to it: (t8fe0 <- 0n80/0x50u8 , Some('programs/app/rpn.j':(10,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 80)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 80)] })", "Number(U8, 80)", "Number(U8, 80)"] })
# In IlFunctionId("main"), var `t9c38` is written to, but never read. Removing the instruction that writes to it: (t9c38 <- 0n82/0x52u8 , Some('programs/app/rpn.j':(6,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 82)] })", "Number(U8, 82)", "Number(U8, 82)"] })
# In IlFunctionId("main"), var `td7b5` is written to, but never read. Removing the instruction that writes to it: (td7b5 <- 0n10/0x0au8 , Some('programs/app/rpn.j':(15,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 10)] })", "Number(U8, 10)", "Number(U8, 10)"] })
# In IlFunctionId("main"), var `te6fd` is written to, but never read. Removing the instruction that writes to it: (te6fd <- 0n78/0x4eu8 , Some('programs/app/rpn.j':(14,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 78)] }) }", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Call(Call { function: \"putc\", parameters: [Number(U8, 78)] })", "Number(U8, 78)", "Number(U8, 78)"] })
# In IlFunctionId("stdio_init"), resolved the constant val `[100, 16, 15, 0]` for var `inline_stdio_init_queue_init_35_s`.
# In IlFunctionId("stdio_init"), resolved the constant val `[100, 16, 15, 0]` for var `inline_stdio_init_queue_init_35_t4d4f`.
# In IlFunctionId("stdio_init"), resolved the constant val `[100, 17, 15, 0]` for var `inline_stdio_init_queue_init_35_tb702`.
# In IlFunctionId("stdio_init"), resolved the constant val `[104, 17, 15, 0]` for var `inline_stdio_init_queue_init_35_tc1ff`.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987492/0x000f1164u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987236/0x000f1064u32 `.
# In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987496/0x000f1168u32 `.
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_s` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_s <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_s <- tfff6 U32` with constant `inline_stdio_init_queue_init_35_s <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(9,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"last\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 260))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("stdio_init"), var `inline_stdio_init_queue_init_35_t4d4f` is written to, but never read. Removing the instruction that writes to it: (inline_stdio_init_queue_init_35_t4d4f <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/Queue.j':(8,5)), SourceContext { contexts: ["Assign { target: PtrFieldDeref(\"s\", \"first\"), var_type: None, value: Number(U8, 0) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256)) }", "Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 256))", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Cast { old_type: Some(Ptr(Struct(\"Queue\"))), new_type: Number(USIZE), value: Ident(\"s\") }", "Ident(\"s\")", "# In IlFunctionId(\"stdio_init\"), replacing `inline_stdio_init_queue_init_35_t4d4f <- inline_stdio_init_queue_init_35_s U32` with constant `inline_stdio_init_queue_init_35_t4d4f <- 0n987236/0x000f1064u32 `."] })
# In IlFunctionId("stdio_init"), var `tfff6` is written to, but never read. Removing the instruction that writes to it: (tfff6 <- 0n987236/0x000f1064u32 , Some('/lutcomp/programs/lib/stdio.j':(13,5)), SourceContext { contexts: ["VoidExpression { expression: Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] }) }", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "Call(Call { function: \"queue_init\", parameters: [AddressOf(Ident(\"stdin\"))] })", "AddressOf(Ident(\"stdin\"))", "AddressOf(Ident(\"stdin\"))", "Number(USIZE, 987236)"] })
# IlFunctionId("KeyBoard_init")()
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  mem[td45b] <- tb36e U8 # Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  mem[tdaa] <- tb36e U8 # Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#  return None # None
#  :function_end_KeyBoard_init # None
#  Unreachable # None

# IlFunctionId("Keyboard_poll")()
#  Some(t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_true_0_1 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  return None # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  goto Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_else_0_2 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  :Keyboard_poll_if_end_0 # Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#  Some(code) <= call io_read2() # Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
#  tf68c <- code U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  t528d U32 <- tf68c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  index <- t528d Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t379c <- mem[td45b] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_true_0_4 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t674 <- td18e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t23a <- t4c8b Add Var(t674) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[t23a] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  goto Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_else_0_5 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tb62e <- t4c8b Add Var(td18e) # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  c <- mem[tb62e] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  :Keyboard_poll_if_end_3 # Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_true_0_7 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  tac13 <- c U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_s <- 0n987236/0x000f1064u32  # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_n <- tac13 U8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_t6778 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  goto inline_Keyboard_poll_queue_push_37_function_end_queue_push # None
#  :inline_Keyboard_poll_queue_push_37_function_end_queue_push # None
#  goto Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_else_0_8 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  :Keyboard_poll_if_end_6 # Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  te5cf <- td18e Add Number(0n2/0x00000002u32) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  ted94 <- t4c8b Add Var(te5cf) # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t2ca9 <- mem[ted94] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_10 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  t7ebd <- mem[tdaa] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_true_0_13 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- tb36e U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_14 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  td45b <- 0n987136/0x000f1000u32  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  mem[td45b] <- tfcd U8 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_12 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  goto Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_else_0_11 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  :Keyboard_poll_if_end_9 # Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t4c8b <- const &PS2_SCAN_CODE_TO_ASCII # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  td18e <- index U32 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t5e63 <- td18e Add Number(0n3/0x00000003u32) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t6cd9 <- t4c8b Add Var(t5e63) # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  t7b09 <- mem[t6cd9] U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_true_0_16 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- tfcd U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  goto Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_else_0_17 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tdaa <- 0n987140/0x000f1004u32  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  mem[tdaa] <- tb36e U8 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  :Keyboard_poll_if_end_15 # Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#  return None # None
#  :function_end_Keyboard_poll # None
#  Unreachable # None

# IlFunctionId("RpnCalc_handle")(c,ch,)
#  a <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#  b <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t2597 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t8b2f <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_1_3 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_1_4 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t969e <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_2_5 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_2_6 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  te668 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_3_7 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_3_8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t39b5 <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_true_4_9 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  goto RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_else_4_10 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  stack_needed <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  :RpnCalc_handle_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_true_0_12 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_else_0_13 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  :RpnCalc_handle_if_end_11 # Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#  tbf93 <- c Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#  stack_count_usize <- mem[tbf93] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#  stack_count <- stack_count_usize[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_true_0_15 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_15_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_tb36e then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_15_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_15_function_end_putc # None
#  :inline_RpnCalc_handle_putc_15_function_end_putc # None
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_16_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_tb36e then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_16_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_16_function_end_putc # None
#  :inline_RpnCalc_handle_putc_16_function_end_putc # None
#  inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_17_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_tb36e then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_17_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_17_function_end_putc # None
#  :inline_RpnCalc_handle_putc_17_function_end_putc # None
#  td7b5 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_18_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_tb36e then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_18_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_18_function_end_putc # None
#  :inline_RpnCalc_handle_putc_18_function_end_putc # None
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  return Some(tfcd) # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  goto RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_else_0_16 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  :RpnCalc_handle_if_end_14 # Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_true_0_18 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_te089 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop # None
#  goto RpnCalc_handle_if_end_17 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_else_0_19 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  :RpnCalc_handle_if_end_17 # Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#  t4671 <- stack_needed U8 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_true_0_21 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_te089 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 # Some('/lutcomp/programs/lib/Stack.j':(11,5))
#  inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop # Some('/lutcomp/programs/lib/Stack.j':(13,5))
#  :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop # None
#  goto RpnCalc_handle_if_end_20 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_else_0_22 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  :RpnCalc_handle_if_end_20 # Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t2597 <- 0n43/0x2bu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_0_24 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  sum <- tace9 Add Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t670d,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td7b5 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_19_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_tb36e then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_19_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_19_function_end_putc # None
#  :inline_RpnCalc_handle_putc_19_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t670d <- sum U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_n <- t670d U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_54_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_0_25 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8b2f <- 0n45/0x2du8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_1_26 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  diff <- tace9 Subtract Var(t8792) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t17ee,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td7b5 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_20_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_tb36e then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_20_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_20_function_end_putc # None
#  :inline_RpnCalc_handle_putc_20_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t17ee <- diff U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_55_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_1_27 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t969e <- 0n42/0x2au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_2_28 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(30,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(32,5))
#  inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
#  inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8 # Some('/lutcomp/programs/lib/mul.j':(33,5))
#  inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
#  inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8 # Some('/lutcomp/programs/lib/mul.j':(34,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(36,5))
#  inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8 # Some('/lutcomp/programs/lib/mul.j':(37,5))
#  inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
#  inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8 # Some('/lutcomp/programs/lib/mul.j':(38,5))
#  inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 # None
#  inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) # Some('/lutcomp/programs/lib/mul.j':(40,5))
#  inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8 # Some('/lutcomp/programs/lib/mul.j':(41,5))
#  inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8 # Some('/lutcomp/programs/lib/mul.j':(42,5))
#  inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(43,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(43,5))
#  inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(44,5))
#  inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(44,5))
#  inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 # Some('/lutcomp/programs/lib/mul.j':(45,5))
#  :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 # None
#  t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t2754,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td7b5 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_21_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_tb36e then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_21_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_21_function_end_putc # None
#  :inline_RpnCalc_handle_putc_21_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t2754 <- product U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_56_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_2_29 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  te668 <- 0n47/0x2fu8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_3_30 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  Some(quotient) <= call div32(tace9,t8792,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec32(t1ba9,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td7b5 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_22_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_tb36e then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_22_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_22_function_end_putc # None
#  :inline_RpnCalc_handle_putc_22_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t1ba9 <- quotient U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_57_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_3_31 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t39b5 <- 0n115/0x73u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_4_32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_58_function_end_stack_push # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push # None
#  :inline_RpnCalc_handle_stack_push_59_function_end_stack_push # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_4_33 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t1501 <- 0n113/0x71u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_5_34 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  return Some(tb36e) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_5_35 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td7b5 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_6_36 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_6_37 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac5f <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_7_38 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 # Some('/lutcomp/programs/lib/Stack.j':(18,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 # Some('/lutcomp/programs/lib/Stack.j':(19,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push # None
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e U8 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#  goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending # None
#  :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_7_39 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t4e08 <- 0n99/0x63u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_8_40 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init # None
#  :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init # None
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_8_41 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t49a <- 0n100/0x64u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_9_42 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6001 <- stack_count U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_body_45 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  None <= call print_dec8(td0f3,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_23_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_tb36e then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_23_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_23_function_end_putc # None
#  :inline_RpnCalc_handle_putc_23_function_end_putc # None
#  tfe08 <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t4376 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get # Some('/lutcomp/programs/lib/Stack.j':(24,5))
#  :inline_RpnCalc_handle_stack_get_48_function_end_stack_get # None
#  None <= call print_dec32(tb336,) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td7b5 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_RpnCalc_handle_putc_24_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_tb36e then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_RpnCalc_handle_putc_24_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_RpnCalc_handle_putc_24_function_end_putc # None
#  :inline_RpnCalc_handle_putc_24_function_end_putc # None
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_while_predicate_44 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_while_end_46 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_9_43 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t2ac9 <- 0n57/0x39u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_10_47 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tf48d <- 0n48/0x30u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_true_0_50 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  mem[tfdb7] <- tfcd U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 # None
#  mem[t6e8e] <- tadd U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tb1ed <- c U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t6e8e <- tb1ed Add Number(0n68/0x00000044u32) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  td60 <- mem[t6e8e] U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  t3f70 U32 <- t7ff1 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tacf6 <- td60 Add Var(t3f70) # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  mem[t6e8e] <- tacf6 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_49 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_0_51 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_end_49 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  goto RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_else_10_48 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  :RpnCalc_handle_if_end_23 # Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#  return Some(tfcd) # Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#  :function_end_RpnCalc_handle # None
#  Unreachable # None

# IlFunctionId("RpnCalc_run")(calc,)
#  :RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_while_body_1 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(19,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_body_1 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tb816 <- ttyin # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987236/0x000f1064u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 # Some('/lutcomp/programs/lib/Queue.j':(25,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 U8 # Some('/lutcomp/programs/lib/Queue.j':(26,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push # None
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push # None
#  goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  None <= call Keyboard_poll() # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_else_1_7 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_if_end_3 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987236/0x000f1064u32  # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e U8 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 # Some('/lutcomp/programs/lib/Queue.j':(13,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 # Some('/lutcomp/programs/lib/Queue.j':(18,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb U8 # Some('/lutcomp/programs/lib/Queue.j':(19,5))
#  inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # Some('/lutcomp/programs/lib/Queue.j':(20,5))
#  :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop # None
#  goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  :inline_RpnCalc_run_getchar_39_getchar_while_end_2 # Some('/lutcomp/programs/lib/stdio.j':(21,5))
#  inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  goto inline_RpnCalc_run_getchar_39_function_end_getchar # Some('/lutcomp/programs/lib/stdio.j':(31,5))
#  :inline_RpnCalc_run_getchar_39_function_end_getchar # None
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  Some(result) <= call RpnCalc_handle(calc,tdcd9,) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  t57fd <- result U8 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_true_0_4 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  return Some(tb36e) # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  goto RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_else_0_5 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_if_end_3 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  goto RpnCalc_run_while_predicate_0 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :RpnCalc_run_while_end_2 # Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#  :function_end_RpnCalc_run # None
#  Unreachable # None

# IlFunctionId("delay")(x,)
#  :delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  :delay_while_body_1 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  x <- tad57 Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  goto delay_while_predicate_0 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  :delay_while_end_2 # Some('/lutcomp/programs/lib/delay.j':(2,5))
#  return None # None
#  :function_end_delay # None
#  Unreachable # None

# IlFunctionId("div32")(a,b,)
#  __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(67,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(67,5))
#  return Some(t60ec) # Some('/lutcomp/programs/lib/div.j':(67,5))
#  goto div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_else_0_2 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  :div32_if_end_0 # Some('/lutcomp/programs/lib/div.j':(67,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  t4917 <- 0n65536/0x00010000u32  # Some('/lutcomp/programs/lib/div.j':(71,5))
#  if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_a <- t8792 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_b <- tace9 U32 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_true_0_1 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(21,5))
#  te81f <- inline_div32_div16_43_t60ec U32 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  goto inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_else_0_2 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  :inline_div32_div16_43_div16_if_end_0 # Some('/lutcomp/programs/lib/div.j':(21,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/div.j':(25,5))
#  if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_true_0_4 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_tdd9e <- inline_div32_div16_43_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_t3c0e <- inline_div32_div16_43_b[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_tda9f <- inline_div32_div16_43_tdd9e Divide Var(inline_div32_div16_43_t3c0e) # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  te81f <- inline_div32_div16_43_te264 U32 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  goto inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_else_0_5 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  :inline_div32_div16_43_div16_if_end_3 # Some('/lutcomp/programs/lib/div.j':(25,5))
#  inline_div32_div16_43_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(29,5))
#  inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  # Some('/lutcomp/programs/lib/div.j':(30,5))
#  :inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_while_body_7 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_ta431 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t350e U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_taa3e U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t9144 U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tf572 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t8384) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf572 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t1f15) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t887d U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tc29b) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_tb911 U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 # None
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_te25f <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_te25f U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tac23 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 # None
#  inline_div32_div16_43_tb0a8 <- inline_div32_div16_43_x[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_11 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_9 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tf944 <- inline_div32_div16_43_x[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_14 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_12 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_17 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_15 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_20 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_18 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_true_0_22 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  te81f <- inline_div32_div16_43_tfd7e U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_else_0_23 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_if_end_21 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(32,5))
#  goto inline_div32_div16_43_div16_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  :inline_div32_div16_43_div16_while_end_8 # Some('/lutcomp/programs/lib/div.j':(32,5))
#  inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  te81f <- inline_div32_div16_43_t1506 U32 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  goto inline_div32_div16_43_function_end_div16 # Some('/lutcomp/programs/lib/div.j':(63,5))
#  :inline_div32_div16_43_function_end_div16 # None
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(71,5))
#  return Some(te81f) # Some('/lutcomp/programs/lib/div.j':(71,5))
#  goto div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_else_0_5 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  :div32_if_end_3 # Some('/lutcomp/programs/lib/div.j':(71,5))
#  lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(75,5))
#  hi <- 0xffffffffu32  # Some('/lutcomp/programs/lib/div.j':(76,5))
#  :div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_while_body_7 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_44_a <- t1506 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t5a19 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_ta431 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t350e U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_taa3e U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t9144 U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_tf572 <- inline_div32_shiftright1_44_tdd9e BitwiseOr Var(inline_div32_shiftright1_44_t8384) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf572 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t5a73 U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t4d1a <- inline_div32_shiftright1_44_t1539 BitwiseOr Var(inline_div32_shiftright1_44_t1f15) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t4d1a U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t887d U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t1bbf <- inline_div32_shiftright1_44_t577f BitwiseOr Var(inline_div32_shiftright1_44_tc29b) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t1bbf U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_tb911 U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  t9599 <- inline_div32_shiftright1_44_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  goto inline_div32_shiftright1_44_function_end_shiftright1 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_shiftright1_44_function_end_shiftright1 # None
#  t5508 <- hi U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_45_a <- t5508 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t5a19 U8 # Some('/lutcomp/programs/lib/div.j':(4,5))
#  inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_ta431 U8 # Some('/lutcomp/programs/lib/div.j':(5,5))
#  inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t350e U8 # Some('/lutcomp/programs/lib/div.j':(6,5))
#  inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_taa3e U8 # Some('/lutcomp/programs/lib/div.j':(7,5))
#  inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t9144 U8 # Some('/lutcomp/programs/lib/div.j':(9,5))
#  inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_tf572 <- inline_div32_shiftright1_45_tdd9e BitwiseOr Var(inline_div32_shiftright1_45_t8384) # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf572 U8 # Some('/lutcomp/programs/lib/div.j':(10,5))
#  inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t5a73 U8 # Some('/lutcomp/programs/lib/div.j':(11,5))
#  inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t4d1a <- inline_div32_shiftright1_45_t1539 BitwiseOr Var(inline_div32_shiftright1_45_t1f15) # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t4d1a U8 # Some('/lutcomp/programs/lib/div.j':(12,5))
#  inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t887d U8 # Some('/lutcomp/programs/lib/div.j':(13,5))
#  inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t1bbf <- inline_div32_shiftright1_45_t577f BitwiseOr Var(inline_div32_shiftright1_45_tc29b) # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t1bbf U8 # Some('/lutcomp/programs/lib/div.j':(14,5))
#  inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_tb911 U8 # Some('/lutcomp/programs/lib/div.j':(15,5))
#  inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  t3803 <- inline_div32_shiftright1_45_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  goto inline_div32_shiftright1_45_function_end_shiftright1 # Some('/lutcomp/programs/lib/div.j':(17,5))
#  :inline_div32_shiftright1_45_function_end_shiftright1 # None
#  mid <- t9599 Add Var(t3803) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tb608 <- te825 U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  None <= call mul32_64(tfd7e,tace9,tb608,) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tb973 <- mem[t3f2a] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_10 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_11 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_9 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  x <- mem[te546] U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_13 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  hi <- tfd7e Subtract Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_14 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_12 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_16 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_17 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_15 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tad57 <- x U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  r <- t8792 Subtract Var(tad57) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  taee0 <- r U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_true_0_19 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  return Some(tfd7e) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_else_0_20 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_if_end_18 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  tfd7e <- mid U32 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  lo <- tfd7e Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/div.j':(78,5))
#  goto div32_while_predicate_6 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  :div32_while_end_8 # Some('/lutcomp/programs/lib/div.j':(78,5))
#  t1506 <- lo U32 # Some('/lutcomp/programs/lib/div.j':(108,5))
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # Some('/lutcomp/programs/lib/div.j':(108,5))
#  return Some(t1506) # Some('/lutcomp/programs/lib/div.j':(108,5))
#  :function_end_div32 # None
#  Unreachable # None

# IlFunctionId("io_read2")()
#  Unreachable # None
#  :function_end_io_read2 # None
#  Unreachable # None

# IlFunctionId("io_ready_to_read")()
#  Unreachable # None
#  :function_end_io_ready_to_read # None
#  Unreachable # None

# IlFunctionId("io_write0")(data,)
#  Unreachable # None
#  return None # None
#  :function_end_io_write0 # None
#  Unreachable # None

# IlFunctionId("io_write1")(data,)
#  Unreachable # None
#  return None # None
#  :function_end_io_write1 # None
#  Unreachable # None

# IlFunctionId("lcd_draw_char")(i,ch,)
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(9,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(9,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) # Some('/lutcomp/programs/lib/lcd.j':(10,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical # Some('/lutcomp/programs/lib/lcd.j':(11,5))
#  :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical # None
#  t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t8d12 <- t136d ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  None <= call io_write1(t6e3a,) # Some('/lutcomp/programs/lib/lcd.j':(17,5))
#  t136d <- pos U8 # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  None <= call io_write1(t7d80,) # Some('/lutcomp/programs/lib/lcd.j':(18,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(19,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(19,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  None <= call io_write1(tcd38,) # Some('/lutcomp/programs/lib/lcd.j':(21,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  None <= call io_write1(tb875,) # Some('/lutcomp/programs/lib/lcd.j':(22,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(23,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(23,5))
#  return None # None
#  :function_end_lcd_draw_char # None
#  Unreachable # None

# IlFunctionId("lcd_init")()
#  t0 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  mem[t0] <- tb36e U8 # Some('/lutcomp/programs/lib/lcd.j':(69,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(72,5))
#  :lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t8fe0 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  :lcd_init_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t4241 <- t9725 Add Number(0n987152/0x000f1010u32) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  tac5f <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  mem[t4241] <- tac5f U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  goto lcd_init_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  :lcd_init_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(73,5))
#  t8820 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(78,5))
#  None <= call io_write1(t8820,) # Some('/lutcomp/programs/lib/lcd.j':(78,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(79,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(79,5))
#  t8820 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(80,5))
#  None <= call io_write1(t8820,) # Some('/lutcomp/programs/lib/lcd.j':(80,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(81,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(81,5))
#  t8820 <- 0n3/0x03u8  # Some('/lutcomp/programs/lib/lcd.j':(82,5))
#  None <= call io_write1(t8820,) # Some('/lutcomp/programs/lib/lcd.j':(82,5))
#  t385d <- 0n1/0x00000001u32  # Some('/lutcomp/programs/lib/lcd.j':(83,5))
#  None <= call delay(t385d,) # Some('/lutcomp/programs/lib/lcd.j':(83,5))
#  t40c1 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(85,5))
#  None <= call io_write1(t40c1,) # Some('/lutcomp/programs/lib/lcd.j':(85,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(86,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(86,5))
#  t40c1 <- 0n2/0x02u8  # Some('/lutcomp/programs/lib/lcd.j':(88,5))
#  None <= call io_write1(t40c1,) # Some('/lutcomp/programs/lib/lcd.j':(88,5))
#  t9f32 <- 0n8/0x08u8  # Some('/lutcomp/programs/lib/lcd.j':(89,5))
#  None <= call io_write1(t9f32,) # Some('/lutcomp/programs/lib/lcd.j':(89,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(90,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(90,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(92,5))
#  None <= call io_write1(tb36e,) # Some('/lutcomp/programs/lib/lcd.j':(92,5))
#  t80a1 <- 0n12/0x0cu8  # Some('/lutcomp/programs/lib/lcd.j':(93,5))
#  None <= call io_write1(t80a1,) # Some('/lutcomp/programs/lib/lcd.j':(93,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(94,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(94,5))
#  tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(96,5))
#  None <= call io_write1(tb36e,) # Some('/lutcomp/programs/lib/lcd.j':(96,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/lcd.j':(97,5))
#  None <= call io_write1(tfcd,) # Some('/lutcomp/programs/lib/lcd.j':(97,5))
#  t9498 <- 0n2/0x00000002u32  # Some('/lutcomp/programs/lib/lcd.j':(98,5))
#  None <= call delay(t9498,) # Some('/lutcomp/programs/lib/lcd.j':(98,5))
#  return None # None
#  :function_end_lcd_init # None
#  Unreachable # None

# IlFunctionId("lcd_putc")(ch,)
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  td7b5 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_true_0_1 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t0 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t0] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tab78 <- t5dda Divide Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t8658 <- tab78 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  next <- t8658 Multiply Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t1 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t1] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  ta5ff <- next U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_body_4 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t2 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t2] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  ta72 <- tad4e Add Number(0n987152/0x000f1010u32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tac5f <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[ta72] <- tac5f U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t3 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t4 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t4] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t4584 <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t3] <- t4584 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  goto lcd_putc_while_predicate_3 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_while_end_5 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  goto lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_else_0_2 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t5] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tad4e U32 <- t5dda U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  ta72 <- tad4e Add Number(0n987152/0x000f1010u32) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[ta72] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t6 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t6] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  None <= call lcd_draw_char(t5dda,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t7 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t8 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t5dda <- mem[t8] U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t4584 <- t5dda Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  mem[t7] <- t4584 U8 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  :lcd_putc_if_end_0 # Some('/lutcomp/programs/lib/lcd.j':(51,5))
#  t9 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  t5dda <- mem[t9] U8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  t8fe0 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_true_0_7 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  None <= call lcd_scroll_up() # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  goto lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_else_0_8 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  :lcd_putc_if_end_6 # Some('/lutcomp/programs/lib/lcd.j':(63,5))
#  return None # None
#  :function_end_lcd_putc # None
#  Unreachable # None

# IlFunctionId("lcd_scroll_up")()
#  t0 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t1 <- 0n987148/0x000f100cu32  # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  t5dda <- mem[t1] U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  tb175 <- t5dda Subtract Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  mem[t0] <- tb175 U8 # Some('/lutcomp/programs/lib/lcd.j':(27,5))
#  i <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/lcd.j':(29,5))
#  :lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t2aa3 <- 0n60/0x3cu8  # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_body_1 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t7e9 <- td0f3 Add Number(0n20/0x14u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tfd7d U32 <- t7e9 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t2cc3 <- tfd7d Add Number(0n987152/0x000f1010u32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  ch <- mem[t2cc3] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t4241 <- t9725 Add Number(0n987152/0x000f1010u32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  ta094 <- mem[t4241] U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_true_0_4 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  t4241 <- t9725 Add Number(0n987152/0x000f1010u32) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  mem[t4241] <- tdcd9 U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  tdcd9 <- ch U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  None <= call lcd_draw_char(td0f3,tdcd9,) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  goto lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_else_0_5 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_if_end_3 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  goto lcd_scroll_up_while_predicate_0 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_end_2 # Some('/lutcomp/programs/lib/lcd.j':(31,5))
#  :lcd_scroll_up_while_predicate_6 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t8fe0 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_while_body_7 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t4241 <- t9725 Add Number(0n987152/0x000f1010u32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  ta094 <- mem[t4241] U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tac5f <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  if ta094 != tac5f then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_true_0_10 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t9725 U32 <- td0f3 U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  t4241 <- t9725 Add Number(0n987152/0x000f1010u32) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tac5f <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  mem[t4241] <- tac5f U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  tac5f <- 0n32/0x20u8  # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  None <= call lcd_draw_char(td0f3,tac5f,) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  goto lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_else_0_11 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_if_end_9 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  td0f3 <- i U8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  i <- td0f3 Add Number(0n1/0x01u8) # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  goto lcd_scroll_up_while_predicate_6 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  :lcd_scroll_up_while_end_8 # Some('/lutcomp/programs/lib/lcd.j':(41,5))
#  return None # None
#  :function_end_lcd_scroll_up # None
#  Unreachable # None

# IlFunctionId("main")()
#  None <= call stdio_init() # Some('programs/app/rpn.j':(4,5))
#  inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_25_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_25_t76c7 != inline_main_putc_25_tb36e then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_25_tac13 <- 0n82/0x52u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_25_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_25_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_25_function_end_putc # None
#  :inline_main_putc_25_function_end_putc # None
#  inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_26_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_26_t76c7 != inline_main_putc_26_tb36e then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_26_tac13 <- 0n80/0x50u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_26_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_26_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_26_function_end_putc # None
#  :inline_main_putc_26_function_end_putc # None
#  tca8 <- 0n987508/0x000f1174u32  # Some('programs/app/rpn.j':(12,5))
#  inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987572/0x000f11b4u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 # Some('/lutcomp/programs/lib/Stack.j':(7,5))
#  goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init # None
#  inline_main_RpnCalc_init_51_t6e8e <- 0n987576/0x000f11b8u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 # Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#  goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init # None
#  :inline_main_RpnCalc_init_51_function_end_RpnCalc_init # None
#  inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_27_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_27_t76c7 != inline_main_putc_27_tb36e then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_27_tac13 <- 0n78/0x4eu8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_27_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_27_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_27_function_end_putc # None
#  :inline_main_putc_27_function_end_putc # None
#  inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_main_putc_28_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_main_putc_28_t76c7 != inline_main_putc_28_tb36e then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_main_putc_28_tac13 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_main_putc_28_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_main_putc_28_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_main_putc_28_function_end_putc # None
#  :inline_main_putc_28_function_end_putc # None
#  tca8 <- 0n987508/0x000f1174u32  # Some('programs/app/rpn.j':(17,5))
#  Some(t2a99) <= call RpnCalc_run(tca8,) # Some('programs/app/rpn.j':(17,5))
#  return Some(t2a99) # Some('programs/app/rpn.j':(17,5))
#  :function_end_main # None
#  Unreachable # None

# IlFunctionId("mul32_64")(a,b,c,)
#  __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) # None
#  a_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(58,5))
#  t5b7c <- a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
#  a_hi[0x01..0x02] <- t5b7c U8 # Some('/lutcomp/programs/lib/mul.j':(59,5))
#  t577f <- a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
#  a_hi[0x00..0x01] <- t577f U8 # Some('/lutcomp/programs/lib/mul.j':(60,5))
#  b_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(62,5))
#  t9829 <- b[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
#  b_hi[0x01..0x02] <- t9829 U8 # Some('/lutcomp/programs/lib/mul.j':(63,5))
#  t811a <- b[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
#  b_hi[0x00..0x01] <- t811a U8 # Some('/lutcomp/programs/lib/mul.j':(64,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  t720d <- inline_mul32_64_mul16_32_8_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_mul32_64_mul16_32_8_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_8_function_end_mul16_32 # None
#  mem[c] <- t720d U32 # Some('/lutcomp/programs/lib/mul.j':(66,5))
#  t1335 <- c Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_mul32_64_mul16_32_9_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_9_function_end_mul16_32 # None
#  mem[t1335] <- t5a04 U32 # Some('/lutcomp/programs/lib/mul.j':(67,5))
#  temp_lo <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(71,5))
#  temp_hi <- 0n0/0x00000000u32  # Some('/lutcomp/programs/lib/mul.j':(72,5))
#  t8fbd <- a_hi U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_a <- t8fbd U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_b <- tace9 U32 # Some('/lutcomp/programs/lib/mul.j':(74,5))
#  inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  temp <- inline_mul32_64_mul16_32_10_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_mul32_64_mul16_32_10_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_10_function_end_mul16_32 # None
#  tc89e <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
#  temp_lo[0x02..0x03] <- tc89e U8 # Some('/lutcomp/programs/lib/mul.j':(75,5))
#  tdc08 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
#  temp_lo[0x03..0x04] <- tdc08 U8 # Some('/lutcomp/programs/lib/mul.j':(76,5))
#  tf338 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
#  temp_hi[0x00..0x01] <- tf338 U8 # Some('/lutcomp/programs/lib/mul.j':(77,5))
#  tb6b4 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
#  temp_hi[0x01..0x02] <- tb6b4 U8 # Some('/lutcomp/programs/lib/mul.j':(78,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(80,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(81,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(82,5))
#  inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_0_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_0_function_end_add_U64 # None
#  :inline_mul32_64_add_U64_0_function_end_add_U64 # None
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  t5cca <- b_hi U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_a <- t8792 U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_b <- t5cca U32 # Some('/lutcomp/programs/lib/mul.j':(84,5))
#  inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(10,5))
#  inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) # Some('/lutcomp/programs/lib/mul.j':(12,5))
#  inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8 # Some('/lutcomp/programs/lib/mul.j':(13,5))
#  inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8 # Some('/lutcomp/programs/lib/mul.j':(14,5))
#  inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(15,5))
#  inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(16,5))
#  inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) # Some('/lutcomp/programs/lib/mul.j':(17,5))
#  inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) # Some('/lutcomp/programs/lib/mul.j':(19,5))
#  inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) # Some('/lutcomp/programs/lib/mul.j':(20,5))
#  inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) # Some('/lutcomp/programs/lib/mul.j':(21,5))
#  inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8 # Some('/lutcomp/programs/lib/mul.j':(22,5))
#  inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8 # Some('/lutcomp/programs/lib/mul.j':(23,5))
#  inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8 # Some('/lutcomp/programs/lib/mul.j':(24,5))
#  inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 # Some('/lutcomp/programs/lib/mul.j':(25,5))
#  inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  temp <- inline_mul32_64_mul16_32_11_ta65d U32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  goto inline_mul32_64_mul16_32_11_function_end_mul16_32 # Some('/lutcomp/programs/lib/mul.j':(26,5))
#  :inline_mul32_64_mul16_32_11_function_end_mul16_32 # None
#  tc89e <- temp[0x00..0x01] U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
#  temp_lo[0x02..0x03] <- tc89e U8 # Some('/lutcomp/programs/lib/mul.j':(85,5))
#  tdc08 <- temp[0x01..0x02] U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
#  temp_lo[0x03..0x04] <- tdc08 U8 # Some('/lutcomp/programs/lib/mul.j':(86,5))
#  tf338 <- temp[0x02..0x03] U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
#  temp_hi[0x00..0x01] <- tf338 U8 # Some('/lutcomp/programs/lib/mul.j':(87,5))
#  tb6b4 <- temp[0x03..0x04] U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
#  temp_hi[0x01..0x02] <- tb6b4 U8 # Some('/lutcomp/programs/lib/mul.j':(88,5))
#  te546 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  t3308 <- temp_lo U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  mem[te546] <- t3308 U32 # Some('/lutcomp/programs/lib/mul.j':(90,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  t3f2a <- te825 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  t41f5 <- temp_hi U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  mem[t3f2a] <- t41f5 U32 # Some('/lutcomp/programs/lib/mul.j':(91,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  te825 <- __frame_pointer U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  t4a94 <- te825 Add Number(0n0/0x00000000u32) # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  tf4b2 <- t4a94 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  tac13 <- c U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_a <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_b <- tf4b2 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_c <- tac13 U32 # Some('/lutcomp/programs/lib/mul.j':(92,5))
#  inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(7,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 # Some('/lutcomp/programs/lib/U64.j':(8,5))
#  inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 # Some('/lutcomp/programs/lib/U64.j':(9,5))
#  inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  :inline_mul32_64_add_U64_1_add_U64_if_end_0 # Some('/lutcomp/programs/lib/U64.j':(10,5))
#  goto inline_mul32_64_add_U64_1_function_end_add_U64 # None
#  :inline_mul32_64_add_U64_1_function_end_add_U64 # None
#  __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) # None
#  return None # None
#  :function_end_mul32_64 # None
#  Unreachable # None

# IlFunctionId("print_dec32")(a,)
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t9c15 <- 0n256/0x00000100u32  # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  tdd9e <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  None <= call print_dec8(tdd9e,) # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  return None # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  goto print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  :print_dec32_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#  inline_print_dec32_div32_by10_47_a <- t8792 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#  inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  # Some('/lutcomp/programs/lib/div.j':(130,5))
#  inline_print_dec32_div32_by10_47_t1c61 <- 0n987500/0x000f116cu32  # Some('/lutcomp/programs/lib/div.j':(130,5))
#  None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) # Some('/lutcomp/programs/lib/div.j':(130,5))
#  inline_print_dec32_div32_by10_47_tbbe3 <- 0n987504/0x000f1170u32  # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tbbe3] U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 U8 # Some('/lutcomp/programs/lib/div.j':(112,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 U8 # Some('/lutcomp/programs/lib/div.j':(113,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 U8 # Some('/lutcomp/programs/lib/div.j':(114,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e U8 # Some('/lutcomp/programs/lib/div.j':(115,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 U8 # Some('/lutcomp/programs/lib/div.j':(117,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620) # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 U8 # Some('/lutcomp/programs/lib/div.j':(118,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 U8 # Some('/lutcomp/programs/lib/div.j':(119,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed) # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 U8 # Some('/lutcomp/programs/lib/div.j':(120,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 U8 # Some('/lutcomp/programs/lib/div.j':(121,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450) # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 U8 # Some('/lutcomp/programs/lib/div.j':(122,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 U8 # Some('/lutcomp/programs/lib/div.j':(123,5))
#  inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 # Some('/lutcomp/programs/lib/div.j':(124,5))
#  :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 # None
#  b <- inline_print_dec32_div32_by10_47_t45ae U32 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  goto inline_print_dec32_div32_by10_47_function_end_div32_by10 # Some('/lutcomp/programs/lib/div.j':(131,5))
#  :inline_print_dec32_div32_by10_47_function_end_div32_by10 # None
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#  None <= call print_dec32(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#  t8792 <- a U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  tace9 <- b U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  inline_print_dec32_mul32_by10_14_a <- tace9 U32 # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(49,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(50,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) # Some('/lutcomp/programs/lib/mul.j':(51,5))
#  inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 # Some('/lutcomp/programs/lib/mul.j':(52,5))
#  :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 # None
#  a <- t8792 Subtract Var(t86e2) # Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#  tdd9e <- a[0x00..0x01] U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  t1a60 <- tdd9e Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  inline_print_dec32_putc_29_c <- t1a60 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#  inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_print_dec32_putc_29_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_tb36e then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec32_putc_29_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec32_putc_29_function_end_putc # None
#  :inline_print_dec32_putc_29_function_end_putc # None
#  return None # None
#  :function_end_print_dec32 # None
#  Unreachable # None

# IlFunctionId("print_dec8")(a,)
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  td7b5 <- 0n10/0x0au8  # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_true_0_1 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  b <- t8792 Divide Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  None <= call print_dec8(tace9,) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  tace9 <- b U8 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t6cb <- tace9 Multiply Number(0n10/0x0au8) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  a <- t8792 Subtract Var(t6cb) # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  goto print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_else_0_2 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  :print_dec8_if_end_0 # Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#  t8792 <- a U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  t6db1 <- t8792 Add Number(0n48/0x30u8) # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  inline_print_dec8_putc_30_c <- t6db1 U8 # Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#  inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  None <= call io_write0(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(35,5))
#  inline_print_dec8_putc_30_t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_tb36e then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_true_0_1 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_else_0_2 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  :inline_print_dec8_putc_30_putc_if_end_0 # Some('/lutcomp/programs/lib/stdio.j':(36,5))
#  goto inline_print_dec8_putc_30_function_end_putc # None
#  :inline_print_dec8_putc_30_function_end_putc # None
#  return None # None
#  :function_end_print_dec8 # None
#  Unreachable # None

# IlFunctionId("stdio_init")()
#  t0 <- 0n987232/0x000f1060u32  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  mem[t0] <- tfcd U8 # Some('/lutcomp/programs/lib/stdio.j':(11,5))
#  t1 <- 0n987144/0x000f1008u32  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  tfcd <- 0n1/0x01u8  # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  mem[t1] <- tfcd U8 # Some('/lutcomp/programs/lib/stdio.j':(12,5))
#  inline_stdio_init_queue_init_35_tb702 <- 0n987492/0x000f1164u32  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_tb36e U8 # Some('/lutcomp/programs/lib/Queue.j':(8,5))
#  inline_stdio_init_queue_init_35_tc1ff <- 0n987496/0x000f1168u32  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_tb36e U8 # Some('/lutcomp/programs/lib/Queue.j':(9,5))
#  goto inline_stdio_init_queue_init_35_function_end_queue_init # None
#  :inline_stdio_init_queue_init_35_function_end_queue_init # None
#  None <= call lcd_init() # Some('/lutcomp/programs/lib/stdio.j':(14,5))
#  None <= call KeyBoard_init() # Some('/lutcomp/programs/lib/stdio.j':(15,5))
#  return None # None
#  :function_end_stdio_init # None
#  Unreachable # None


# ImageBaseAddress=0x00080400
# entry
# 80400 Init []
#       Initialzing flags and internal regs.
00 

# 80401 LoadImm32 [Register(0x0c), Constant32(0x000f0f00=986880)]
#       Initialzing stack register to 0x000f0f00.
20 0c 00 0f 0f 00 

# 80407 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:main))
32 0c fc ff ff ff 

# 8040d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:main))
25 0c 17 04 08 00 

# 80413 JmpImm [Label24(:main)]
#       PseudoCall(Label24(:main))
70 34 25 08 

# 80417 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:main))
32 0c 04 00 00 00 

# 8041d Halt [Constant32(0x00000000=0)]
#       Halting after return from entry function.
7e 00 00 00 00 

# :PS2_SCAN_CODE_TO_ASCII
# const Array(Number(U8), Some(1025))
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
60 
7e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
71 
51 
00 
00 
31 
21 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
7a 
5a 
00 
00 
73 
53 
00 
00 
61 
41 
00 
00 
77 
57 
00 
00 
32 
40 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
63 
43 
00 
00 
78 
58 
00 
00 
64 
44 
00 
00 
65 
45 
00 
00 
34 
24 
00 
00 
33 
23 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
20 
20 
00 
00 
76 
56 
00 
00 
66 
46 
00 
00 
74 
54 
00 
00 
72 
52 
00 
00 
35 
25 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6e 
4e 
00 
00 
62 
42 
00 
00 
68 
48 
00 
00 
67 
47 
00 
00 
79 
59 
00 
00 
36 
5e 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
6d 
4d 
00 
00 
6a 
4a 
00 
00 
75 
55 
00 
00 
37 
26 
00 
00 
38 
2a 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2c 
3c 
00 
00 
6b 
4b 
00 
00 
69 
49 
00 
00 
6f 
4f 
00 
00 
30 
29 
00 
00 
39 
28 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
2e 
3e 
00 
00 
2f 
3f 
00 
00 
6c 
4c 
00 
00 
3b 
3a 
00 
00 
70 
50 
00 
00 
2d 
5f 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
27 
22 
00 
00 
00 
00 
00 
00 
5b 
7b 
00 
00 
3d 
2b 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
0a 
0a 
00 
00 
5d 
7d 
00 
00 
5c 
7c 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
01 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
00 
ff 
# :lcd_row_start
# const Array(Number(U8), Some(4))
00 
40 
14 
54 
# :KeyBoard_init
# Ret None
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([16]) [0]
# Var td45b (td45b Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([20, 21, 22, 23]) [0, 16, 15, 0]
# Var tdaa (tdaa Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([20, 21, 22, 23]) [4, 16, 15, 0]
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 80827 LoadImm32 [Register(0x14), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 14 00 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8082d LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 10 00 

# mem[td45b] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# 80830 Store8 [Register(0x10), Register(0x14)]
#       mem[td45b] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(11,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
06 10 14 

# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 80833 LoadImm32 [Register(0x14), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 14 04 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80839 LoadImm8 [Register(0x10), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 10 00 

# mem[tdaa] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 8083c Store8 [Register(0x10), Register(0x14)]
#       mem[tdaa] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(12,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 10 14 

# return None None
# Return { value: None }
# 8083f JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_KeyBoard_init None
# function_end_KeyBoard_init
# Unreachable None
# 80841 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :Keyboard_poll
# Ret None
# Var c (Local c Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var code (Local code Number(U8) Reg(U8)) Reg(U8) Some([24])
# Var index (Local index Number(USIZE) Reg(U32)) Reg(U32) Some([28, 29, 30, 31])
# Var inline_Keyboard_poll_queue_push_37_n (Arg1 n Number(U8)) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([32, 33, 34, 35]) [100, 16, 15, 0]
# Var inline_Keyboard_poll_queue_push_37_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([32, 33, 34, 35])
# Var inline_Keyboard_poll_queue_push_37_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([36])
# Var inline_Keyboard_poll_queue_push_37_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([40, 41, 42, 43])
# Var inline_Keyboard_poll_queue_push_37_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([24])
# Var inline_Keyboard_poll_queue_push_37_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([44, 45, 46, 47]) [104, 17, 15, 0]
# Var t23a (t23a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t2ca9 (t2ca9 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))) Reg(U8) Some([24])
# Var t3334 (t3334 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))) Reg(U8) Some([24])
# Var t379c (t379c LocalFieldDeref("keyboard", "shift_held")) Reg(U8) Some([24])
# Var t4c8b (t4c8b Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }) Reg(U32) Some([48, 49, 50, 51])
# Var t528d (t528d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }) Reg(U32) Some([48, 49, 50, 51])
# Var t5e63 (t5e63 Arithmetic(Add, Ident("index"), Number(USIZE, 3))) Reg(U32) Some([28, 29, 30, 31])
# Var t674 (t674 Arithmetic(Add, Ident("index"), Number(USIZE, 1))) Reg(U32) Some([32, 33, 34, 35])
# Var t6cd9 (t6cd9 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }) Reg(U32) Some([48, 49, 50, 51])
# Var t7b09 (t7b09 Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))) Reg(U8) Some([24])
# Var t7ebd (t7ebd LocalFieldDeref("keyboard", "release_in_progress")) Reg(U8) Some([52])
# Var t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([24])
# Var tac13 (tac13 Ident("c")) Reg(U8) Some([24])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([36]) [0]
# Var tb62e (tb62e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }) Reg(U32) Some([48, 49, 50, 51])
# Var td18e (td18e Ident("index")) Reg(U32) Some([28, 29, 30, 31])
# Var td45b (td45b Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }) Reg(U32) Some([48, 49, 50, 51]) [0, 16, 15, 0]
# Var tdaa (tdaa Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }) Reg(U32) Some([32, 33, 34, 35]) [4, 16, 15, 0]
# Var te5cf (te5cf Arithmetic(Add, Ident("index"), Number(USIZE, 2))) Reg(U32) Some([32, 33, 34, 35])
# Var ted94 (ted94 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }) Reg(U32) Some([48, 49, 50, 51])
# Var tf68c (tf68c Ident("code")) Reg(U8) Some([24])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([36]) [1]
# Some(t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 80846 IoReadyToRead [Register(0x18)]
#       ReadyToRead
79 18 

# t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
# 80848 AndImm8 [Register(0x18), Constant8(0x04=4)]
#       t3334 <- t861f BitwiseAnd Number(0n4/0x04u8) Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4))
18 18 04 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# Number(U8, 0)
# 8084b LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
#       Number(U8, 0)
04 24 00 

# if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
# 8084e Cmp8 [Register(0x18), Register(0x24)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
15 18 24 

# 80851 JzImm [Label24(Keyboard_poll_if_true_0_1)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
72 59 08 08 

# 80855 JmpImm [Label24(Keyboard_poll_if_else_0_2)]
#       if t3334 == tb36e then 'Keyboard_poll_if_true_0_1' else 'Keyboard_poll_if_else_0_2' Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
#       Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }
70 5f 08 08 

# :Keyboard_poll_if_true_0_1 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 4)), right: Number(U8, 0) }, [Return { value: None }])], else_block: [] }
# Keyboard_poll_if_true_0_1
# return None Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Return { value: None }
# 80859 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# 8085b JmpImm [Label24(Keyboard_poll_if_end_0)]
#       goto Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
70 5f 08 08 

# :Keyboard_poll_if_else_0_2 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_else_0_2
# :Keyboard_poll_if_end_0 Some('/lutcomp/programs/lib/Keyboard.j':(16,5))
# Keyboard_poll_if_end_0
# Some(code) <= call io_read2() Some('/lutcomp/programs/lib/Keyboard.j':(20,5))
# Assign { target: Ident("code"), var_type: Some(Number(U8)), value: Call(Call { function: "io_read2", parameters: [] }) }
# Call(Call { function: "io_read2", parameters: [] })
# 8085f In2 [Register(0x18)]
#       IoRead2
62 18 

# tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# Ident("code")
# optimized away noop copy Instruction { source: "tf68c <- code U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))\nAssign { target: Ident(\"index\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident(\"code\")) }\nArithmetic(Multiply, Number(USIZE, 4), Ident(\"code\"))\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"code\") }\nIdent(\"code\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
# 80861 LoadImm32 [Register(0x30), Constant32(0x00000000=0)]
#       Zero-pad for t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
20 30 00 00 00 00 

# 80867 Copy8 [Register(0x18), Register(0x30)]
#       t528d U32 <- tf68c U8 Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("code") }
0b 18 30 

# index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
# Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
# Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
# 8086a LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
20 00 04 00 00 00 

# 80870 Mul8_16 [Register(0x30), Register(0x00), Register(0x1c)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
11 30 00 1c 

# 80874 LoadImm8 [Register(0x1e), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1e 00 

# 80877 LoadImm8 [Register(0x1f), Constant8(0x00=0)]
#       index <- t528d Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Keyboard.j':(22,5))
#       Assign { target: Ident("index"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Number(USIZE, 4), Ident("code")) }
#       Arithmetic(Multiply, Number(USIZE, 4), Ident("code"))
04 1f 00 

# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 8087a LoadImm32 [Register(0x30), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 30 00 10 0f 00 

# t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "shift_held")
# 80880 Load8 [Register(0x30), Register(0x18)]
#       t379c <- mem[td45b] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "shift_held")
05 30 18 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# Number(U8, 0)
# 80883 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
#       Number(U8, 0)
04 24 00 

# if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
# 80886 Cmp8 [Register(0x18), Register(0x24)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
15 18 24 

# 80889 JzImm [Label24(Keyboard_poll_if_else_0_5)]
#       if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }
72 a9 08 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t379c != tb36e then 'Keyboard_poll_if_true_0_4' else 'Keyboard_poll_if_else_0_5' Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }, [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"shift_held\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_4)], resolved: None }
# :Keyboard_poll_if_true_0_4 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "shift_held"), right: Number(U8, 0) }, [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }])], else_block: [Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }] }
# Keyboard_poll_if_true_0_4
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 8088d LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 1)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 1))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 1))
# 80893 Copy32 [Register(0x1c), Register(0x20)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
21 1c 20 

# 80896 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000001=1)]
#       t674 <- td18e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 1))
32 20 01 00 00 00 

# t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 8089c ClearCarry []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
03 

# 8089d AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
30 30 20 30 

# 808a1 AddCarry32_2 []
#       t23a <- t4c8b Add Var(t674) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
31 

# c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
# 808a2 Load8 [Register(0x30), Register(0x18)]
#       c <- mem[t23a] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 1)))
05 30 18 

# goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# 808a5 JmpImm [Label24(Keyboard_poll_if_end_3)]
#       goto Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
70 b8 08 08 

# :Keyboard_poll_if_else_0_5 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_else_0_5
# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 808a9 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Index(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\")) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Ident(\"index\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\")) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Ident(\"index\"))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
# 808af ClearCarry []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
03 

# 808b0 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
30 30 1c 30 

# 808b4 AddCarry32_2 []
#       tb62e <- t4c8b Add Var(td18e) Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index")) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Ident("index"))
31 

# c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
# Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
# 808b5 Load8 [Register(0x30), Register(0x18)]
#       c <- mem[tb62e] U8 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
#       Assign { target: Ident("c"), var_type: None, value: Index("PS2_SCAN_CODE_TO_ASCII", Ident("index")) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Ident("index"))
05 30 18 

# :Keyboard_poll_if_end_3 Some('/lutcomp/programs/lib/Keyboard.j':(25,5))
# Keyboard_poll_if_end_3
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 808b8 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 808be Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 808c1 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 24 00 

# if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 808c4 Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 34 24 

# 808c7 JzImm [Label24(Keyboard_poll_if_true_0_7)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 cf 08 08 

# 808cb JmpImm [Label24(Keyboard_poll_if_else_0_8)]
#       if t7ebd == tb36e then 'Keyboard_poll_if_true_0_7' else 'Keyboard_poll_if_else_0_8' Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
#       Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
70 0d 09 08 

# :Keyboard_poll_if_true_0_7 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }])], else_block: [] }
# Keyboard_poll_if_true_0_7
# tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987236/0x000f1064u32 `.
# 808cf LoadImm32 [Register(0x20), Constant32(0x000f1064=987236)]
#       inline_Keyboard_poll_queue_push_37_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_s <- tfff6 U32` with constant `inline_Keyboard_poll_queue_push_37_s <- 0n987236/0x000f1064u32 `.
20 20 64 10 0f 00 

# inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_Keyboard_poll_queue_push_37_n <- tac13 U8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), Ident(\"c\")] })\n", opcode: Copy8, args: [Register(0x18), Register(0x18)], resolved: None }
# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32 `.
# 808d5 LoadImm32 [Register(0x2c), Constant32(0x000f1168=987496)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32 `.
20 2c 68 11 0f 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 808db Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 808de LoadImm32 [Register(0x28), Constant32(0x00000000=0)]
#       Zero-pad for inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 28 00 00 00 00 

# 808e4 Copy8 [Register(0x24), Register(0x28)]
#       inline_Keyboard_poll_queue_push_37_t5bb7 U32 <- inline_Keyboard_poll_queue_push_37_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 24 28 

# inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 808e7 ClearCarry []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 808e8 AddCarry32_1 [Register(0x20), Register(0x28), Register(0x20)]
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 20 28 20 

# 808ec AddCarry32_2 []
#       inline_Keyboard_poll_queue_push_37_t2187 <- inline_Keyboard_poll_queue_push_37_s Add Var(inline_Keyboard_poll_queue_push_37_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 808ed Store8 [Register(0x18), Register(0x20)]
#       mem[inline_Keyboard_poll_queue_push_37_t2187] <- inline_Keyboard_poll_queue_push_37_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 18 20 

# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32 `.
# 808f0 LoadImm32 [Register(0x2c), Constant32(0x000f1168=987496)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32 `.
20 2c 68 11 0f 00 

# inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32 `.
# 808f6 LoadImm32 [Register(0x2c), Constant32(0x000f1168=987496)]
#       inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("Keyboard_poll"), replacing `inline_Keyboard_poll_queue_push_37_tc1ff <- inline_Keyboard_poll_queue_push_37_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_Keyboard_poll_queue_push_37_tc1ff <- 0n987496/0x000f1168u32 `.
20 2c 68 11 0f 00 

# inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 808fc Load8 [Register(0x2c), Register(0x24)]
#       inline_Keyboard_poll_queue_push_37_t3ee <- mem[inline_Keyboard_poll_queue_push_37_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 2c 24 

# inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 808ff LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 80902 Add8NoCarryIn [Register(0x24), Register(0x00), Register(0x18)]
#       inline_Keyboard_poll_queue_push_37_t6778 <- inline_Keyboard_poll_queue_push_37_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 24 00 18 

# mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 80906 Store8 [Register(0x18), Register(0x2c)]
#       mem[inline_Keyboard_poll_queue_push_37_tc1ff] <- inline_Keyboard_poll_queue_push_37_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 18 2c 

# goto inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_Keyboard_poll_queue_push_37_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_Keyboard_poll_queue_push_37_function_end_queue_push)], resolved: None }
# :inline_Keyboard_poll_queue_push_37_function_end_queue_push None
# inline_Keyboard_poll_queue_push_37_function_end_queue_push
# goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# 80909 JmpImm [Label24(Keyboard_poll_if_end_6)]
#       goto Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
70 0d 09 08 

# :Keyboard_poll_if_else_0_8 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_else_0_8
# :Keyboard_poll_if_end_6 Some('/lutcomp/programs/lib/Keyboard.j':(31,5))
# Keyboard_poll_if_end_6
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Number(U8, 0)
# 8090d LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Number(U8, 0)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80910 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 2))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 2))
# 80916 Copy32 [Register(0x1c), Register(0x20)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
21 1c 20 

# 80919 AddImm32IgnoreCarry [Register(0x20), Constant32(0x00000002=2)]
#       te5cf <- td18e Add Number(0n2/0x00000002u32) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 2))
32 20 02 00 00 00 

# ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 8091f ClearCarry []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
03 

# 80920 AddCarry32_1 [Register(0x30), Register(0x20), Register(0x30)]
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
30 30 20 30 

# 80924 AddCarry32_2 []
#       ted94 <- t4c8b Add Var(te5cf) Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
31 

# t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
# 80925 Load8 [Register(0x30), Register(0x18)]
#       t2ca9 <- mem[ted94] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2)))
05 30 18 

# if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
# 80928 Cmp8 [Register(0x24), Register(0x18)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
15 24 18 

# 8092b JzImm [Label24(Keyboard_poll_if_else_0_11)]
#       if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }
72 62 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t2ca9 then 'Keyboard_poll_if_true_0_10' else 'Keyboard_poll_if_else_0_11' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 2))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_10)], resolved: None }
# :Keyboard_poll_if_true_0_10 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 2))) }, [IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }])], else_block: [] }
# Keyboard_poll_if_true_0_10
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 8092f LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 

# t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# LocalFieldDeref("keyboard", "release_in_progress")
# 80935 Load8 [Register(0x20), Register(0x34)]
#       t7ebd <- mem[tdaa] U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       LocalFieldDeref("keyboard", "release_in_progress")
05 20 34 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# Number(U8, 0)
# 80938 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
#       Number(U8, 0)
04 24 00 

# if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
# 8093b Cmp8 [Register(0x34), Register(0x24)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
15 34 24 

# 8093e JzImm [Label24(Keyboard_poll_if_else_0_14)]
#       if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
#       Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }
72 52 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t7ebd != tb36e then 'Keyboard_poll_if_true_0_13' else 'Keyboard_poll_if_else_0_14' Some('/lutcomp/programs/lib/Keyboard.j':(37,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"shift_held\"), var_type: None, value: Number(U8, 1) }] }\nComparison { op: NotEquals, left: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_13)], resolved: None }
# :Keyboard_poll_if_true_0_13 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: LocalFieldDeref("keyboard", "release_in_progress"), right: Number(U8, 0) }, [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }] }
# Keyboard_poll_if_true_0_13
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 80942 LoadImm32 [Register(0x30), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 30 00 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80948 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 24 00 

# mem[td45b] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
# 8094b Store8 [Register(0x24), Register(0x30)]
#       mem[td45b] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 0) }
06 24 30 

# goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 8094e JmpImm [Label24(Keyboard_poll_if_end_12)]
#       goto Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 5e 09 08 

# :Keyboard_poll_if_else_0_14 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_14
# td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
# Number(USIZE, 987136)
# 80952 LoadImm32 [Register(0x30), Constant32(0x000f1000=987136)]
#       td45b <- 0n987136/0x000f1000u32  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Number(USIZE, 987136) }
#       Number(USIZE, 987136)
20 30 00 10 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 80958 LoadImm8 [Register(0x24), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 24 01 

# mem[td45b] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
# 8095b Store8 [Register(0x24), Register(0x30)]
#       mem[td45b] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
#       Assign { target: LocalFieldDeref("keyboard", "shift_held"), var_type: None, value: Number(U8, 1) }
06 24 30 

# :Keyboard_poll_if_end_12 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_12
# goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# 8095e JmpImm [Label24(Keyboard_poll_if_end_9)]
#       goto Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
70 62 09 08 

# :Keyboard_poll_if_else_0_11 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_else_0_11
# :Keyboard_poll_if_end_9 Some('/lutcomp/programs/lib/Keyboard.j':(37,5))
# Keyboard_poll_if_end_9
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Number(U8, 0)
# 80962 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Number(U8, 0)
04 24 00 

# t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
# Ident("PS2_SCAN_CODE_TO_ASCII")
# 80965 LoadImm32 [Register(0x30), Label32(:PS2_SCAN_CODE_TO_ASCII)]
#       t4c8b <- const &PS2_SCAN_CODE_TO_ASCII Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }
#       Ident("PS2_SCAN_CODE_TO_ASCII")
20 30 22 04 08 00 

# td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# Ident("index")
# optimized away noop copy Instruction { source: "td18e <- index U32 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nIndex(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident(\"PS2_SCAN_CODE_TO_ASCII\") }, Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3)))\nArithmetic(Add, Ident(\"index\"), Number(USIZE, 3))\nIdent(\"index\")\n", opcode: Copy32, args: [Register(0x1c), Register(0x1c)], resolved: None }
# t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Arithmetic(Add, Ident("index"), Number(USIZE, 3))
# 8096b AddImm32IgnoreCarry [Register(0x1c), Constant32(0x00000003=3)]
#       t5e63 <- td18e Add Number(0n3/0x00000003u32) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Arithmetic(Add, Ident("index"), Number(USIZE, 3))
32 1c 03 00 00 00 

# t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 80971 ClearCarry []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
03 

# 80972 AddCarry32_1 [Register(0x30), Register(0x1c), Register(0x30)]
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
30 30 1c 30 

# 80976 AddCarry32_2 []
#       t6cd9 <- t4c8b Add Var(t5e63) Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(1025)))), new_type: Number(USIZE), value: Ident("PS2_SCAN_CODE_TO_ASCII") }, Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
31 

# t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
# 80977 Load8 [Register(0x30), Register(0x18)]
#       t7b09 <- mem[t6cd9] U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
#       Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3)))
05 30 18 

# if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
# 8097a Cmp8 [Register(0x24), Register(0x18)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
15 24 18 

# 8097d JzImm [Label24(Keyboard_poll_if_else_0_17)]
#       if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }
72 91 09 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb36e != t7b09 then 'Keyboard_poll_if_true_0_16' else 'Keyboard_poll_if_else_0_17' Some('/lutcomp/programs/lib/Keyboard.j':(49,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref(\"keyboard\", \"release_in_progress\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: NotEquals, left: Number(U8, 0), right: Index(\"PS2_SCAN_CODE_TO_ASCII\", Arithmetic(Add, Ident(\"index\"), Number(USIZE, 3))) }\n", opcode: JmpImm, args: [Label24(Keyboard_poll_if_true_0_16)], resolved: None }
# :Keyboard_poll_if_true_0_16 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Number(U8, 0), right: Index("PS2_SCAN_CODE_TO_ASCII", Arithmetic(Add, Ident("index"), Number(USIZE, 3))) }, [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }])], else_block: [Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }] }
# Keyboard_poll_if_true_0_16
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 80981 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 80987 LoadImm8 [Register(0x24), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 24 01 

# mem[tdaa] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
# 8098a Store8 [Register(0x24), Register(0x20)]
#       mem[tdaa] <- tfcd U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 1) }
06 24 20 

# goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# 8098d JmpImm [Label24(Keyboard_poll_if_end_15)]
#       goto Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
70 9d 09 08 

# :Keyboard_poll_if_else_0_17 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_else_0_17
# tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
# Number(USIZE, 987140)
# 80991 LoadImm32 [Register(0x20), Constant32(0x000f1004=987140)]
#       tdaa <- 0n987140/0x000f1004u32  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987136), Number(USIZE, 4)) }
#       Number(USIZE, 987140)
20 20 04 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80997 LoadImm8 [Register(0x24), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 24 00 

# mem[tdaa] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
# 8099a Store8 [Register(0x24), Register(0x20)]
#       mem[tdaa] <- tb36e U8 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
#       Assign { target: LocalFieldDeref("keyboard", "release_in_progress"), var_type: None, value: Number(U8, 0) }
06 24 20 

# :Keyboard_poll_if_end_15 Some('/lutcomp/programs/lib/Keyboard.j':(49,5))
# Keyboard_poll_if_end_15
# return None None
# Return { value: None }
# 8099d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_Keyboard_poll None
# function_end_Keyboard_poll
# Unreachable None
# 8099f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_handle
# Ret Some(U8)
# Arg0=c
# Arg1=ch
# Var a (Local a Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([64, 65, 66, 67])
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([68])
# Var diff (Local diff Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_RpnCalc_init_50_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_init_50_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([56, 57, 58, 59]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_init_50_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([76, 77, 78, 79]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([88])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([89]) [0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([97]) [0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_c (Arg0 c Ptr(Struct("RpnCalc"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([60, 61, 62, 63]) [0, 0, 0, 0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f (ta34f PtrFieldDeref("c", "have_num")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([97]) [0]
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_a (Arg0 a Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_b (Arg1 b Number(USIZE)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b (Arg1 b Number(USIZE)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([98])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([99]) [0]
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([89])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a (Arg0 a Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b (Arg1 b Number(USIZE)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 (t3585 Ident("e")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 (t45f5 Ident("d")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([99])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 (t8792 Ident("a")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 (tac13 Ident("c")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([100]) [0]
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([99])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([104, 105, 106, 107])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a (Arg0 a Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b (Arg1 b Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 (t3585 Ident("e")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 (t45f5 Ident("d")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([98])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 (tac13 Ident("c")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([89]) [0]
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([98])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_RpnCalc_handle_mul32_32_12_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_t5cca (t5cca Ident("b_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t6afc (t6afc Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })) Reg(U32) Some([84, 85, 86, 87])
# Var inline_RpnCalc_handle_mul32_32_12_t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([68])
# Var inline_RpnCalc_handle_mul32_32_12_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_32_12_tac13 (tac13 Ident("c")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_32_12_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_mul32_32_12_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_RpnCalc_handle_mul32_32_12_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_mul32_32_12_tbe0a (tbe0a Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_a (Arg0 a Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_mul32_by10_13_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_t8792 (t8792 Ident("a")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_mul32_by10_13_tace9 (tace9 Ident("b")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_putc_15_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_15_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_15_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) [69]
# Var inline_RpnCalc_handle_putc_15_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_RpnCalc_handle_putc_16_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_16_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_16_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) [82]
# Var inline_RpnCalc_handle_putc_16_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_RpnCalc_handle_putc_17_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_17_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_17_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) [82]
# Var inline_RpnCalc_handle_putc_17_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_RpnCalc_handle_putc_18_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_18_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_18_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) [10]
# Var inline_RpnCalc_handle_putc_18_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_RpnCalc_handle_putc_19_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_19_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_19_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) [10]
# Var inline_RpnCalc_handle_putc_19_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_RpnCalc_handle_putc_20_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_20_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_20_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) [10]
# Var inline_RpnCalc_handle_putc_20_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([68]) [0]
# Var inline_RpnCalc_handle_putc_21_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_21_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_21_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) [10]
# Var inline_RpnCalc_handle_putc_21_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_RpnCalc_handle_putc_22_t0 (static "lcd_enable" addr) Reg(U32) Some([56, 57, 58, 59]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_22_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([69])
# Var inline_RpnCalc_handle_putc_22_tac13 (tac13 Ident("c")) Reg(U8) Some([69]) [10]
# Var inline_RpnCalc_handle_putc_22_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_RpnCalc_handle_putc_23_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_23_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_23_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) [58]
# Var inline_RpnCalc_handle_putc_23_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([68]) [0]
# Var inline_RpnCalc_handle_putc_24_t0 (static "lcd_enable" addr) Reg(U32) Some([60, 61, 62, 63]) [96, 16, 15, 0]
# Var inline_RpnCalc_handle_putc_24_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([96])
# Var inline_RpnCalc_handle_putc_24_tac13 (tac13 Ident("c")) Reg(U8) Some([96]) [10]
# Var inline_RpnCalc_handle_putc_24_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([68]) [0]
# Var inline_RpnCalc_handle_stack_get_48_n (Arg1 n Number(USIZE)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_get_48_t2db0 (t2db0 Index("values", Ident("n"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_t5abb (t5abb Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_get_48_td38d (td38d Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_52_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_pop_52_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_52_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_52_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_t8e54 (t8e54 Index("values", PtrFieldDeref("s", "first_free"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_pop_53_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_pop_53_te089 (te089 Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_pop_53_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_54_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_54_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_54_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_54_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_54_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_55_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_55_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_55_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_55_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_56_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_56_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_56_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_56_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_57_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_57_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_57_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_57_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_58_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_58_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_58_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_RpnCalc_handle_stack_push_58_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_58_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([72, 73, 74, 75])
# Var inline_RpnCalc_handle_stack_push_59_n (Arg1 n Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_s (Arg0 s Ptr(Struct("Stack"))) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_t100e (t100e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t14ab (t14ab PtrFieldDeref("s", "first_free")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_RpnCalc_handle_stack_push_59_t4bb9 (t4bb9 Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_RpnCalc_handle_stack_push_59_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([92, 93, 94, 95])
# Var inline_RpnCalc_handle_stack_push_59_td757 (td757 Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_RpnCalc_handle_stack_push_59_tf659 (tf659 Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) Reg(U32) Some([64, 65, 66, 67])
# Var product (Local product Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var quotient (Local quotient Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var stack_count (Local stack_count Number(U8) Reg(U8)) Reg(U8) Some([89])
# Var stack_count_usize (Local stack_count_usize Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var stack_needed (Local stack_needed Number(U8) Reg(U8)) Reg(U8) Some([100])
# Var sum (Local sum Number(USIZE) Reg(U32)) Reg(U32) Some([92, 93, 94, 95])
# Var t1501 (t1501 Number(U8, 113)) Reg(U8) Some([69]) [113]
# Var t17ee (t17ee Ident("diff")) Reg(U32) Some([56, 57, 58, 59])
# Var t1ba9 (t1ba9 Ident("quotient")) Reg(U32) Some([56, 57, 58, 59])
# Var t2597 (t2597 Number(U8, 43)) Reg(U8) Some([98]) [43]
# Var t2754 (t2754 Ident("product")) Reg(U32) Some([56, 57, 58, 59])
# Var t2ac9 (t2ac9 Number(U8, 57)) Reg(U8) Some([69]) [57]
# Var t39b5 (t39b5 Number(U8, 115)) Reg(U8) Some([98]) [115]
# Var t3f70 (t3f70 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) Reg(U32) Some([56, 57, 58, 59])
# Var t4376 (t4376 Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([60, 61, 62, 63])
# Var t4671 (t4671 Ident("stack_needed")) Reg(U8) Some([98])
# Var t49a (t49a Number(U8, 100)) Reg(U8) Some([69]) [100]
# Var t4e08 (t4e08 Number(U8, 99)) Reg(U8) Some([69]) [99]
# Var t6001 (t6001 Ident("stack_count")) Reg(U8) Some([88])
# Var t670d (t670d Ident("sum")) Reg(U32) Some([56, 57, 58, 59])
# Var t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([72, 73, 74, 75])
# Var t7ff1 (t7ff1 Arithmetic(Subtract, Ident("ch"), Number(U8, 48))) Reg(U8) Some([69])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([72, 73, 74, 75])
# Var t8b2f (t8b2f Number(U8, 45)) Reg(U8) Some([98]) [45]
# Var t969e (t969e Number(U8, 42)) Reg(U8) Some([98]) [42]
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([69]) [32]
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([92, 93, 94, 95])
# Var tacf6 (tacf6 Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })) Reg(U32) Some([56, 57, 58, 59])
# Var tadd (tadd Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })) Reg(U32) Some([56, 57, 58, 59])
# Var tb1ed (tb1ed Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var tb336 (tb336 Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })) Reg(U32) Some([60, 61, 62, 63])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([88]) [0]
# Var tbf93 (tbf93 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }) Reg(U32) Some([72, 73, 74, 75])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([69])
# Var td60 (td60 PtrFieldDeref("c", "num")) Reg(U32) Some([60, 61, 62, 63])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([96]) [10]
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([68])
# Var te668 (te668 Number(U8, 47)) Reg(U8) Some([98]) [47]
# Var tf48d (tf48d Number(U8, 48)) Reg(U8) Some([69]) [48]
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([88]) [1]
# Var tfdb7 (tfdb7 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }) Reg(U32) Some([56, 57, 58, 59])
# Var tfe08 (tfe08 Ident("stack")) Reg(U32) Some([64, 65, 66, 67])
# 809a4 Copy32 [Register(0x00), Register(0x40)]
#       Save function parameter 'c' registers [0, 1, 2, 3] to locals [64, 65, 66, 67].
21 00 40 

# 809a7 Copy8 [Register(0x04), Register(0x44)]
#       Save function parameter 'ch' registers [4] to locals [68].
0b 04 44 

# a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
# Assign { target: Ident("a"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
# Number(U8, 0)
# 809aa LoadImm8 [Register(0x38), Constant8(0x00=0)]
#       a <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(30,5))
#       Assign { target: Ident("a"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
#       Number(U8, 0)
04 38 00 

# b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
# Number(U8, 0)
# 809ad LoadImm8 [Register(0x3c), Constant8(0x00=0)]
#       b <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(31,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Number(U8, 0) }
#       Number(U8, 0)
04 3c 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident(\"stack_needed\"), var_type: None, value: Number(U8, 0) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t2597 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Number(U8, 43)
# 809b0 LoadImm8 [Register(0x62), Constant8(0x2b=43)]
#       t2597 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
#       Number(U8, 43)
04 62 2b 

# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# 809b3 Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
15 44 62 

# 809b6 JzImm [Label24(RpnCalc_handle_if_true_0_1)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
72 be 09 08 

# 809ba JmpImm [Label24(RpnCalc_handle_if_else_0_2)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_1' else 'RpnCalc_handle_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
70 c5 09 08 

# :RpnCalc_handle_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }])], else_block: [Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }] }
# RpnCalc_handle_if_true_0_1
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 809be LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809c1 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_0_2
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8b2f <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Number(U8, 45)
# 809c5 LoadImm8 [Register(0x62), Constant8(0x2d=45)]
#       t8b2f <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
#       Number(U8, 45)
04 62 2d 

# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# 809c8 Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
15 44 62 

# 809cb JzImm [Label24(RpnCalc_handle_if_true_1_3)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
72 d3 09 08 

# 809cf JmpImm [Label24(RpnCalc_handle_if_else_1_4)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_3' else 'RpnCalc_handle_if_else_1_4' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
70 da 09 08 

# :RpnCalc_handle_if_true_1_3 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_1_3
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 809d3 LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809d6 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_1_4 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_1_4
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t969e <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Number(U8, 42)
# 809da LoadImm8 [Register(0x62), Constant8(0x2a=42)]
#       t969e <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
#       Number(U8, 42)
04 62 2a 

# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# 809dd Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
15 44 62 

# 809e0 JzImm [Label24(RpnCalc_handle_if_true_2_5)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
72 e8 09 08 

# 809e4 JmpImm [Label24(RpnCalc_handle_if_else_2_6)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_5' else 'RpnCalc_handle_if_else_2_6' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
70 ef 09 08 

# :RpnCalc_handle_if_true_2_5 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_2_5
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 809e8 LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 809eb JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_2_6 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_2_6
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# te668 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Number(U8, 47)
# 809ef LoadImm8 [Register(0x62), Constant8(0x2f=47)]
#       te668 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
#       Number(U8, 47)
04 62 2f 

# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# 809f2 Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
15 44 62 

# 809f5 JzImm [Label24(RpnCalc_handle_if_true_3_7)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
72 fd 09 08 

# 809f9 JmpImm [Label24(RpnCalc_handle_if_else_3_8)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_7' else 'RpnCalc_handle_if_else_3_8' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
70 04 0a 08 

# :RpnCalc_handle_if_true_3_7 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_3_7
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 809fd LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 80a00 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_3_8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_3_8
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t39b5 <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Number(U8, 115)
# 80a04 LoadImm8 [Register(0x62), Constant8(0x73=115)]
#       t39b5 <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
#       Number(U8, 115)
04 62 73 

# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# 80a07 Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
15 44 62 

# 80a0a JzImm [Label24(RpnCalc_handle_if_true_4_9)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
72 12 0a 08 

# 80a0e JmpImm [Label24(RpnCalc_handle_if_else_4_10)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_9' else 'RpnCalc_handle_if_else_4_10' Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
70 19 0a 08 

# :RpnCalc_handle_if_true_4_9 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_true_4_9
# stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
# Number(U8, 2)
# 80a12 LoadImm8 [Register(0x64), Constant8(0x02=2)]
#       stack_needed <- 0n2/0x02u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 2) }
#       Number(U8, 2)
04 64 02 

# goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# 80a15 JmpImm [Label24(RpnCalc_handle_if_end_0)]
#       goto RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
70 1c 0a 08 

# :RpnCalc_handle_if_else_4_10 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_else_4_10
# stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80a19 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       stack_needed <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
#       Assign { target: Ident("stack_needed"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# :RpnCalc_handle_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(34,5))
# RpnCalc_handle_if_end_0
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Ident("stack_needed")
# 80a1c Copy8 [Register(0x64), Register(0x62)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Ident("stack_needed")
0b 64 62 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Number(U8, 0)
# 80a1f LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Number(U8, 0)
04 58 00 

# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# 80a22 Cmp8 [Register(0x62), Register(0x58)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
15 62 58 

# 80a25 JcImm [Label24(RpnCalc_handle_if_else_0_13)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
71 c9 0a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_12' else 'RpnCalc_handle_if_else_0_13' Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_12)], resolved: None }
# :RpnCalc_handle_if_true_0_12 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_12
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 80a29 Copy32 [Register(0x40), Register(0x48)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 48 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 80a2c Copy32 [Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 48 4c 

# 80a2f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 4c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 80a35 Load8 [Register(0x4c), Register(0x58)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 4c 58 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 80a38 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 59 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 80a3b Cmp8 [Register(0x58), Register(0x59)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 58 59 

# 80a3e JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 c5 0a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_61_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 80a42 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 48 50 

# 80a45 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 80a4b Load32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 50 4c 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_61_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# 80a4e Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
#       Ident("s")
21 48 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80a51 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 50 54 

# 80a54 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80a5a Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80a5d LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 80a63 Mul8_16 [Register(0x50), Register(0x00), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 50 00 50 

# 80a67 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 52 00 

# 80a6a LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 53 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80a6d ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 80a6e AddCarry32_1 [Register(0x48), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 48 50 50 

# 80a72 AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80a73 Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 4c 50 

# 80a76 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# 80a77 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
#       Ident("s")
21 48 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80a7a Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 50 54 

# 80a7d AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# 80a83 Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
#       Ident("s")
21 48 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80a86 Copy32 [Register(0x50), Register(0x54)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 50 54 

# 80a89 AddImm32IgnoreCarry [Register(0x54), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 54 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80a8f Load32 [Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 54 50 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80a92 Copy32 [Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 50 4c 

# 80a95 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 4c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80a9b Store32_1 [Register(0x4c), Register(0x54)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 4c 54 

# 80a9e Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 80a9f Copy32 [Register(0x48), Register(0x50)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 48 50 

# 80aa2 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 50 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 80aa8 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 4c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 80aae Store32_1 [Register(0x4c), Register(0x50)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 4c 50 

# 80ab1 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_61_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 80ab2 Copy32 [Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 48 4c 

# 80ab5 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 4c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80abb LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 59 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 80abe Store8 [Register(0x59), Register(0x4c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_61_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_61_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 59 4c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 80ac1 JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 c5 0a 08 

# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_61_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_61_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# 80ac5 JmpImm [Label24(RpnCalc_handle_if_end_11)]
#       goto RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
70 c9 0a 08 

# :RpnCalc_handle_if_else_0_13 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_else_0_13
# :RpnCalc_handle_if_end_11 Some('/lutcomp/programs/lib/rpnlib.j':(48,5))
# RpnCalc_handle_if_end_11
# tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
# 80ac9 Copy32 [Register(0x40), Register(0x48)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
21 40 48 

# 80acc AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000040=64)]
#       tbf93 <- c Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("stack") }, Number(USIZE, 64))
32 48 40 00 00 00 

# stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
# Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
# PtrFieldDeref("stack", "first_free")
# 80ad2 Load32 [Register(0x48), Register(0x48)]
#       stack_count_usize <- mem[tbf93] U32 Some('/lutcomp/programs/lib/rpnlib.j':(52,5))
#       Assign { target: Ident("stack_count_usize"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("stack", "first_free") }
#       PtrFieldDeref("stack", "first_free")
22 48 48 

# stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
# Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(U8, 0)) }
# Index("stack_count_usize", Number(U8, 0))
# 80ad5 Copy8 [Register(0x48), Register(0x59)]
#       stack_count <- stack_count_usize[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(53,5))
#       Assign { target: Ident("stack_count"), var_type: Some(Number(U8)), value: Index("stack_count_usize", Number(U8, 0)) }
#       Index("stack_count_usize", Number(U8, 0))
0b 48 59 

# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_needed")
# 80ad8 Copy8 [Register(0x64), Register(0x62)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_needed")
0b 64 62 

# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# Ident("stack_count")
# 80adb Copy8 [Register(0x59), Register(0x58)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 59 58 

# if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
# 80ade Cmp8 [Register(0x62), Register(0x58)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
15 62 58 

# 80ae1 JcImm [Label24(RpnCalc_handle_if_else_0_16)]
#       if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }
71 d4 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > t6001 then 'RpnCalc_handle_if_true_0_15' else 'RpnCalc_handle_if_else_0_16' Some('/lutcomp/programs/lib/rpnlib.j':(55,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }, [VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_15)], resolved: None }
# :RpnCalc_handle_if_true_0_15 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Ident("stack_count") }, [VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 69)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 82)] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Return { value: Some(Number(U8, 1)) }])], else_block: [] }
# RpnCalc_handle_if_true_0_15
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 80ae5 LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call io_write0(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80ae8 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_15_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80aea LoadImm32 [Register(0x38), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_15_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 38 60 10 0f 00 

# inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80af0 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_15_t76c7 <- mem[inline_RpnCalc_handle_putc_15_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_15_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 80af3 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_15_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_tb36e then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 80af6 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_tb36e then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 45 60 

# 80af9 JzImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_tb36e then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 1d 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_15_t76c7 != inline_RpnCalc_handle_putc_15_tb36e then 'inline_RpnCalc_handle_putc_15_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_15_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_15_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_15_putc_if_true_0_1
# inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
# 80afd LoadImm8 [Register(0x45), Constant8(0x45=69)]
#       inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_15_tac13 <- inline_RpnCalc_handle_putc_15_c U8` with constant `inline_RpnCalc_handle_putc_15_tac13 <- 0n69/0x45u8 `.
04 45 45 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b00 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_15_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_15_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80b03 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b09 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 13 0b 08 00 

# 80b0f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 80b13 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80b19 JmpImm [Label24(inline_RpnCalc_handle_putc_15_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 1d 0b 08 

# :inline_RpnCalc_handle_putc_15_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_15_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_15_putc_if_end_0
# goto inline_RpnCalc_handle_putc_15_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_15_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_15_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_15_function_end_putc None
# inline_RpnCalc_handle_putc_15_function_end_putc
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 80b1d LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b20 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_16_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80b22 LoadImm32 [Register(0x38), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_16_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 38 60 10 0f 00 

# inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80b28 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_16_t76c7 <- mem[inline_RpnCalc_handle_putc_16_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_16_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 80b2b LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_16_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_tb36e then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 80b2e Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_tb36e then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 45 60 

# 80b31 JzImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_tb36e then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 55 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_16_t76c7 != inline_RpnCalc_handle_putc_16_tb36e then 'inline_RpnCalc_handle_putc_16_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_16_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_16_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_16_putc_if_true_0_1
# inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
# 80b35 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_16_tac13 <- inline_RpnCalc_handle_putc_16_c U8` with constant `inline_RpnCalc_handle_putc_16_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b38 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_16_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_16_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80b3b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b41 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 4b 0b 08 00 

# 80b47 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 80b4b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80b51 JmpImm [Label24(inline_RpnCalc_handle_putc_16_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 55 0b 08 

# :inline_RpnCalc_handle_putc_16_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_16_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_16_putc_if_end_0
# goto inline_RpnCalc_handle_putc_16_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_16_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_16_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_16_function_end_putc None
# inline_RpnCalc_handle_putc_16_function_end_putc
# inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# 80b55 LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call io_write0(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b58 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_17_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80b5a LoadImm32 [Register(0x38), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_17_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 38 60 10 0f 00 

# inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80b60 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_17_t76c7 <- mem[inline_RpnCalc_handle_putc_17_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_17_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 80b63 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_17_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_tb36e then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 80b66 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_tb36e then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 45 60 

# 80b69 JzImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_tb36e then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 8d 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_17_t76c7 != inline_RpnCalc_handle_putc_17_tb36e then 'inline_RpnCalc_handle_putc_17_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_17_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_17_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_17_putc_if_true_0_1
# inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
# 80b6d LoadImm8 [Register(0x45), Constant8(0x52=82)]
#       inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_17_tac13 <- inline_RpnCalc_handle_putc_17_c U8` with constant `inline_RpnCalc_handle_putc_17_tac13 <- 0n82/0x52u8 `.
04 45 52 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80b70 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_17_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_17_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80b73 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80b79 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 83 0b 08 00 

# 80b7f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 80b83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80b89 JmpImm [Label24(inline_RpnCalc_handle_putc_17_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 8d 0b 08 

# :inline_RpnCalc_handle_putc_17_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_17_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_17_putc_if_end_0
# goto inline_RpnCalc_handle_putc_17_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_17_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_17_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_17_function_end_putc None
# inline_RpnCalc_handle_putc_17_function_end_putc
# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 80b8d LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 60 0a 

# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# 80b90 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80b93 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_18_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80b95 LoadImm32 [Register(0x38), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_18_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 38 60 10 0f 00 

# inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80b9b Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_18_t76c7 <- mem[inline_RpnCalc_handle_putc_18_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_18_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 80b9e LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_18_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_tb36e then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 80ba1 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_tb36e then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 45 60 

# 80ba4 JzImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_tb36e then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 c8 0b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_18_t76c7 != inline_RpnCalc_handle_putc_18_tb36e then 'inline_RpnCalc_handle_putc_18_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_18_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_18_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_18_putc_if_true_0_1
# inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
# 80ba8 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_18_tac13 <- inline_RpnCalc_handle_putc_18_c U8` with constant `inline_RpnCalc_handle_putc_18_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80bab Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_18_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_18_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80bae AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80bb4 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c be 0b 08 00 

# 80bba JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 80bbe AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80bc4 JmpImm [Label24(inline_RpnCalc_handle_putc_18_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 c8 0b 08 

# :inline_RpnCalc_handle_putc_18_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_18_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_18_putc_if_end_0
# goto inline_RpnCalc_handle_putc_18_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_18_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_18_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_18_function_end_putc None
# inline_RpnCalc_handle_putc_18_function_end_putc
# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(U8, 1)) }
# Number(U8, 1)
# 80bc8 LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(U8, 1)) }
#       Number(U8, 1)
04 58 01 

# return Some(tfcd) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# Return { value: Some(Number(U8, 1)) }
# 80bcb Copy8 [Register(0x58), Register(0x00)]
#       return Some(tfcd) Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
#       Return { value: Some(Number(U8, 1)) }
0b 58 00 

# 80bce JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# 80bd0 JmpImm [Label24(RpnCalc_handle_if_end_14)]
#       goto RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
70 d4 0b 08 

# :RpnCalc_handle_if_else_0_16 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_else_0_16
# :RpnCalc_handle_if_end_14 Some('/lutcomp/programs/lib/rpnlib.j':(55,5))
# RpnCalc_handle_if_end_14
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Ident("stack_needed")
# 80bd4 Copy8 [Register(0x64), Register(0x62)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Ident("stack_needed")
0b 64 62 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# Number(U8, 0)
# 80bd7 LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
#       Number(U8, 0)
04 58 00 

# if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
# 80bda Cmp8 [Register(0x62), Register(0x58)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
15 62 58 

# 80bdd JcImm [Label24(RpnCalc_handle_if_else_0_19)]
#       if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }
71 2c 0c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tb36e then 'RpnCalc_handle_if_true_0_18' else 'RpnCalc_handle_if_else_0_19' Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }, [Assign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_18)], resolved: None }
# :RpnCalc_handle_if_true_0_18 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 0) }, [Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_18
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80be1 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
#       Assign { target: Ident("a"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 38 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80be4 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 38 4c 

# 80be7 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80bed Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 38 4c 

# 80bf0 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80bf6 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_te089 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80bf9 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_52_te089 <- inline_RpnCalc_handle_stack_pop_52_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80bff Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 48 4c 

# 80c02 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_52_tc957] <- inline_RpnCalc_handle_stack_pop_52_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_52_t4bb9 <- inline_RpnCalc_handle_stack_pop_52_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80c03 Copy32 [Register(0x38), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 38 4c 

# 80c06 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_52_tc957 <- inline_RpnCalc_handle_stack_pop_52_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80c0c Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_t14ab <- mem[inline_RpnCalc_handle_stack_pop_52_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80c0f LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 80c15 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 48 00 48 

# 80c19 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 4a 00 

# 80c1c LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_52_tf659 <- inline_RpnCalc_handle_stack_pop_52_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80c1f ClearCarry []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 80c20 AddCarry32_1 [Register(0x38), Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 38 48 38 

# 80c24 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_52_t100e <- inline_RpnCalc_handle_stack_pop_52_s Add Var(inline_RpnCalc_handle_stack_pop_52_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80c25 Load32 [Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_stack_pop_52_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_52_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 38 38 

# a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "a <- inline_RpnCalc_handle_stack_pop_52_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_52_function_end_stack_pop
# goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# 80c28 JmpImm [Label24(RpnCalc_handle_if_end_17)]
#       goto RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
70 2c 0c 08 

# :RpnCalc_handle_if_else_0_19 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_else_0_19
# :RpnCalc_handle_if_end_17 Some('/lutcomp/programs/lib/rpnlib.j':(63,5))
# RpnCalc_handle_if_end_17
# t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# Ident("stack_needed")
# 80c2c Copy8 [Register(0x64), Register(0x62)]
#       t4671 <- stack_needed U8 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
#       Ident("stack_needed")
0b 64 62 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# Number(U8, 1)
# 80c2f LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
#       Number(U8, 1)
04 58 01 

# if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
# 80c32 Cmp8 [Register(0x62), Register(0x58)]
#       if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
15 62 58 

# 80c35 JcImm [Label24(RpnCalc_handle_if_else_0_22)]
#       if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }
71 84 0c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t4671 > tfcd then 'RpnCalc_handle_if_true_0_21' else 'RpnCalc_handle_if_else_0_22' Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }, [Assign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"stack_needed\"), right: Number(U8, 1) }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_if_true_0_21)], resolved: None }
# :RpnCalc_handle_if_true_0_21 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("stack_needed"), right: Number(U8, 1) }, [Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_21
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Call(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] }) }\nCall(Call { function: \"stack_pop\", parameters: [Ident(\"stack\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
# Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
# 80c39 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
#       Assign { target: Ident("b"), var_type: None, value: Call(Call { function: "stack_pop", parameters: [Ident("stack")] }) }
#       Call(Call { function: "stack_pop", parameters: [Ident("stack")] })
21 40 3c 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80c3c Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 4c 

# 80c3f AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Subtract, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80c45 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 4c 

# 80c48 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80c4e Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_te089 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80c51 AddImm32IgnoreCarry [Register(0x48), Constant32(0xffffffff=4294967295)]
#       inline_RpnCalc_handle_stack_pop_53_te089 <- inline_RpnCalc_handle_stack_pop_53_t14ab Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 48 ff ff ff ff 

# mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80c57 Store32_1 [Register(0x48), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 48 4c 

# 80c5a Store32_2 []
#       mem[inline_RpnCalc_handle_stack_pop_53_tc957] <- inline_RpnCalc_handle_stack_pop_53_te089 U32 Some('/lutcomp/programs/lib/Stack.j':(11,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Subtract, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_pop_53_t4bb9 <- inline_RpnCalc_handle_stack_pop_53_s U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\nIndex(\"values\", PtrFieldDeref(\"s\", \"first_free\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80c5b Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 4c 

# 80c5e AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_pop_53_tc957 <- inline_RpnCalc_handle_stack_pop_53_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80c64 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_t14ab <- mem[inline_RpnCalc_handle_stack_pop_53_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80c67 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 80c6d Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 48 00 48 

# 80c71 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 4a 00 

# 80c74 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_pop_53_tf659 <- inline_RpnCalc_handle_stack_pop_53_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 4b 00 

# inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80c77 ClearCarry []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 80c78 AddCarry32_1 [Register(0x3c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 3c 48 3c 

# 80c7c AddCarry32_2 []
#       inline_RpnCalc_handle_stack_pop_53_t100e <- inline_RpnCalc_handle_stack_pop_53_s Add Var(inline_RpnCalc_handle_stack_pop_53_tf659) Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Index("values", PtrFieldDeref("s", "first_free"))
# 80c7d Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_pop_53_t8e54 <- mem[inline_RpnCalc_handle_stack_pop_53_t100e] U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
#       Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
#       Index("values", PtrFieldDeref("s", "first_free"))
22 3c 3c 

# b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# optimized away noop copy Instruction { source: "b <- inline_RpnCalc_handle_stack_pop_53_t8e54 U32 Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))
# Return { value: Some(Index("values", PtrFieldDeref("s", "first_free"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop Some('/lutcomp/programs/lib/Stack.j':(13,5))\nReturn { value: Some(Index(\"values\", PtrFieldDeref(\"s\", \"first_free\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop)], resolved: None }
# :inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop None
# inline_RpnCalc_handle_stack_pop_53_function_end_stack_pop
# goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# 80c80 JmpImm [Label24(RpnCalc_handle_if_end_20)]
#       goto RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
70 84 0c 08 

# :RpnCalc_handle_if_else_0_22 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_else_0_22
# :RpnCalc_handle_if_end_20 Some('/lutcomp/programs/lib/rpnlib.j':(66,5))
# RpnCalc_handle_if_end_20
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }, [Assign { target: Ident(\"sum\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"sum\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }, [Assign { target: Ident(\"diff\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"b\"), Ident(\"a\")) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }, [Assign { target: Ident(\"product\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul32_32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"product\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }, [Assign { target: Ident(\"quotient\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"div32\", parameters: [Ident(\"b\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"quotient\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }, VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }]), (Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }, [Assign { target: Ident(\"i\"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 43) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t2597 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# Number(U8, 43)
# 80c84 LoadImm8 [Register(0x62), Constant8(0x2b=43)]
#       t2597 <- 0n43/0x2bu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
#       Number(U8, 43)
04 62 2b 

# if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
# 80c87 Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
15 44 62 

# 80c8a JzImm [Label24(RpnCalc_handle_if_true_0_24)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
72 92 0c 08 

# 80c8e JmpImm [Label24(RpnCalc_handle_if_else_0_25)]
#       if tdcd9 == t2597 then 'RpnCalc_handle_if_true_0_24' else 'RpnCalc_handle_if_else_0_25' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }
70 ef 0d 08 

# :RpnCalc_handle_if_true_0_24 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 43) }, [Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }, [Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }, [Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }, [Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }, VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }, [Return { value: Some(Number(U8, 0)) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }, [VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }]), (Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }, [Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }, While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }]), (Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }, [IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }])], else_block: [] }
# RpnCalc_handle_if_true_0_24
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# 80c92 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# 80c95 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 80c98 ClearCarry []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 80c99 AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 5c 48 5c 

# 80c9d AddCarry32_2 []
#       sum <- tace9 Add Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("sum"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("b"), Ident("a")) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# Ident("sum")
# 80c9e Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
#       Ident("sum")
21 5c 38 

# None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
# 80ca1 Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t670d None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 104, 105, 106, 107]
# 80ca4 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6b 

# 80ca6 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 6a 

# 80ca8 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 69 

# 80caa Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 68 

# 80cac Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 64 

# 80cae Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 60 

# 80cb0 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5f 

# 80cb2 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5e 

# 80cb4 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5d 

# 80cb6 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 5c 

# 80cb8 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 59 

# 80cba Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 58 

# 80cbc Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 57 

# 80cbe Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 56 

# 80cc0 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 55 

# 80cc2 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 54 

# 80cc4 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 53 

# 80cc6 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 52 

# 80cc8 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 51 

# 80cca Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 50 

# 80ccc Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4f 

# 80cce Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4e 

# 80cd0 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4d 

# 80cd2 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4c 

# 80cd4 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4b 

# 80cd6 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 4a 

# 80cd8 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 49 

# 80cda Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 48 

# 80cdc Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 45 

# 80cde Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 44 

# 80ce0 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 43 

# 80ce2 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 42 

# 80ce4 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 41 

# 80ce6 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 40 

# 80ce8 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3f 

# 80cea Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3e 

# 80cec Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3d 

# 80cee Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3c 

# 80cf0 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3b 

# 80cf2 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 3a 

# 80cf4 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 39 

# 80cf6 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
09 38 

# 80cf8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 80cfe StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 08 0d 08 00 

# 80d04 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 18 2b 08 

# 80d08 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 80d0e Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 38 

# 80d10 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 39 

# 80d12 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3a 

# 80d14 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3b 

# 80d16 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3c 

# 80d18 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3d 

# 80d1a Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3e 

# 80d1c Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 3f 

# 80d1e Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 40 

# 80d20 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 41 

# 80d22 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 42 

# 80d24 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 43 

# 80d26 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 44 

# 80d28 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 45 

# 80d2a Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 48 

# 80d2c Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 49 

# 80d2e Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4a 

# 80d30 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4b 

# 80d32 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4c 

# 80d34 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4d 

# 80d36 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4e 

# 80d38 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 4f 

# 80d3a Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 50 

# 80d3c Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 51 

# 80d3e Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 52 

# 80d40 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 53 

# 80d42 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 54 

# 80d44 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 55 

# 80d46 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 56 

# 80d48 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 57 

# 80d4a Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 58 

# 80d4c Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 59 

# 80d4e Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5c 

# 80d50 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5d 

# 80d52 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5e 

# 80d54 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 5f 

# 80d56 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 60 

# 80d58 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 64 

# 80d5a Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 68 

# 80d5c Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 69 

# 80d5e Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6a 

# 80d60 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t670d,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("sum")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("sum")] })
0a 6b 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 80d62 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 60 0a 

# inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# 80d65 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80d68 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_19_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80d6a LoadImm32 [Register(0x38), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_19_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 38 60 10 0f 00 

# inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80d70 Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_19_t76c7 <- mem[inline_RpnCalc_handle_putc_19_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_19_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 80d73 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_19_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_tb36e then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 80d76 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_tb36e then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 45 60 

# 80d79 JzImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_tb36e then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 9d 0d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_19_t76c7 != inline_RpnCalc_handle_putc_19_tb36e then 'inline_RpnCalc_handle_putc_19_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_19_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_19_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_19_putc_if_true_0_1
# inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
# 80d7d LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_19_tac13 <- inline_RpnCalc_handle_putc_19_c U8` with constant `inline_RpnCalc_handle_putc_19_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80d80 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_19_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_19_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80d83 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80d89 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 93 0d 08 00 

# 80d8f JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 80d93 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80d99 JmpImm [Label24(inline_RpnCalc_handle_putc_19_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 9d 0d 08 

# :inline_RpnCalc_handle_putc_19_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_19_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_19_putc_if_end_0
# goto inline_RpnCalc_handle_putc_19_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_19_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_19_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_19_function_end_putc None
# inline_RpnCalc_handle_putc_19_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# Ident("sum")
# 80d9d Copy32 [Register(0x5c), Register(0x38)]
#       t670d <- sum U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
#       Ident("sum")
21 5c 38 

# inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# 80da0 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_54_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("sum")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_n <- t670d U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"sum\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80da3 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 80da6 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80dac Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80daf LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 80db5 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 80db9 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 80dbc LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_54_tf659 <- inline_RpnCalc_handle_stack_push_54_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80dbf ClearCarry []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 80dc0 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 3c 40 40 

# 80dc4 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_54_t100e <- inline_RpnCalc_handle_stack_push_54_s Add Var(inline_RpnCalc_handle_stack_push_54_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80dc5 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 80dc8 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_t100e] <- inline_RpnCalc_handle_stack_push_54_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80dc9 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 80dcc AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_54_t4bb9 <- inline_RpnCalc_handle_stack_push_54_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80dd2 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 80dd5 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_54_tc957 <- inline_RpnCalc_handle_stack_push_54_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80ddb Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_54_t14ab <- mem[inline_RpnCalc_handle_stack_push_54_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80dde Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 80de1 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_54_td757 <- inline_RpnCalc_handle_stack_push_54_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80de7 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 5c 

# 80dea Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_54_tc957] <- inline_RpnCalc_handle_stack_push_54_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_54_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_54_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_54_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_54_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80deb JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_0_25 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_25
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 45) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t8b2f <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# Number(U8, 45)
# 80def LoadImm8 [Register(0x62), Constant8(0x2d=45)]
#       t8b2f <- 0n45/0x2du8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
#       Number(U8, 45)
04 62 2d 

# if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
# 80df2 Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
15 44 62 

# 80df5 JzImm [Label24(RpnCalc_handle_if_true_1_26)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
72 fd 0d 08 

# 80df9 JmpImm [Label24(RpnCalc_handle_if_else_1_27)]
#       if tdcd9 == t8b2f then 'RpnCalc_handle_if_true_1_26' else 'RpnCalc_handle_if_else_1_27' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 45) }
70 65 0f 08 

# :RpnCalc_handle_if_true_1_26 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_1_26
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("b")
# 80dfd Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# Ident("a")
# 80e00 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
#       Ident("a")
21 38 48 

# diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
# Arithmetic(Subtract, Ident("b"), Ident("a"))
# 80e03 Copy32 [Register(0x48), Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
21 48 00 

# 80e06 Invert8 [Register(0x00)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 00 

# 80e08 Invert8 [Register(0x01)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 01 

# 80e0a Invert8 [Register(0x02)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 02 

# 80e0c Invert8 [Register(0x03)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
01 03 

# 80e0e AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
32 00 01 00 00 00 

# 80e14 ClearCarry []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
03 

# 80e15 AddCarry32_1 [Register(0x5c), Register(0x00), Register(0x38)]
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
30 5c 00 38 

# 80e19 AddCarry32_2 []
#       diff <- tace9 Subtract Var(t8792) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("diff"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("b"), Ident("a")) }
#       Arithmetic(Subtract, Ident("b"), Ident("a"))
31 

# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
# 80e1a Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t17ee None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 104, 105, 106, 107]
# 80e1d Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6b 

# 80e1f Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 6a 

# 80e21 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 69 

# 80e23 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 68 

# 80e25 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 64 

# 80e27 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 60 

# 80e29 Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5f 

# 80e2b Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5e 

# 80e2d Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5d 

# 80e2f Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 5c 

# 80e31 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 59 

# 80e33 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 58 

# 80e35 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 57 

# 80e37 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 56 

# 80e39 Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 55 

# 80e3b Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 54 

# 80e3d Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 53 

# 80e3f Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 52 

# 80e41 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 51 

# 80e43 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 50 

# 80e45 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4f 

# 80e47 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4e 

# 80e49 Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4d 

# 80e4b Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4c 

# 80e4d Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4b 

# 80e4f Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 4a 

# 80e51 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 49 

# 80e53 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 48 

# 80e55 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 45 

# 80e57 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 44 

# 80e59 Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 43 

# 80e5b Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 42 

# 80e5d Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 41 

# 80e5f Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 40 

# 80e61 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3f 

# 80e63 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3e 

# 80e65 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3d 

# 80e67 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3c 

# 80e69 Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3b 

# 80e6b Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 3a 

# 80e6d Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 39 

# 80e6f Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
09 38 

# 80e71 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 80e77 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 81 0e 08 00 

# 80e7d JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 18 2b 08 

# 80e81 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 80e87 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 38 

# 80e89 Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 39 

# 80e8b Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3a 

# 80e8d Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3b 

# 80e8f Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3c 

# 80e91 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3d 

# 80e93 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3e 

# 80e95 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 3f 

# 80e97 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 40 

# 80e99 Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 41 

# 80e9b Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 42 

# 80e9d Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 43 

# 80e9f Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 44 

# 80ea1 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 45 

# 80ea3 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 48 

# 80ea5 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 49 

# 80ea7 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4a 

# 80ea9 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4b 

# 80eab Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4c 

# 80ead Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4d 

# 80eaf Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4e 

# 80eb1 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 4f 

# 80eb3 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 50 

# 80eb5 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 51 

# 80eb7 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 52 

# 80eb9 Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 53 

# 80ebb Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 54 

# 80ebd Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 55 

# 80ebf Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 56 

# 80ec1 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 57 

# 80ec3 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 58 

# 80ec5 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 59 

# 80ec7 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5c 

# 80ec9 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5d 

# 80ecb Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5e 

# 80ecd Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 5f 

# 80ecf Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 60 

# 80ed1 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 64 

# 80ed3 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 68 

# 80ed5 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 69 

# 80ed7 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6a 

# 80ed9 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t17ee,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("diff")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("diff")] })
0a 6b 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 80edb LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 60 0a 

# inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# 80ede LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 80ee1 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_20_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80ee3 LoadImm32 [Register(0x3c), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_20_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 60 10 0f 00 

# inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 80ee9 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_20_t76c7 <- mem[inline_RpnCalc_handle_putc_20_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 60 

# inline_RpnCalc_handle_putc_20_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 80eec LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_20_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 44 00 

# if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_tb36e then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 80eef Cmp8 [Register(0x60), Register(0x44)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_tb36e then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 60 44 

# 80ef2 JzImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_tb36e then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 16 0f 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_20_t76c7 != inline_RpnCalc_handle_putc_20_tb36e then 'inline_RpnCalc_handle_putc_20_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_20_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_20_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_20_putc_if_true_0_1
# inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
# 80ef6 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_20_tac13 <- inline_RpnCalc_handle_putc_20_c U8` with constant `inline_RpnCalc_handle_putc_20_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 80ef9 Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_20_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_20_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 80efc AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 80f02 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 0c 0f 08 00 

# 80f08 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 80f0c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 80f12 JmpImm [Label24(inline_RpnCalc_handle_putc_20_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 16 0f 08 

# :inline_RpnCalc_handle_putc_20_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_20_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_20_putc_if_end_0
# goto inline_RpnCalc_handle_putc_20_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_20_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_20_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_20_function_end_putc None
# inline_RpnCalc_handle_putc_20_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# Ident("diff")
# optimized away noop copy Instruction { source: "t17ee <- diff U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\nIdent(\"diff\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# 80f16 Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_55_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("diff")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_n <- t17ee U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"diff\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80f19 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 80f1c AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 80f22 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 80f25 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 80f2b Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 80f2f LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 80f32 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_55_tf659 <- inline_RpnCalc_handle_stack_push_55_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 80f35 ClearCarry []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 80f36 AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 3c 40 40 

# 80f3a AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_55_t100e <- inline_RpnCalc_handle_stack_push_55_s Add Var(inline_RpnCalc_handle_stack_push_55_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 80f3b Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 80f3e Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_t100e] <- inline_RpnCalc_handle_stack_push_55_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80f3f Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 80f42 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_55_t4bb9 <- inline_RpnCalc_handle_stack_push_55_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 80f48 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 80f4b AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_55_tc957 <- inline_RpnCalc_handle_stack_push_55_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 80f51 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_55_t14ab <- mem[inline_RpnCalc_handle_stack_push_55_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 80f54 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 80f57 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_55_td757 <- inline_RpnCalc_handle_stack_push_55_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 80f5d Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 5c 

# 80f60 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_55_tc957] <- inline_RpnCalc_handle_stack_push_55_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_55_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_55_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_55_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_55_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 80f61 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_1_27 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_1_27
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 42) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t969e <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# Number(U8, 42)
# 80f65 LoadImm8 [Register(0x62), Constant8(0x2a=42)]
#       t969e <- 0n42/0x2au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
#       Number(U8, 42)
04 62 2a 

# if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
# 80f68 Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
15 44 62 

# 80f6b JzImm [Label24(RpnCalc_handle_if_true_2_28)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
72 73 0f 08 

# 80f6f JmpImm [Label24(RpnCalc_handle_if_else_2_29)]
#       if tdcd9 == t969e then 'RpnCalc_handle_if_true_2_28' else 'RpnCalc_handle_if_else_2_29' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 42) }
70 0d 13 08 

# :RpnCalc_handle_if_true_2_28 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_2_28
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 80f73 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 80f76 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f79 Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 5c 38 

# inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
# 80f7c Copy32 [Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_b <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("product"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "mul32_32", parameters: [Ident("b"), Ident("a")] })
21 48 5c 

# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(30,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f7f Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 80f82 Copy32 [Register(0x5c), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(30,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 5c 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 80f85 Mul8_16 [Register(0x3c), Register(0x48), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 48 4c 

# 80f89 LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 80f8c LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 80f8f Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 80f92 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 80f98 Copy8 [Register(0x60), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 60 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 80f9b Copy8 [Register(0x49), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 49 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 80f9e LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 80fa4 Copy8 [Register(0x62), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 62 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 80fa7 Mul8_16 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 54 50 50 

# 80fab LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 80fae LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 80fb1 Copy8 [Register(0x51), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 51 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 80fb4 Copy8 [Register(0x59), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 59 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 80fb7 Copy8 [Register(0x50), Register(0x59)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 50 59 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 80fba Copy8 [Register(0x59), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 59 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80fbd LoadImm8 [Register(0x63), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 63 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 80fc0 Copy8 [Register(0x63), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 63 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 80fc3 LoadImm8 [Register(0x63), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 63 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 80fc6 Copy8 [Register(0x63), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 63 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 80fc9 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 80fca AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 

# 80fce AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 80fcf Copy8 [Register(0x49), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 49 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 80fd2 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 80fd8 Copy8 [Register(0x62), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 62 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 80fdb Mul8_16 [Register(0x3c), Register(0x50), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 3c 50 50 

# 80fdf LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 80fe2 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 80fe5 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 80fe8 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 80fee Copy8 [Register(0x60), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 60 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 80ff1 Mul8_16 [Register(0x54), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 54 48 3c 

# 80ff5 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3e 00 

# 80ff8 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 80ffb Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 80ffe ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 80fff AddCarry32_1 [Register(0x48), Register(0x3c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 3c 50 

# 81003 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 81004 Copy8 [Register(0x52), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 52 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 81007 Copy8 [Register(0x60), Register(0x53)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 60 53 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 8100a Copy8 [Register(0x51), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 51 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 8100d Copy8 [Register(0x60), Register(0x52)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 60 52 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 81010 Copy8 [Register(0x50), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 50 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 81013 Copy8 [Register(0x60), Register(0x51)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 60 51 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81016 LoadImm8 [Register(0x63), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 63 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81019 Copy8 [Register(0x63), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 63 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8101c Copy32 [Register(0x50), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8101f ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 81020 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 48 3c 

# 81024 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 81025 Copy32 [Register(0x3c), Register(0x4c)]
#       inline_RpnCalc_handle_mul32_32_12_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 4c 

# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_5_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81028 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(32,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# Index("a", Number(U8, 3))
# 8102e Copy8 [Register(0x3b), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t5b7c <- inline_RpnCalc_handle_mul32_32_12_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
#       Index("a", Number(U8, 3))
0b 3b 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# 81031 Copy8 [Register(0x45), Register(0x3d)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t5b7c U8 Some('/lutcomp/programs/lib/mul.j':(33,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
0b 45 3d 

# inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# Index("a", Number(U8, 2))
# 81034 Copy8 [Register(0x3a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_t577f <- inline_RpnCalc_handle_mul32_32_12_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
#       Index("a", Number(U8, 2))
0b 3a 45 

# inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# 81037 Copy8 [Register(0x45), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_a_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t577f U8 Some('/lutcomp/programs/lib/mul.j':(34,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
0b 45 3c 

# inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 8103a LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(36,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 48 00 00 00 00 

# inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# Index("b", Number(U8, 3))
# 81040 Copy8 [Register(0x5f), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_t9829 <- inline_RpnCalc_handle_mul32_32_12_b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
#       Index("b", Number(U8, 3))
0b 5f 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# 81043 Copy8 [Register(0x44), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_t9829 U8 Some('/lutcomp/programs/lib/mul.j':(37,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
0b 44 49 

# inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# Index("b", Number(U8, 2))
# 81046 Copy8 [Register(0x5e), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_t811a <- inline_RpnCalc_handle_mul32_32_12_b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
#       Index("b", Number(U8, 2))
0b 5e 44 

# inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# 81049 Copy8 [Register(0x44), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_b_hi[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_t811a U8 Some('/lutcomp/programs/lib/mul.j':(38,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
0b 44 48 

# inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8fbd <- inline_RpnCalc_handle_mul32_32_12_a_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tace9 <- inline_RpnCalc_handle_mul32_32_12_b U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a <- inline_RpnCalc_handle_mul32_32_12_t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b <- inline_RpnCalc_handle_mul32_32_12_tace9 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 8104c Mul8_16 [Register(0x3c), Register(0x5c), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 3c 5c 50 

# 81050 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 52 00 

# 81053 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 53 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 81056 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 81059 LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 68 00 00 00 00 

# 8105f Copy8 [Register(0x60), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 60 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 81062 Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 81065 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 54 00 00 00 00 

# 8106b Copy8 [Register(0x44), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 44 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 8106e Mul8_16 [Register(0x68), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 68 54 54 

# 81072 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 56 00 

# 81075 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 81078 Copy8 [Register(0x55), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 55 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 8107b Copy8 [Register(0x63), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 63 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 8107e Copy8 [Register(0x54), Register(0x63)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 54 63 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 81081 Copy8 [Register(0x63), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 63 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81084 LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 81087 Copy8 [Register(0x64), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 64 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8108a LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 8108d Copy8 [Register(0x64), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 64 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x54), Register(0x54)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 81090 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 81091 AddCarry32_1 [Register(0x50), Register(0x54), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 50 54 50 

# 81095 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 81096 Copy8 [Register(0x5d), Register(0x44)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 5d 44 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 81099 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 54 00 00 00 00 

# 8109f Copy8 [Register(0x44), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 44 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 810a2 Mul8_16 [Register(0x3c), Register(0x54), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 3c 54 54 

# 810a6 LoadImm8 [Register(0x56), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 56 00 

# 810a9 LoadImm8 [Register(0x57), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 57 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 810ac Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 810af LoadImm32 [Register(0x68), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 68 00 00 00 00 

# 810b5 Copy8 [Register(0x60), Register(0x68)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 60 68 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 810b8 Mul8_16 [Register(0x68), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 68 5c 3c 

# 810bc LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3e 00 

# 810bf LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 810c2 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 54 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 810c5 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 810c6 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 5c 3c 54 

# 810ca AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 810cb Copy8 [Register(0x56), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 56 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 810ce Copy8 [Register(0x60), Register(0x57)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 60 57 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 810d1 Copy8 [Register(0x55), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 55 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 810d4 Copy8 [Register(0x60), Register(0x56)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 60 56 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 810d7 Copy8 [Register(0x54), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 54 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 810da Copy8 [Register(0x60), Register(0x55)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 60 55 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 810dd LoadImm8 [Register(0x64), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 64 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 810e0 Copy8 [Register(0x64), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 64 54 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 810e3 Copy32 [Register(0x54), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 54 5c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 810e6 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 810e7 AddCarry32_1 [Register(0x50), Register(0x5c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 50 5c 3c 

# 810eb AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 810ec Copy32 [Register(0x3c), Register(0x54)]
#       inline_RpnCalc_handle_mul32_32_12_t6afc <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 3c 54 

# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_6_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t8792 <- inline_RpnCalc_handle_mul32_32_12_a U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# 810ef Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_t5cca <- inline_RpnCalc_handle_mul32_32_12_b_hi U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
#       Ident("b_hi")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a <- inline_RpnCalc_handle_mul32_32_12_t8792 U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b <- inline_RpnCalc_handle_mul32_32_12_t5cca U32 Some('/lutcomp/programs/lib/mul.j':(40,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })) }\nArithmetic(Add, Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }), Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }))\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 810f2 Mul8_16 [Register(0x38), Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 38 3c 5c 

# 810f6 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5e 00 

# 810f9 LoadImm8 [Register(0x5f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 5f 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 810fc Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 810ff LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 50 00 00 00 00 

# 81105 Copy8 [Register(0x45), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 45 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 81108 Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 8110b LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 48 00 00 00 00 

# 81111 Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 81114 Mul8_16 [Register(0x50), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 50 48 48 

# 81118 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4a 00 

# 8111b LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 8111e Copy8 [Register(0x49), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 49 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 81121 Copy8 [Register(0x62), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 62 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 81124 Copy8 [Register(0x48), Register(0x62)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 48 62 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 81127 Copy8 [Register(0x62), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 62 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8112a LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 8112d Copy8 [Register(0x59), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 59 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81130 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81133 Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 81136 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 81137 AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x5c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 5c 48 5c 

# 8113b AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 8113c Copy8 [Register(0x3d), Register(0x60)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 3d 60 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 8113f LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 48 00 00 00 00 

# 81145 Copy8 [Register(0x60), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8 U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 60 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 81148 Mul8_16 [Register(0x38), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 38 48 48 

# 8114c LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4a 00 

# 8114f LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t8792 Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 81152 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 81155 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 50 00 00 00 00 

# 8115b Copy8 [Register(0x45), Register(0x50)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a U32 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 45 50 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 8115e Mul8_16 [Register(0x50), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 50 3c 38 

# 81162 LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3a 00 

# 81165 LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tff1a Multiply Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 3b 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81168 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 8116b ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 8116c AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 3c 38 48 

# 81170 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 81171 Copy8 [Register(0x4a), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 4a 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 81174 Copy8 [Register(0x45), Register(0x4b)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 45 4b 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 81177 Copy8 [Register(0x49), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 49 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 8117a Copy8 [Register(0x45), Register(0x4a)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 45 4a 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 8117d Copy8 [Register(0x48), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 48 45 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 81180 Copy8 [Register(0x45), Register(0x49)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 45 49 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81183 LoadImm8 [Register(0x59), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 59 00 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81186 Copy8 [Register(0x59), Register(0x48)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 59 48 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 81189 Copy32 [Register(0x48), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5 <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 48 3c 

# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 8118c ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 8118d AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 5c 3c 38 

# 81191 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_tbe0a <- inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32 None
# inline_RpnCalc_handle_mul32_32_12_inline_mul32_32_mul16_32_7_function_end_mul16_32
# inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
# Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
# 81192 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
03 

# 81193 AddCarry32_1 [Register(0x54), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
30 54 38 38 

# 81197 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_d <- inline_RpnCalc_handle_mul32_32_12_t6afc Add Var(inline_RpnCalc_handle_mul32_32_12_tbe0a) Some('/lutcomp/programs/lib/mul.j':(40,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })) }
#       Arithmetic(Add, Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }), Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }))
31 

# inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 81198 Copy8 [Register(0x39), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_tbd6 <- inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 39 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
# 8119b Copy8 [Register(0x45), Register(0x3b)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x03..0x04] <- inline_RpnCalc_handle_mul32_32_12_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(41,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 45 3b 

# inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 8119e Copy8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_mul32_32_12_tac23 <- inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 38 45 

# inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
# 811a1 Copy8 [Register(0x45), Register(0x3a)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x02..0x03] <- inline_RpnCalc_handle_mul32_32_12_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(42,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 45 3a 

# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 811a4 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 811a7 Copy8 [Register(0x60), Register(0x39)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x01..0x02] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(43,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 60 39 

# inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 811aa LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_mul32_32_12_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 811ad Copy8 [Register(0x60), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_d[0x00..0x01] <- inline_RpnCalc_handle_mul32_32_12_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(44,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 60 38 

# inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# 811b0 Copy32 [Register(0x4c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_32_12_tac13 <- inline_RpnCalc_handle_mul32_32_12_c U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("c")
21 4c 3c 

# inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_32_12_t45f5 <- inline_RpnCalc_handle_mul32_32_12_d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"d\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 811b3 ClearCarry []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 811b4 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 3c 38 38 

# 811b8 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_32_12_ta65d <- inline_RpnCalc_handle_mul32_32_12_tac13 Add Var(inline_RpnCalc_handle_mul32_32_12_t45f5) Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 811b9 Copy32 [Register(0x38), Register(0x5c)]
#       product <- inline_RpnCalc_handle_mul32_32_12_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(45,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 38 5c 

# goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/lutcomp/programs/lib/mul.j':(45,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 Some('/lutcomp/programs/lib/mul.j':(45,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32)], resolved: None }
# :inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32 None
# inline_RpnCalc_handle_mul32_32_12_function_end_mul32_32
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# Ident("product")
# 811bc Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
#       Ident("product")
21 5c 38 

# None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("product")] })
# 811bf Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t2754 None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 104, 105, 106, 107]
# 811c2 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6b 

# 811c4 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 6a 

# 811c6 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 69 

# 811c8 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 68 

# 811ca Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 64 

# 811cc Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 60 

# 811ce Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5f 

# 811d0 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5e 

# 811d2 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5d 

# 811d4 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 5c 

# 811d6 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 59 

# 811d8 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 58 

# 811da Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 57 

# 811dc Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 56 

# 811de Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 55 

# 811e0 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 54 

# 811e2 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 53 

# 811e4 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 52 

# 811e6 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 51 

# 811e8 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 50 

# 811ea Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4f 

# 811ec Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4e 

# 811ee Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4d 

# 811f0 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4c 

# 811f2 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4b 

# 811f4 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 4a 

# 811f6 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 49 

# 811f8 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 48 

# 811fa Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 45 

# 811fc Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 44 

# 811fe Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 43 

# 81200 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 42 

# 81202 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 41 

# 81204 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 40 

# 81206 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3f 

# 81208 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3e 

# 8120a Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3d 

# 8120c Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3c 

# 8120e Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3b 

# 81210 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 3a 

# 81212 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 39 

# 81214 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
09 38 

# 81216 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 8121c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 26 12 08 00 

# 81222 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 18 2b 08 

# 81226 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 8122c Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 38 

# 8122e Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 39 

# 81230 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3a 

# 81232 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3b 

# 81234 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3c 

# 81236 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3d 

# 81238 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3e 

# 8123a Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 3f 

# 8123c Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 40 

# 8123e Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 41 

# 81240 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 42 

# 81242 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 43 

# 81244 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 44 

# 81246 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 45 

# 81248 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 48 

# 8124a Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 49 

# 8124c Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4a 

# 8124e Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4b 

# 81250 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4c 

# 81252 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4d 

# 81254 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4e 

# 81256 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 4f 

# 81258 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 50 

# 8125a Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 51 

# 8125c Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 52 

# 8125e Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 53 

# 81260 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 54 

# 81262 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 55 

# 81264 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 56 

# 81266 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 57 

# 81268 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 58 

# 8126a Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 59 

# 8126c Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5c 

# 8126e Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5d 

# 81270 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5e 

# 81272 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 5f 

# 81274 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 60 

# 81276 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 64 

# 81278 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 68 

# 8127a Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 69 

# 8127c Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6a 

# 8127e Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t2754,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("product")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("product")] })
0a 6b 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 81280 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 60 0a 

# inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# 81283 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 81286 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_21_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 81288 LoadImm32 [Register(0x38), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_21_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 38 60 10 0f 00 

# inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 8128e Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_21_t76c7 <- mem[inline_RpnCalc_handle_putc_21_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_21_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 81291 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_21_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_tb36e then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 81294 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_tb36e then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 45 60 

# 81297 JzImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_tb36e then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 bb 12 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_21_t76c7 != inline_RpnCalc_handle_putc_21_tb36e then 'inline_RpnCalc_handle_putc_21_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_21_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_21_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_21_putc_if_true_0_1
# inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
# 8129b LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_21_tac13 <- inline_RpnCalc_handle_putc_21_c U8` with constant `inline_RpnCalc_handle_putc_21_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8129e Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_21_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_21_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 812a1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 812a7 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c b1 12 08 00 

# 812ad JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 812b1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 812b7 JmpImm [Label24(inline_RpnCalc_handle_putc_21_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 bb 12 08 

# :inline_RpnCalc_handle_putc_21_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_21_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_21_putc_if_end_0
# goto inline_RpnCalc_handle_putc_21_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_21_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_21_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_21_function_end_putc None
# inline_RpnCalc_handle_putc_21_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# Ident("product")
# 812bb Copy32 [Register(0x5c), Register(0x38)]
#       t2754 <- product U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
#       Ident("product")
21 5c 38 

# inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# 812be Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_56_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("product")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_n <- t2754 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"product\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 812c1 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 812c4 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 812ca Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 812cd LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 812d3 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 812d7 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 812da LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_56_tf659 <- inline_RpnCalc_handle_stack_push_56_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 812dd ClearCarry []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 812de AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 3c 40 40 

# 812e2 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_56_t100e <- inline_RpnCalc_handle_stack_push_56_s Add Var(inline_RpnCalc_handle_stack_push_56_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 812e3 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 812e6 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_t100e] <- inline_RpnCalc_handle_stack_push_56_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 812e7 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 812ea AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_56_t4bb9 <- inline_RpnCalc_handle_stack_push_56_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 812f0 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 812f3 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_56_tc957 <- inline_RpnCalc_handle_stack_push_56_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 812f9 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_56_t14ab <- mem[inline_RpnCalc_handle_stack_push_56_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 812fc Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 812ff AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_56_td757 <- inline_RpnCalc_handle_stack_push_56_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 81305 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 5c 

# 81308 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_56_tc957] <- inline_RpnCalc_handle_stack_push_56_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_56_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_56_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_56_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_56_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81309 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_2_29 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_2_29
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 47) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# te668 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# Number(U8, 47)
# 8130d LoadImm8 [Register(0x62), Constant8(0x2f=47)]
#       te668 <- 0n47/0x2fu8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
#       Number(U8, 47)
04 62 2f 

# if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
# 81310 Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
15 44 62 

# 81313 JzImm [Label24(RpnCalc_handle_if_true_3_30)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
72 1b 13 08 

# 81317 JmpImm [Label24(RpnCalc_handle_if_else_3_31)]
#       if tdcd9 == te668 then 'RpnCalc_handle_if_true_3_30' else 'RpnCalc_handle_if_else_3_31' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 47) }
70 39 15 08 

# :RpnCalc_handle_if_true_3_30 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_3_30
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("b")
# 8131b Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("b")
21 3c 5c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# Ident("a")
# 8131e Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
#       Ident("a")
21 38 48 

# Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
# Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
# 81321 Copy32 [Register(0x5c), Register(0x00)]
#       Arg0[a]=tace9 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 5c 00 

# 81324 Copy32 [Register(0x48), Register(0x04)]
#       Arg1[b]=t8792 Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 48 04 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 104, 105, 106, 107]
# 81327 Push8 [Register(0x6b)]
#       Saving reg0x6b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6b 

# 81329 Push8 [Register(0x6a)]
#       Saving reg0x6a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 6a 

# 8132b Push8 [Register(0x69)]
#       Saving reg0x69 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 69 

# 8132d Push8 [Register(0x68)]
#       Saving reg0x68 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 68 

# 8132f Push8 [Register(0x64)]
#       Saving reg0x64 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 64 

# 81331 Push8 [Register(0x60)]
#       Saving reg0x60 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 60 

# 81333 Push8 [Register(0x5f)]
#       Saving reg0x5f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5f 

# 81335 Push8 [Register(0x5e)]
#       Saving reg0x5e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5e 

# 81337 Push8 [Register(0x5d)]
#       Saving reg0x5d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5d 

# 81339 Push8 [Register(0x5c)]
#       Saving reg0x5c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 5c 

# 8133b Push8 [Register(0x59)]
#       Saving reg0x59 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 59 

# 8133d Push8 [Register(0x58)]
#       Saving reg0x58 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 58 

# 8133f Push8 [Register(0x57)]
#       Saving reg0x57 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 57 

# 81341 Push8 [Register(0x56)]
#       Saving reg0x56 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 56 

# 81343 Push8 [Register(0x55)]
#       Saving reg0x55 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 55 

# 81345 Push8 [Register(0x54)]
#       Saving reg0x54 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 54 

# 81347 Push8 [Register(0x53)]
#       Saving reg0x53 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 53 

# 81349 Push8 [Register(0x52)]
#       Saving reg0x52 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 52 

# 8134b Push8 [Register(0x51)]
#       Saving reg0x51 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 51 

# 8134d Push8 [Register(0x50)]
#       Saving reg0x50 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 50 

# 8134f Push8 [Register(0x4f)]
#       Saving reg0x4f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4f 

# 81351 Push8 [Register(0x4e)]
#       Saving reg0x4e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4e 

# 81353 Push8 [Register(0x4d)]
#       Saving reg0x4d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4d 

# 81355 Push8 [Register(0x4c)]
#       Saving reg0x4c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4c 

# 81357 Push8 [Register(0x4b)]
#       Saving reg0x4b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4b 

# 81359 Push8 [Register(0x4a)]
#       Saving reg0x4a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 4a 

# 8135b Push8 [Register(0x49)]
#       Saving reg0x49 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 49 

# 8135d Push8 [Register(0x48)]
#       Saving reg0x48 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 48 

# 8135f Push8 [Register(0x45)]
#       Saving reg0x45 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 45 

# 81361 Push8 [Register(0x44)]
#       Saving reg0x44 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 44 

# 81363 Push8 [Register(0x43)]
#       Saving reg0x43 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 43 

# 81365 Push8 [Register(0x42)]
#       Saving reg0x42 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 42 

# 81367 Push8 [Register(0x41)]
#       Saving reg0x41 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 41 

# 81369 Push8 [Register(0x40)]
#       Saving reg0x40 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 40 

# 8136b Push8 [Register(0x3f)]
#       Saving reg0x3f before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3f 

# 8136d Push8 [Register(0x3e)]
#       Saving reg0x3e before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3e 

# 8136f Push8 [Register(0x3d)]
#       Saving reg0x3d before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3d 

# 81371 Push8 [Register(0x3c)]
#       Saving reg0x3c before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3c 

# 81373 Push8 [Register(0x3b)]
#       Saving reg0x3b before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3b 

# 81375 Push8 [Register(0x3a)]
#       Saving reg0x3a before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 3a 

# 81377 Push8 [Register(0x39)]
#       Saving reg0x39 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 39 

# 81379 Push8 [Register(0x38)]
#       Saving reg0x38 before Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
09 38 

# 8137b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:div32))
32 0c fc ff ff ff 

# 81381 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:div32))
25 0c 8b 13 08 00 

# 81387 JmpImm [Label24(:div32)]
#       PseudoCall(Label24(:div32))
70 bf 1b 08 

# 8138b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:div32))
32 0c 04 00 00 00 

# 81391 Pop8 [Register(0x38)]
#       Restoring reg0x38 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 38 

# 81393 Pop8 [Register(0x39)]
#       Restoring reg0x39 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 39 

# 81395 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3a 

# 81397 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3b 

# 81399 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3c 

# 8139b Pop8 [Register(0x3d)]
#       Restoring reg0x3d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3d 

# 8139d Pop8 [Register(0x3e)]
#       Restoring reg0x3e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3e 

# 8139f Pop8 [Register(0x3f)]
#       Restoring reg0x3f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 3f 

# 813a1 Pop8 [Register(0x40)]
#       Restoring reg0x40 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 40 

# 813a3 Pop8 [Register(0x41)]
#       Restoring reg0x41 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 41 

# 813a5 Pop8 [Register(0x42)]
#       Restoring reg0x42 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 42 

# 813a7 Pop8 [Register(0x43)]
#       Restoring reg0x43 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 43 

# 813a9 Pop8 [Register(0x44)]
#       Restoring reg0x44 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 44 

# 813ab Pop8 [Register(0x45)]
#       Restoring reg0x45 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 45 

# 813ad Pop8 [Register(0x48)]
#       Restoring reg0x48 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 48 

# 813af Pop8 [Register(0x49)]
#       Restoring reg0x49 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 49 

# 813b1 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4a 

# 813b3 Pop8 [Register(0x4b)]
#       Restoring reg0x4b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4b 

# 813b5 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4c 

# 813b7 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4d 

# 813b9 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4e 

# 813bb Pop8 [Register(0x4f)]
#       Restoring reg0x4f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 4f 

# 813bd Pop8 [Register(0x50)]
#       Restoring reg0x50 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 50 

# 813bf Pop8 [Register(0x51)]
#       Restoring reg0x51 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 51 

# 813c1 Pop8 [Register(0x52)]
#       Restoring reg0x52 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 52 

# 813c3 Pop8 [Register(0x53)]
#       Restoring reg0x53 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 53 

# 813c5 Pop8 [Register(0x54)]
#       Restoring reg0x54 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 54 

# 813c7 Pop8 [Register(0x55)]
#       Restoring reg0x55 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 55 

# 813c9 Pop8 [Register(0x56)]
#       Restoring reg0x56 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 56 

# 813cb Pop8 [Register(0x57)]
#       Restoring reg0x57 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 57 

# 813cd Pop8 [Register(0x58)]
#       Restoring reg0x58 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 58 

# 813cf Pop8 [Register(0x59)]
#       Restoring reg0x59 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 59 

# 813d1 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5c 

# 813d3 Pop8 [Register(0x5d)]
#       Restoring reg0x5d after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5d 

# 813d5 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5e 

# 813d7 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 5f 

# 813d9 Pop8 [Register(0x60)]
#       Restoring reg0x60 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 60 

# 813db Pop8 [Register(0x64)]
#       Restoring reg0x64 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 64 

# 813dd Pop8 [Register(0x68)]
#       Restoring reg0x68 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 68 

# 813df Pop8 [Register(0x69)]
#       Restoring reg0x69 after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 69 

# 813e1 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6a 

# 813e3 Pop8 [Register(0x6b)]
#       Restoring reg0x6b after Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
0a 6b 

# 813e5 Copy32 [Register(0x00), Register(0x5c)]
#       Some(quotient) <= call div32(tace9,t8792,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("quotient"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] }) }
#       Call(Call { function: "div32", parameters: [Ident("b"), Ident("a")] })
21 00 5c 

# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# Ident("quotient")
# 813e8 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
# 813eb Copy32 [Register(0x38), Register(0x00)]
#       Arg0[a]=t1ba9 None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
21 38 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 104, 105, 106, 107]
# 813ee Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6b 

# 813f0 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 6a 

# 813f2 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 69 

# 813f4 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 68 

# 813f6 Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 64 

# 813f8 Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 60 

# 813fa Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5f 

# 813fc Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5e 

# 813fe Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5d 

# 81400 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 5c 

# 81402 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 59 

# 81404 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 58 

# 81406 Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 57 

# 81408 Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 56 

# 8140a Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 55 

# 8140c Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 54 

# 8140e Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 53 

# 81410 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 52 

# 81412 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 51 

# 81414 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 50 

# 81416 Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4f 

# 81418 Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4e 

# 8141a Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4d 

# 8141c Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4c 

# 8141e Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4b 

# 81420 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 4a 

# 81422 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 49 

# 81424 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 48 

# 81426 Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 45 

# 81428 Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 44 

# 8142a Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 43 

# 8142c Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 42 

# 8142e Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 41 

# 81430 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 40 

# 81432 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3f 

# 81434 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3e 

# 81436 Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3d 

# 81438 Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3c 

# 8143a Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3b 

# 8143c Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 3a 

# 8143e Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 39 

# 81440 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
09 38 

# 81442 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 81448 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 52 14 08 00 

# 8144e JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 18 2b 08 

# 81452 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 81458 Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 38 

# 8145a Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 39 

# 8145c Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3a 

# 8145e Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3b 

# 81460 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3c 

# 81462 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3d 

# 81464 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3e 

# 81466 Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 3f 

# 81468 Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 40 

# 8146a Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 41 

# 8146c Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 42 

# 8146e Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 43 

# 81470 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 44 

# 81472 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 45 

# 81474 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 48 

# 81476 Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 49 

# 81478 Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4a 

# 8147a Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4b 

# 8147c Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4c 

# 8147e Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4d 

# 81480 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4e 

# 81482 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 4f 

# 81484 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 50 

# 81486 Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 51 

# 81488 Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 52 

# 8148a Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 53 

# 8148c Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 54 

# 8148e Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 55 

# 81490 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 56 

# 81492 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 57 

# 81494 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 58 

# 81496 Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 59 

# 81498 Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5c 

# 8149a Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5d 

# 8149c Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5e 

# 8149e Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 5f 

# 814a0 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 60 

# 814a2 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 64 

# 814a4 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 68 

# 814a6 Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 69 

# 814a8 Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6a 

# 814aa Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(t1ba9,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("quotient")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("quotient")] })
0a 6b 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 814ac LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 60 0a 

# inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# 814af LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 814b2 Out0 [Register(0x45)]
#       IoWrite0
68 45 

# inline_RpnCalc_handle_putc_22_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 814b4 LoadImm32 [Register(0x38), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_22_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 38 60 10 0f 00 

# inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 814ba Load8 [Register(0x38), Register(0x45)]
#       inline_RpnCalc_handle_putc_22_t76c7 <- mem[inline_RpnCalc_handle_putc_22_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 38 45 

# inline_RpnCalc_handle_putc_22_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 814bd LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_22_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_tb36e then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 814c0 Cmp8 [Register(0x45), Register(0x60)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_tb36e then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 45 60 

# 814c3 JzImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_tb36e then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 e7 14 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_22_t76c7 != inline_RpnCalc_handle_putc_22_tb36e then 'inline_RpnCalc_handle_putc_22_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_22_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_22_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_22_putc_if_true_0_1
# inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
# 814c7 LoadImm8 [Register(0x45), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_22_tac13 <- inline_RpnCalc_handle_putc_22_c U8` with constant `inline_RpnCalc_handle_putc_22_tac13 <- 0n10/0x0au8 `.
04 45 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 814ca Copy8 [Register(0x45), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_22_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_22_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 814cd AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 814d3 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c dd 14 08 00 

# 814d9 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 814dd AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 814e3 JmpImm [Label24(inline_RpnCalc_handle_putc_22_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 e7 14 08 

# :inline_RpnCalc_handle_putc_22_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_22_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_22_putc_if_end_0
# goto inline_RpnCalc_handle_putc_22_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_22_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_22_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_22_function_end_putc None
# inline_RpnCalc_handle_putc_22_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# Ident("quotient")
# 814e7 Copy32 [Register(0x5c), Register(0x38)]
#       t1ba9 <- quotient U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
#       Ident("quotient")
21 5c 38 

# inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# 814ea Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_57_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("quotient")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_n <- t1ba9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"quotient\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 814ed Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 814f0 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 814f6 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 814f9 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 814ff Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 81503 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 81506 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_57_tf659 <- inline_RpnCalc_handle_stack_push_57_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 81509 ClearCarry []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 8150a AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 3c 40 40 

# 8150e AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_57_t100e <- inline_RpnCalc_handle_stack_push_57_s Add Var(inline_RpnCalc_handle_stack_push_57_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8150f Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 81512 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_t100e] <- inline_RpnCalc_handle_stack_push_57_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81513 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 81516 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_57_t4bb9 <- inline_RpnCalc_handle_stack_push_57_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 8151c Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 8151f AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_57_tc957 <- inline_RpnCalc_handle_stack_push_57_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 81525 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_57_t14ab <- mem[inline_RpnCalc_handle_stack_push_57_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 81528 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 8152b AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_57_td757 <- inline_RpnCalc_handle_stack_push_57_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 81531 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 5c 

# 81534 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_57_tc957] <- inline_RpnCalc_handle_stack_push_57_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_57_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_57_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_57_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_57_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81535 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_3_31 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_3_31
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 115) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t39b5 <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# Number(U8, 115)
# 81539 LoadImm8 [Register(0x62), Constant8(0x73=115)]
#       t39b5 <- 0n115/0x73u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
#       Number(U8, 115)
04 62 73 

# if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
# 8153c Cmp8 [Register(0x44), Register(0x62)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
15 44 62 

# 8153f JzImm [Label24(RpnCalc_handle_if_true_4_32)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
72 47 15 08 

# 81543 JmpImm [Label24(RpnCalc_handle_if_else_4_33)]
#       if tdcd9 == t39b5 then 'RpnCalc_handle_if_true_4_32' else 'RpnCalc_handle_if_else_4_33' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 115) }
70 ed 15 08 

# :RpnCalc_handle_if_true_4_32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_4_32
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"a\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# Ident("a")
# 81547 Copy32 [Register(0x38), Register(0x48)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
#       Ident("a")
21 38 48 

# inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 8154a Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_58_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 40 5c 

# inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
# 8154d Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_n <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("a")] })
21 48 38 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81550 Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 5c 4c 

# 81553 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 81559 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 8155c LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 81562 Mul8_16 [Register(0x48), Register(0x00), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 48 00 48 

# 81566 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 4a 00 

# 81569 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_58_tf659 <- inline_RpnCalc_handle_stack_push_58_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 4b 00 

# inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 8156c ClearCarry []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 8156d AddCarry32_1 [Register(0x5c), Register(0x48), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 5c 48 48 

# 81571 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_58_t100e <- inline_RpnCalc_handle_stack_push_58_s Add Var(inline_RpnCalc_handle_stack_push_58_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 81572 Store32_1 [Register(0x38), Register(0x48)]
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 48 

# 81575 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_t100e] <- inline_RpnCalc_handle_stack_push_58_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81576 Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 5c 4c 

# 81579 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_58_t4bb9 <- inline_RpnCalc_handle_stack_push_58_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x5c), Register(0x5c)], resolved: None }
# inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 8157f Copy32 [Register(0x5c), Register(0x4c)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 5c 4c 

# 81582 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_58_tc957 <- inline_RpnCalc_handle_stack_push_58_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 4c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 81588 Load32 [Register(0x4c), Register(0x48)]
#       inline_RpnCalc_handle_stack_push_58_t14ab <- mem[inline_RpnCalc_handle_stack_push_58_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 4c 48 

# inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 8158b Copy32 [Register(0x48), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 48 38 

# 8158e AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_58_td757 <- inline_RpnCalc_handle_stack_push_58_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 81594 Store32_1 [Register(0x38), Register(0x4c)]
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 4c 

# 81597 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_58_tc957] <- inline_RpnCalc_handle_stack_push_58_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_58_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_58_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_58_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_58_function_end_stack_push
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] }) }\nCall(Call { function: \"stack_push\", parameters: [Ident(\"stack\"), Ident(\"b\")] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# Ident("b")
# 81598 Copy32 [Register(0x3c), Register(0x5c)]
#       tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
#       Ident("b")
21 3c 5c 

# inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 8159b Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_stack_push_59_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 40 3c 

# inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
# Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
# 8159e Copy32 [Register(0x5c), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_n <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] }) }
#       Call(Call { function: "stack_push", parameters: [Ident("stack"), Ident("b")] })
21 5c 38 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))\nAssign { target: Index(\"values\", PtrFieldDeref(\"s\", \"first_free\")), var_type: None, value: Ident(\"n\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident(\"values\") }, Arithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4)))\nArithmetic(Multiply, PtrFieldDeref(\"s\", \"first_free\"), Number(USIZE, 4))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 815a1 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 815a4 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 815aa Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 815ad LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 815b3 Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 815b7 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 815ba LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_push_59_tf659 <- inline_RpnCalc_handle_stack_push_59_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 815bd ClearCarry []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 815be AddCarry32_1 [Register(0x3c), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 3c 40 40 

# 815c2 AddCarry32_2 []
#       inline_RpnCalc_handle_stack_push_59_t100e <- inline_RpnCalc_handle_stack_push_59_s Add Var(inline_RpnCalc_handle_stack_push_59_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 815c3 Store32_1 [Register(0x38), Register(0x40)]
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 38 40 

# 815c6 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_t100e] <- inline_RpnCalc_handle_stack_push_59_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 815c7 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 815ca AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_push_59_t4bb9 <- inline_RpnCalc_handle_stack_push_59_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))\nAssign { target: PtrFieldDeref(\"s\", \"first_free\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1)) }\nArithmetic(Add, PtrFieldDeref(\"s\", \"first_free\"), Number(U8, 1))\nPtrFieldDeref(\"s\", \"first_free\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }, Number(USIZE, 64))\nCast { old_type: Some(Ptr(Struct(\"Stack\"))), new_type: Number(USIZE), value: Ident(\"s\") }\nIdent(\"s\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 815d0 Copy32 [Register(0x3c), Register(0x5c)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 3c 5c 

# 815d3 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_stack_push_59_tc957 <- inline_RpnCalc_handle_stack_push_59_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 815d9 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_stack_push_59_t14ab <- mem[inline_RpnCalc_handle_stack_push_59_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 815dc Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 38 

# 815df AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_stack_push_59_td757 <- inline_RpnCalc_handle_stack_push_59_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 38 01 00 00 00 

# mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 815e5 Store32_1 [Register(0x38), Register(0x5c)]
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 38 5c 

# 815e8 Store32_2 []
#       mem[inline_RpnCalc_handle_stack_push_59_tc957] <- inline_RpnCalc_handle_stack_push_59_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_push_59_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_push_59_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_stack_push_59_function_end_stack_push None
# inline_RpnCalc_handle_stack_push_59_function_end_stack_push
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 815e9 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_4_33 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_4_33
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 113) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t1501 <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# Number(U8, 113)
# 815ed LoadImm8 [Register(0x45), Constant8(0x71=113)]
#       t1501 <- 0n113/0x71u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
#       Number(U8, 113)
04 45 71 

# if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
# 815f0 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
15 44 45 

# 815f3 JzImm [Label24(RpnCalc_handle_if_true_5_34)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
72 fb 15 08 

# 815f7 JmpImm [Label24(RpnCalc_handle_if_else_5_35)]
#       if tdcd9 == t1501 then 'RpnCalc_handle_if_true_5_34' else 'RpnCalc_handle_if_else_5_35' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 113) }
70 07 16 08 

# :RpnCalc_handle_if_true_5_34 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_5_34
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 815fb LoadImm8 [Register(0x58), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 58 00 

# return Some(tb36e) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Return { value: Some(Number(U8, 0)) }
# 815fe Copy8 [Register(0x58), Register(0x00)]
#       return Some(tb36e) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Return { value: Some(Number(U8, 0)) }
0b 58 00 

# 81601 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81603 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_5_35 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_5_35
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 81607 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 60 0a 

# if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# 8160a Cmp8 [Register(0x44), Register(0x60)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
15 44 60 

# 8160d JzImm [Label24(RpnCalc_handle_if_true_6_36)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
72 15 16 08 

# 81611 JmpImm [Label24(RpnCalc_handle_if_else_6_37)]
#       if tdcd9 == td7b5 then 'RpnCalc_handle_if_true_6_36' else 'RpnCalc_handle_if_else_6_37' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
70 b5 16 08 

# :RpnCalc_handle_if_true_6_36 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_6_36
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 81615 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 81618 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 38 3c 

# 8161b AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 81621 Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 81624 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 61 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 81627 Cmp8 [Register(0x60), Register(0x61)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 60 61 

# 8162a JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 b1 16 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_62_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 8162e Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 40 

# 81631 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 81637 Load32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 40 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_62_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# 8163a Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 8163d Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 5c 

# 81640 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 81646 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 81649 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 8164f Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 81653 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 81656 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 81659 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 8165a AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 38 40 40 

# 8165e AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8165f Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 81662 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# 81663 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81666 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 5c 

# 81669 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# 8166f Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81672 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 5c 

# 81675 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 8167b Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 8167e Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 3c 

# 81681 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 81687 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 5c 

# 8168a Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 8168b Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 40 

# 8168e AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81694 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 8169a Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 

# 8169d Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_62_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 8169e Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 38 3c 

# 816a1 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 816a7 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 61 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 816aa Store8 [Register(0x61), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_62_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_62_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 61 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 816ad JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 b1 16 08 

# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_62_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_62_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 816b1 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_6_37 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_6_37
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 32) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# Number(U8, 32)
# 816b5 LoadImm8 [Register(0x45), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
#       Number(U8, 32)
04 45 20 

# if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
# 816b8 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
15 44 45 

# 816bb JzImm [Label24(RpnCalc_handle_if_true_7_38)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
72 c3 16 08 

# 816bf JmpImm [Label24(RpnCalc_handle_if_else_7_39)]
#       if tdcd9 == tac5f then 'RpnCalc_handle_if_true_7_38' else 'RpnCalc_handle_if_else_7_39' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 32) }
70 63 17 08 

# :RpnCalc_handle_if_true_7_38 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_7_38
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_push_pending\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
# 816c3 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_push_pending", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\nPtrFieldDeref(\"c\", \"have_num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 816c6 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 38 3c 

# 816c9 AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# PtrFieldDeref("c", "have_num")
# 816cf Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       PtrFieldDeref("c", "have_num")
05 3c 60 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# Number(U8, 0)
# 816d2 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
#       Number(U8, 0)
04 61 00 

# if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
# 816d5 Cmp8 [Register(0x60), Register(0x61)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
15 60 61 

# 816d8 JzImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2)]
#       if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
#       Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }
72 5f 17 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_RpnCalc_push_pending_63_ta34f != inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e then 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1' else 'inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }])], else_block: [] }\nComparison { op: NotEquals, left: PtrFieldDeref(\"c\", \"have_num\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: PtrFieldDeref("c", "have_num"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }, Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }])], else_block: [] }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_true_0_1
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\nPtrFieldDeref(\"c\", \"num\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 816dc Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 40 

# 816df AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 816e5 Load32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 40 3c 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# VoidExpression { expression: Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "stack_push", parameters: [AddressOf(PtrFieldDeref("c", "stack")), PtrFieldDeref("c", "num")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n <- inline_RpnCalc_handle_RpnCalc_push_pending_63_td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nVoidExpression { expression: Call(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] }) }\nCall(Call { function: \"stack_push\", parameters: [AddressOf(PtrFieldDeref(\"c\", \"stack\")), PtrFieldDeref(\"c\", \"num\")] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# 816e8 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 816eb Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 5c 

# 816ee AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# PtrFieldDeref("s", "first_free")
# 816f4 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
# 816f7 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
20 00 04 00 00 00 

# 816fd Mul8_16 [Register(0x40), Register(0x00), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
11 40 00 40 

# 81701 LoadImm8 [Register(0x42), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 42 00 

# 81704 LoadImm8 [Register(0x43), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
#       Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))
04 43 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
# 81707 ClearCarry []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
03 

# 81708 AddCarry32_1 [Register(0x38), Register(0x40), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
30 38 40 40 

# 8170c AddCarry32_2 []
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s Add Var(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tf659) Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, PtrFieldDeref("s", "first_free"), Number(USIZE, 4)))
31 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
# Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
# 8170d Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
23 3c 40 

# 81710 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t100e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_n U32 Some('/lutcomp/programs/lib/Stack.j':(18,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "first_free")), var_type: None, value: Ident("n") }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# 81711 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81714 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 5c 

# 81717 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
# Ident("s")
# 8171d Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_s U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }
#       Ident("s")
21 38 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81720 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 40 5c 

# 81723 AddImm32IgnoreCarry [Register(0x5c), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t4bb9 Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 5c 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# PtrFieldDeref("s", "first_free")
# 81729 Load32 [Register(0x5c), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab <- mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
#       PtrFieldDeref("s", "first_free")
22 5c 40 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
# 8172c Copy32 [Register(0x40), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
21 40 3c 

# 8172f AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000001=1)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_t14ab Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1))
32 3c 01 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
# 81735 Store32_1 [Register(0x3c), Register(0x5c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
23 3c 5c 

# 81738 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_tc957] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_td757 U32 Some('/lutcomp/programs/lib/Stack.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first_free"), Number(U8, 1)) }
24 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_inline_RpnCalc_push_pending_stack_push_60_function_end_stack_push
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Number(USIZE, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 68))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 81739 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 40 

# 8173c AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 40 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81742 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 81748 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 

# 8174b Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_t6e8e] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed <- inline_RpnCalc_handle_RpnCalc_push_pending_63_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))\nAssign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 0) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 72))\nCast { old_type: Some(Ptr(Struct(\"RpnCalc\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 8174c Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
21 38 3c 

# 8174f AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000048=72)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7 <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 3c 48 00 00 00 

# inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81755 LoadImm8 [Register(0x61), Constant8(0x00=0)]
#       inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 61 00 

# mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
# 81758 Store8 [Register(0x61), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_push_pending_63_tfdb7] <- inline_RpnCalc_handle_RpnCalc_push_pending_63_tb36e U8 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 0) }
06 61 3c 

# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# 8175b JmpImm [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0)]
#       goto inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
70 5f 17 08 

# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_else_0_2
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(20,5))
# inline_RpnCalc_handle_RpnCalc_push_pending_63_RpnCalc_push_pending_if_end_0
# goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending None
# inline_RpnCalc_handle_RpnCalc_push_pending_63_function_end_RpnCalc_push_pending
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8175f JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_7_39 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_7_39
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 99) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t4e08 <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# Number(U8, 99)
# 81763 LoadImm8 [Register(0x45), Constant8(0x63=99)]
#       t4e08 <- 0n99/0x63u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
#       Number(U8, 99)
04 45 63 

# if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
# 81766 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
15 44 45 

# 81769 JzImm [Label24(RpnCalc_handle_if_true_8_40)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
72 71 17 08 

# 8176d JmpImm [Label24(RpnCalc_handle_if_else_8_41)]
#       if tdcd9 == t4e08 then 'RpnCalc_handle_if_true_8_40' else 'RpnCalc_handle_if_else_8_41' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 99) }
70 9e 17 08 

# :RpnCalc_handle_if_true_8_40 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_8_40
# tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"RpnCalc_init\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
# Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
# 81771 Copy32 [Register(0x40), Register(0x38)]
#       inline_RpnCalc_handle_RpnCalc_init_50_c <- tac13 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [Ident("c")] })
21 40 38 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))
# VoidExpression { expression: Call(Call { function: "stack_init", parameters: [Ident("s")] }) }
# Call(Call { function: "stack_init", parameters: [Ident("s")] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s <- inline_RpnCalc_handle_RpnCalc_init_50_c U32 Some('/lutcomp/programs/lib/rpnlib.j':(15,5))\nVoidExpression { expression: Call(Call { function: \"stack_init\", parameters: [Ident(\"s\")] }) }\nCall(Call { function: \"stack_init\", parameters: [Ident(\"s\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# 81774 Copy32 [Register(0x38), Register(0x40)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
21 38 40 

# 81777 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000040=64)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957 <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32) Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
32 40 40 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 8177d LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# 81783 Store32_1 [Register(0x3c), Register(0x40)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
23 3c 40 

# 81786 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_tc957] <- inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_RpnCalc_handle_RpnCalc_init_50_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 81787 Copy32 [Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 3c 

# 8178a AddImm32IgnoreCarry [Register(0x3c), Constant32(0x00000044=68)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t6e8e <- inline_RpnCalc_handle_RpnCalc_init_50_c Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 3c 44 00 00 00 

# inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81790 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       inline_RpnCalc_handle_RpnCalc_init_50_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 38 00 00 00 00 

# mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 81796 Store32_1 [Register(0x38), Register(0x3c)]
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 38 3c 

# 81799 Store32_2 []
#       mem[inline_RpnCalc_handle_RpnCalc_init_50_t6e8e] <- inline_RpnCalc_handle_RpnCalc_init_50_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init)], resolved: None }
# :inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init None
# inline_RpnCalc_handle_RpnCalc_init_50_function_end_RpnCalc_init
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 8179a JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_8_41 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_8_41
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 100) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t49a <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# Number(U8, 100)
# 8179e LoadImm8 [Register(0x45), Constant8(0x64=100)]
#       t49a <- 0n100/0x64u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
#       Number(U8, 100)
04 45 64 

# if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
# 817a1 Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
15 44 45 

# 817a4 JzImm [Label24(RpnCalc_handle_if_true_9_42)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
72 ac 17 08 

# 817a8 JmpImm [Label24(RpnCalc_handle_if_else_9_43)]
#       if tdcd9 == t49a then 'RpnCalc_handle_if_true_9_42' else 'RpnCalc_handle_if_else_9_43' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 100) }
70 3a 19 08 

# :RpnCalc_handle_if_true_9_42 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_9_42
# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 817ac LoadImm8 [Register(0x45), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 45 00 

# :RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# RpnCalc_handle_while_predicate_44
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# Ident("stack_count")
# 817af Copy8 [Register(0x59), Register(0x58)]
#       t6001 <- stack_count U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
#       Ident("stack_count")
0b 59 58 

# if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
# 817b2 Cmp8 [Register(0x58), Register(0x45)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
15 58 45 

# 817b5 JcImm [Label24(RpnCalc_handle_while_end_46)]
#       if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }
71 36 19 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t6001 then 'RpnCalc_handle_while_body_45' else 'RpnCalc_handle_while_end_46' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }, while_true: [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }, VoidExpression { expression: Call(Call { function: \"putc\", parameters: [Number(U8, 10)] }) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Ident(\"stack_count\") }\n", opcode: JmpImm, args: [Label24(RpnCalc_handle_while_body_45)], resolved: None }
# :RpnCalc_handle_while_body_45 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Ident("stack_count") }, while_true: [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 58)] }) }, VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }, VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# RpnCalc_handle_while_body_45
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"i\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("i")] })
# 817b9 Copy8 [Register(0x45), Register(0x00)]
#       Arg0[a]=td0f3 None <= call print_dec8(td0f3,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("i")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("i")] })
0b 45 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 817bc AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 817c2 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c cc 17 08 00 

# 817c8 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 0c 2d 08 

# 817cc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 817d2 LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call io_write0(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 817d5 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_23_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 817d7 LoadImm32 [Register(0x3c), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_23_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 60 10 0f 00 

# inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 817dd Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_23_t76c7 <- mem[inline_RpnCalc_handle_putc_23_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 60 

# inline_RpnCalc_handle_putc_23_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 817e0 LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_23_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 44 00 

# if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_tb36e then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 817e3 Cmp8 [Register(0x60), Register(0x44)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_tb36e then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 60 44 

# 817e6 JzImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_tb36e then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 0a 18 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_23_t76c7 != inline_RpnCalc_handle_putc_23_tb36e then 'inline_RpnCalc_handle_putc_23_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_23_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_23_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_23_putc_if_true_0_1
# inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
# 817ea LoadImm8 [Register(0x60), Constant8(0x3a=58)]
#       inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_23_tac13 <- inline_RpnCalc_handle_putc_23_c U8` with constant `inline_RpnCalc_handle_putc_23_tac13 <- 0n58/0x3au8 `.
04 60 3a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 817ed Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_23_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_23_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 817f0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 817f6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 00 18 08 00 

# 817fc JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 81800 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 81806 JmpImm [Label24(inline_RpnCalc_handle_putc_23_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 0a 18 08 

# :inline_RpnCalc_handle_putc_23_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_23_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_23_putc_if_end_0
# goto inline_RpnCalc_handle_putc_23_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_23_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_23_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_23_function_end_putc None
# inline_RpnCalc_handle_putc_23_function_end_putc
# tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Ident("stack")
# optimized away noop copy Instruction { source: "tfe08 <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })\nIdent(\"stack\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })\nCast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
# 8180a LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
20 3c 00 00 00 00 

# 81810 Copy8 [Register(0x45), Register(0x3c)]
#       t4376 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
#       Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }
0b 45 3c 

# inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# 81813 Copy32 [Register(0x40), Register(0x5c)]
#       inline_RpnCalc_handle_stack_get_48_s <- tfe08 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
#       Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
21 40 5c 

# inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_stack_get_48_n <- t4376 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] }) }\nCall(Call { function: \"print_dec32\", parameters: [Call(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })] })\nCall(Call { function: \"stack_get\", parameters: [Ident(\"stack\"), Cast { old_type: None, new_type: Number(USIZE), value: Ident(\"i\") }] })\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
# 81816 LoadImm32 [Register(0x00), Constant32(0x00000004=4)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
20 00 04 00 00 00 

# 8181c Mul8_16 [Register(0x3c), Register(0x00), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
11 3c 00 3c 

# 81820 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
04 3e 00 

# 81823 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_RpnCalc_handle_stack_get_48_td38d <- inline_RpnCalc_handle_stack_get_48_n Multiply Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
#       Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))
04 3f 00 

# inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
# 81826 ClearCarry []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
03 

# 81827 AddCarry32_1 [Register(0x5c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
30 5c 3c 3c 

# 8182b AddCarry32_2 []
#       inline_RpnCalc_handle_stack_get_48_t5abb <- inline_RpnCalc_handle_stack_get_48_s Add Var(inline_RpnCalc_handle_stack_get_48_td38d) Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4))) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(USIZE))), new_type: Number(USIZE), value: Ident("values") }, Arithmetic(Multiply, Ident("n"), Number(USIZE, 4)))
31 

# inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Index("values", Ident("n"))
# 8182c Load32 [Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_stack_get_48_t2db0 <- mem[inline_RpnCalc_handle_stack_get_48_t5abb] U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
#       Return { value: Some(Index("values", Ident("n"))) }
#       Index("values", Ident("n"))
22 3c 3c 

# tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# optimized away noop copy Instruction { source: "tb336 <- inline_RpnCalc_handle_stack_get_48_t2db0 U32 Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get Some('/lutcomp/programs/lib/Stack.j':(24,5))
# Return { value: Some(Index("values", Ident("n"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_stack_get_48_function_end_stack_get Some('/lutcomp/programs/lib/Stack.j':(24,5))\nReturn { value: Some(Index(\"values\", Ident(\"n\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_stack_get_48_function_end_stack_get)], resolved: None }
# :inline_RpnCalc_handle_stack_get_48_function_end_stack_get None
# inline_RpnCalc_handle_stack_get_48_function_end_stack_get
# None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
# Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
# 8182f Copy32 [Register(0x3c), Register(0x00)]
#       Arg0[a]=tb336 None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
21 3c 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 100, 104, 105, 106, 107]
# 81832 Push8 [Register(0x6b)]
#       Saving reg0x6b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6b 

# 81834 Push8 [Register(0x6a)]
#       Saving reg0x6a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 6a 

# 81836 Push8 [Register(0x69)]
#       Saving reg0x69 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 69 

# 81838 Push8 [Register(0x68)]
#       Saving reg0x68 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 68 

# 8183a Push8 [Register(0x64)]
#       Saving reg0x64 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 64 

# 8183c Push8 [Register(0x60)]
#       Saving reg0x60 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 60 

# 8183e Push8 [Register(0x5f)]
#       Saving reg0x5f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5f 

# 81840 Push8 [Register(0x5e)]
#       Saving reg0x5e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5e 

# 81842 Push8 [Register(0x5d)]
#       Saving reg0x5d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5d 

# 81844 Push8 [Register(0x5c)]
#       Saving reg0x5c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 5c 

# 81846 Push8 [Register(0x59)]
#       Saving reg0x59 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 59 

# 81848 Push8 [Register(0x58)]
#       Saving reg0x58 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 58 

# 8184a Push8 [Register(0x57)]
#       Saving reg0x57 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 57 

# 8184c Push8 [Register(0x56)]
#       Saving reg0x56 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 56 

# 8184e Push8 [Register(0x55)]
#       Saving reg0x55 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 55 

# 81850 Push8 [Register(0x54)]
#       Saving reg0x54 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 54 

# 81852 Push8 [Register(0x53)]
#       Saving reg0x53 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 53 

# 81854 Push8 [Register(0x52)]
#       Saving reg0x52 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 52 

# 81856 Push8 [Register(0x51)]
#       Saving reg0x51 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 51 

# 81858 Push8 [Register(0x50)]
#       Saving reg0x50 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 50 

# 8185a Push8 [Register(0x4f)]
#       Saving reg0x4f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4f 

# 8185c Push8 [Register(0x4e)]
#       Saving reg0x4e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4e 

# 8185e Push8 [Register(0x4d)]
#       Saving reg0x4d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4d 

# 81860 Push8 [Register(0x4c)]
#       Saving reg0x4c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4c 

# 81862 Push8 [Register(0x4b)]
#       Saving reg0x4b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4b 

# 81864 Push8 [Register(0x4a)]
#       Saving reg0x4a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 4a 

# 81866 Push8 [Register(0x49)]
#       Saving reg0x49 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 49 

# 81868 Push8 [Register(0x48)]
#       Saving reg0x48 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 48 

# 8186a Push8 [Register(0x45)]
#       Saving reg0x45 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 45 

# 8186c Push8 [Register(0x44)]
#       Saving reg0x44 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 44 

# 8186e Push8 [Register(0x43)]
#       Saving reg0x43 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 43 

# 81870 Push8 [Register(0x42)]
#       Saving reg0x42 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 42 

# 81872 Push8 [Register(0x41)]
#       Saving reg0x41 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 41 

# 81874 Push8 [Register(0x40)]
#       Saving reg0x40 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 40 

# 81876 Push8 [Register(0x3f)]
#       Saving reg0x3f before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 3f 

# 81878 Push8 [Register(0x3e)]
#       Saving reg0x3e before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 3e 

# 8187a Push8 [Register(0x3d)]
#       Saving reg0x3d before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 3d 

# 8187c Push8 [Register(0x3c)]
#       Saving reg0x3c before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 3c 

# 8187e Push8 [Register(0x3b)]
#       Saving reg0x3b before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 3b 

# 81880 Push8 [Register(0x3a)]
#       Saving reg0x3a before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 3a 

# 81882 Push8 [Register(0x39)]
#       Saving reg0x39 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 39 

# 81884 Push8 [Register(0x38)]
#       Saving reg0x38 before None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
09 38 

# 81886 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 8188c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 96 18 08 00 

# 81892 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 18 2b 08 

# 81896 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 8189c Pop8 [Register(0x38)]
#       Restoring reg0x38 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 38 

# 8189e Pop8 [Register(0x39)]
#       Restoring reg0x39 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 39 

# 818a0 Pop8 [Register(0x3a)]
#       Restoring reg0x3a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 3a 

# 818a2 Pop8 [Register(0x3b)]
#       Restoring reg0x3b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 3b 

# 818a4 Pop8 [Register(0x3c)]
#       Restoring reg0x3c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 3c 

# 818a6 Pop8 [Register(0x3d)]
#       Restoring reg0x3d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 3d 

# 818a8 Pop8 [Register(0x3e)]
#       Restoring reg0x3e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 3e 

# 818aa Pop8 [Register(0x3f)]
#       Restoring reg0x3f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 3f 

# 818ac Pop8 [Register(0x40)]
#       Restoring reg0x40 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 40 

# 818ae Pop8 [Register(0x41)]
#       Restoring reg0x41 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 41 

# 818b0 Pop8 [Register(0x42)]
#       Restoring reg0x42 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 42 

# 818b2 Pop8 [Register(0x43)]
#       Restoring reg0x43 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 43 

# 818b4 Pop8 [Register(0x44)]
#       Restoring reg0x44 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 44 

# 818b6 Pop8 [Register(0x45)]
#       Restoring reg0x45 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 45 

# 818b8 Pop8 [Register(0x48)]
#       Restoring reg0x48 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 48 

# 818ba Pop8 [Register(0x49)]
#       Restoring reg0x49 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 49 

# 818bc Pop8 [Register(0x4a)]
#       Restoring reg0x4a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4a 

# 818be Pop8 [Register(0x4b)]
#       Restoring reg0x4b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4b 

# 818c0 Pop8 [Register(0x4c)]
#       Restoring reg0x4c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4c 

# 818c2 Pop8 [Register(0x4d)]
#       Restoring reg0x4d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4d 

# 818c4 Pop8 [Register(0x4e)]
#       Restoring reg0x4e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4e 

# 818c6 Pop8 [Register(0x4f)]
#       Restoring reg0x4f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 4f 

# 818c8 Pop8 [Register(0x50)]
#       Restoring reg0x50 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 50 

# 818ca Pop8 [Register(0x51)]
#       Restoring reg0x51 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 51 

# 818cc Pop8 [Register(0x52)]
#       Restoring reg0x52 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 52 

# 818ce Pop8 [Register(0x53)]
#       Restoring reg0x53 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 53 

# 818d0 Pop8 [Register(0x54)]
#       Restoring reg0x54 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 54 

# 818d2 Pop8 [Register(0x55)]
#       Restoring reg0x55 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 55 

# 818d4 Pop8 [Register(0x56)]
#       Restoring reg0x56 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 56 

# 818d6 Pop8 [Register(0x57)]
#       Restoring reg0x57 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 57 

# 818d8 Pop8 [Register(0x58)]
#       Restoring reg0x58 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 58 

# 818da Pop8 [Register(0x59)]
#       Restoring reg0x59 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 59 

# 818dc Pop8 [Register(0x5c)]
#       Restoring reg0x5c after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5c 

# 818de Pop8 [Register(0x5d)]
#       Restoring reg0x5d after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5d 

# 818e0 Pop8 [Register(0x5e)]
#       Restoring reg0x5e after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5e 

# 818e2 Pop8 [Register(0x5f)]
#       Restoring reg0x5f after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 5f 

# 818e4 Pop8 [Register(0x60)]
#       Restoring reg0x60 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 60 

# 818e6 Pop8 [Register(0x64)]
#       Restoring reg0x64 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 64 

# 818e8 Pop8 [Register(0x68)]
#       Restoring reg0x68 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 68 

# 818ea Pop8 [Register(0x69)]
#       Restoring reg0x69 after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 69 

# 818ec Pop8 [Register(0x6a)]
#       Restoring reg0x6a after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6a 

# 818ee Pop8 [Register(0x6b)]
#       Restoring reg0x6b after None <= call print_dec32(tb336,) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] }) }
#       Call(Call { function: "print_dec32", parameters: [Call(Call { function: "stack_get", parameters: [Ident("stack"), Cast { old_type: None, new_type: Number(USIZE), value: Ident("i") }] })] })
0a 6b 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
# Call(Call { function: "putc", parameters: [Number(U8, 10)] })
# Number(U8, 10)
# 818f0 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Number(U8, 10)] }) }
#       Call(Call { function: "putc", parameters: [Number(U8, 10)] })
#       Number(U8, 10)
04 60 0a 

# inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# 818f3 LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call io_write0(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 818f6 Out0 [Register(0x60)]
#       IoWrite0
68 60 

# inline_RpnCalc_handle_putc_24_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 818f8 LoadImm32 [Register(0x3c), Constant32(0x000f1060=987232)]
#       inline_RpnCalc_handle_putc_24_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 3c 60 10 0f 00 

# inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 818fe Load8 [Register(0x3c), Register(0x60)]
#       inline_RpnCalc_handle_putc_24_t76c7 <- mem[inline_RpnCalc_handle_putc_24_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 3c 60 

# inline_RpnCalc_handle_putc_24_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 81901 LoadImm8 [Register(0x44), Constant8(0x00=0)]
#       inline_RpnCalc_handle_putc_24_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 44 00 

# if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_tb36e then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 81904 Cmp8 [Register(0x60), Register(0x44)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_tb36e then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 60 44 

# 81907 JzImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_else_0_2)]
#       if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_tb36e then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 2b 19 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_handle_putc_24_t76c7 != inline_RpnCalc_handle_putc_24_tb36e then 'inline_RpnCalc_handle_putc_24_putc_if_true_0_1' else 'inline_RpnCalc_handle_putc_24_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_putc_if_true_0_1)], resolved: None }
# :inline_RpnCalc_handle_putc_24_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_RpnCalc_handle_putc_24_putc_if_true_0_1
# inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
# 8190b LoadImm8 [Register(0x60), Constant8(0x0a=10)]
#       inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("RpnCalc_handle"), replacing `inline_RpnCalc_handle_putc_24_tac13 <- inline_RpnCalc_handle_putc_24_c U8` with constant `inline_RpnCalc_handle_putc_24_tac13 <- 0n10/0x0au8 `.
04 60 0a 

# None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8190e Copy8 [Register(0x60), Register(0x00)]
#       Arg0[ch]=inline_RpnCalc_handle_putc_24_tac13 None <= call lcd_putc(inline_RpnCalc_handle_putc_24_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 60 00 

# Registers used by this function: {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 106, 107}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 81911 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 81917 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 21 19 08 00 

# 8191d JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 81921 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 81927 JmpImm [Label24(inline_RpnCalc_handle_putc_24_putc_if_end_0)]
#       goto inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 2b 19 08 

# :inline_RpnCalc_handle_putc_24_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_else_0_2
# :inline_RpnCalc_handle_putc_24_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_RpnCalc_handle_putc_24_putc_if_end_0
# goto inline_RpnCalc_handle_putc_24_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_putc_24_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_putc_24_function_end_putc)], resolved: None }
# :inline_RpnCalc_handle_putc_24_function_end_putc None
# inline_RpnCalc_handle_putc_24_function_end_putc
# td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x45), Register(0x45)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 8192b LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 8192e Add8NoCarryIn [Register(0x45), Register(0x00), Register(0x45)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 45 00 45 

# goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81932 JmpImm [Label24(RpnCalc_handle_while_predicate_44)]
#       goto RpnCalc_handle_while_predicate_44 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 af 17 08 

# :RpnCalc_handle_while_end_46 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_while_end_46
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 81936 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_9_43 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_9_43
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nComparison { op: LessThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 57) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t2ac9 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# Number(U8, 57)
# 8193a LoadImm8 [Register(0x45), Constant8(0x39=57)]
#       t2ac9 <- 0n57/0x39u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
#       Number(U8, 57)
04 45 39 

# if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
# 8193d Cmp8 [Register(0x44), Register(0x45)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
15 44 45 

# 81940 JcImm [Label24(RpnCalc_handle_if_true_10_47)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
71 48 19 08 

# 81944 JmpImm [Label24(RpnCalc_handle_if_else_10_48)]
#       if tdcd9 <= t2ac9 then 'RpnCalc_handle_if_true_10_47' else 'RpnCalc_handle_if_else_10_48' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Comparison { op: LessThanOrEqual, left: Ident("ch"), right: Number(U8, 57) }
70 dc 19 08 

# :RpnCalc_handle_if_true_10_47 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_true_10_47
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref(\"c\", \"have_num\"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Call(Call { function: \"mul32_by10\", parameters: [PtrFieldDeref(\"c\", \"num\")] }) }, Assign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }])], else_block: [] }\nComparison { op: GreaterThanOrEqual, left: Ident(\"ch\"), right: Number(U8, 48) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# tf48d <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# Number(U8, 48)
# 81948 LoadImm8 [Register(0x45), Constant8(0x30=48)]
#       tf48d <- 0n48/0x30u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
#       Number(U8, 48)
04 45 30 

# if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
# 8194b Cmp8 [Register(0x45), Register(0x44)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
15 45 44 

# 8194e JcImm [Label24(RpnCalc_handle_if_true_0_50)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
71 56 19 08 

# 81952 JmpImm [Label24(RpnCalc_handle_if_else_0_51)]
#       if tdcd9 >= tf48d then 'RpnCalc_handle_if_true_0_50' else 'RpnCalc_handle_if_else_0_51' Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }
70 d8 19 08 

# :RpnCalc_handle_if_true_0_50 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("ch"), right: Number(U8, 48) }, [Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }, Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }])], else_block: [] }
# RpnCalc_handle_if_true_0_50
# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 81956 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
# 81959 AddImm32IgnoreCarry [Register(0x38), Constant32(0x00000048=72)]
#       tfdb7 <- tb1ed Add Number(0n72/0x00000048u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 72))
32 38 48 00 00 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 8195f LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 58 01 

# mem[tfdb7] <- tfcd U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
# 81962 Store8 [Register(0x58), Register(0x38)]
#       mem[tfdb7] <- tfcd U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "have_num"), var_type: None, value: Number(U8, 1) }
06 58 38 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 81965 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 81968 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 48 

# 8196b AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 81971 Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 81974 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 48 

# 81977 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# PtrFieldDeref("c", "num")
# 8197d Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
#       PtrFieldDeref("c", "num")
22 48 3c 

# inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
# 81980 Copy32 [Register(0x3c), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- td60 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
#       Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] })
21 3c 38 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 81983 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 81984 AddCarry32_1 [Register(0x38), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 38 

# 81988 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_a <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 81989 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 8198a AddCarry32_1 [Register(0x38), Register(0x38), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 38 38 3c 

# 8198e AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_t8792 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 8198f ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 81990 AddCarry32_1 [Register(0x3c), Register(0x3c), Register(0x3c)]
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 3c 3c 3c 

# 81994 AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_b <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_tace9 <- inline_RpnCalc_handle_mul32_by10_13_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_RpnCalc_handle_mul32_by10_13_t8792 <- inline_RpnCalc_handle_mul32_by10_13_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 81995 ClearCarry []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 81996 AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 3c 38 38 

# 8199a AddCarry32_2 []
#       inline_RpnCalc_handle_mul32_by10_13_t7eaf <- inline_RpnCalc_handle_mul32_by10_13_tace9 Add Var(inline_RpnCalc_handle_mul32_by10_13_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "tadd <- inline_RpnCalc_handle_mul32_by10_13_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10)], resolved: None }
# :inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10 None
# inline_RpnCalc_handle_mul32_by10_13_function_end_mul32_by10
# mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
# 8199b Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
23 38 48 

# 8199e Store32_2 []
#       mem[t6e8e] <- tadd U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Call(Call { function: "mul32_by10", parameters: [PtrFieldDeref("c", "num")] }) }
24 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 8199f Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 819a2 Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 48 

# 819a5 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 48 44 00 00 00 

# tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# 819ab Copy32 [Register(0x40), Register(0x38)]
#       tb1ed <- c U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }
#       Ident("c")
21 40 38 

# t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# 819ae Copy32 [Register(0x38), Register(0x48)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
21 38 48 

# 819b1 AddImm32IgnoreCarry [Register(0x48), Constant32(0x00000044=68)]
#       t6e8e <- tb1ed Add Number(0n68/0x00000044u32) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
32 48 44 00 00 00 

# td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# PtrFieldDeref("c", "num")
# 819b7 Load32 [Register(0x48), Register(0x3c)]
#       td60 <- mem[t6e8e] U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       PtrFieldDeref("c", "num")
22 48 3c 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))\nAssign { target: PtrFieldDeref(\"c\", \"num\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"num\"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) })\nCast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident(\"ch\"), Number(U8, 48)) }\nArithmetic(Subtract, Ident(\"ch\"), Number(U8, 48))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x44), Register(0x44)], resolved: None }
# t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
# 819ba LoadImm8 [Register(0x00), Constant8(0xd0=208)]
#       t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
04 00 d0 

# 819bd Add8NoCarryIn [Register(0x44), Register(0x00), Register(0x45)]
#       t7ff1 <- tdcd9 Subtract Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
#       Arithmetic(Subtract, Ident("ch"), Number(U8, 48))
14 44 00 45 

# t3f70 U32 <- t7ff1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
# 819c1 LoadImm32 [Register(0x38), Constant32(0x00000000=0)]
#       Zero-pad for t3f70 U32 <- t7ff1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
20 38 00 00 00 00 

# 819c7 Copy8 [Register(0x45), Register(0x38)]
#       t3f70 U32 <- t7ff1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }
0b 45 38 

# tacf6 <- td60 Add Var(t3f70) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
# 819ca ClearCarry []
#       tacf6 <- td60 Add Var(t3f70) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
03 

# 819cb AddCarry32_1 [Register(0x3c), Register(0x38), Register(0x38)]
#       tacf6 <- td60 Add Var(t3f70) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
30 3c 38 38 

# 819cf AddCarry32_2 []
#       tacf6 <- td60 Add Var(t3f70) Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
#       Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) })
31 

# mem[t6e8e] <- tacf6 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
# 819d0 Store32_1 [Register(0x38), Register(0x48)]
#       mem[t6e8e] <- tacf6 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
23 38 48 

# 819d3 Store32_2 []
#       mem[t6e8e] <- tacf6 U32 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "num"), Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Subtract, Ident("ch"), Number(U8, 48)) }) }
24 

# goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 819d4 JmpImm [Label24(RpnCalc_handle_if_end_49)]
#       goto RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 d8 19 08 

# :RpnCalc_handle_if_else_0_51 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_0_51
# :RpnCalc_handle_if_end_49 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_49
# goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# 819d8 JmpImm [Label24(RpnCalc_handle_if_end_23)]
#       goto RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
70 dc 19 08 

# :RpnCalc_handle_if_else_10_48 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_else_10_48
# :RpnCalc_handle_if_end_23 Some('/lutcomp/programs/lib/rpnlib.j':(70,5))
# RpnCalc_handle_if_end_23
# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(U8, 1)) }
# Number(U8, 1)
# 819dc LoadImm8 [Register(0x58), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(U8, 1)) }
#       Number(U8, 1)
04 58 01 

# return Some(tfcd) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
# Return { value: Some(Number(U8, 1)) }
# 819df Copy8 [Register(0x58), Register(0x00)]
#       return Some(tfcd) Some('/lutcomp/programs/lib/rpnlib.j':(118,5))
#       Return { value: Some(Number(U8, 1)) }
0b 58 00 

# 819e2 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_RpnCalc_handle None
# function_end_RpnCalc_handle
# Unreachable None
# 819e4 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :RpnCalc_run
# Ret Some(U8)
# Arg0=calc
# Var calc (Arg0 calc Ptr(Struct("RpnCalc"))) Reg(U32) Some([108, 109, 110, 111])
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([116, 117, 118, 119]) [100, 16, 15, 0]
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([120])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed (t44ed Ident("value")) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb (t6fdb Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 (tae11 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }) Reg(U32) Some([116, 117, 118, 119])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([112]) [0]
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 (tb469 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd (tb6dd PtrFieldDeref("s", "first")) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([124, 125, 126, 127]) [100, 17, 15, 0]
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([124, 125, 126, 127]) [104, 17, 15, 0]
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value (Local value Number(U8) Reg(U8)) Reg(U8) Some([129])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n (Arg1 n Number(U8)) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s (Arg0 s Ptr(Struct("Queue"))) Reg(U32) Some([124, 125, 126, 127]) [100, 16, 15, 0]
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 (t2187 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }) Reg(U32) Some([124, 125, 126, 127])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee (t3ee PtrFieldDeref("s", "last")) Reg(U8) Some([128])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 (t5bb7 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) Reg(U32) Some([132, 133, 134, 135])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 (t6778 Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([136, 137, 138, 139]) [104, 17, 15, 0]
# Var inline_RpnCalc_run_getchar_39_t0 (static "keyboard_enable" addr) Reg(U32) Some([116, 117, 118, 119]) [8, 16, 15, 0]
# Var inline_RpnCalc_run_getchar_39_t861f (t861f Call(Call { function: "io_ready_to_read", parameters: [] })) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([120]) [0]
# Var inline_RpnCalc_run_getchar_39_tb816 (tb816 TtyIn) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_teb6e (teb6e Ident("keyboard_enable")) Reg(U8) Some([112])
# Var inline_RpnCalc_run_getchar_39_tf0b5 (tf0b5 Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))) Reg(U8) Some([112])
# Var result (Local result Number(U8) Reg(U8)) Reg(U8) Some([112])
# Var t57fd (t57fd Ident("result")) Reg(U8) Some([112])
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([120]) [0]
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([112])
# 819e9 Copy32 [Register(0x00), Register(0x6c)]
#       Save function parameter 'calc' registers [0, 1, 2, 3] to locals [108, 109, 110, 111].
21 00 6c 

# :RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# RpnCalc_run_while_predicate_0
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 819ec LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 78 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# Number(U8, 0)
# 819ef LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
#       Number(U8, 0)
04 78 00 

# if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
# 819f2 Cmp8 [Register(0x78), Register(0x78)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
15 78 78 

# 819f5 JzImm [Label24(RpnCalc_run_while_body_1)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
72 fd 19 08 

# 819f9 JmpImm [Label24(RpnCalc_run_while_end_2)]
#       if tb36e == tb36e then 'RpnCalc_run_while_body_1' else 'RpnCalc_run_while_end_2' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
#       Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }
70 90 1b 08 

# :RpnCalc_run_while_body_1 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# While { predicate: Comparison { op: Equals, left: Number(U8, 0), right: Number(U8, 0) }, while_true: [Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Call(Call { function: "getchar", parameters: [] }) }, Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }] }
# RpnCalc_run_while_body_1
# inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
# Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 819fd LoadImm8 [Register(0x70), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_ch <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(19,5))
#       Assign { target: Ident("ch"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 70 00 

# :inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_predicate_0
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nWhile { predicate: Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }, Assign { target: Ident(\"ch\"), var_type: None, value: Call(Call { function: \"queue_pop\", parameters: [AddressOf(Ident(\"stdin\"))] }) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 0) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# Number(U8, 0)
# 81a00 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
#       Number(U8, 0)
04 78 00 

# if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
# 81a03 Cmp8 [Register(0x70), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
15 70 78 

# 81a06 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_body_1)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
72 0e 1a 08 

# 81a0a JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_end_2)]
#       if inline_RpnCalc_run_getchar_39_tdcd9 == inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_while_body_1' else 'inline_RpnCalc_run_getchar_39_getchar_while_end_2' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }
70 f7 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_while_body_1 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# While { predicate: Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 0) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }, Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }] }
# inline_RpnCalc_run_getchar_39_getchar_while_body_1
# Some(inline_RpnCalc_run_getchar_39_t861f) <= call io_ready_to_read() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# Call(Call { function: "io_ready_to_read", parameters: [] })
# 81a0e IoReadyToRead [Register(0x70)]
#       ReadyToRead
79 70 

# inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
# 81a10 AndImm8 [Register(0x70), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_tf0b5 <- inline_RpnCalc_run_getchar_39_t861f BitwiseAnd Number(0n1/0x01u8) Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1))
18 70 01 

# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# Number(U8, 0)
# 81a13 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
#       Number(U8, 0)
04 78 00 

# if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
# 81a16 Cmp8 [Register(0x70), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
15 70 78 

# 81a19 JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_0_5)]
#       if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }
72 5d 1a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_tf0b5 != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_0_4' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_0_5' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"Keyboard_poll\", parameters: [] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: \"io_ready_to_read\", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_0_4)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_0_4 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Arithmetic(And, Call(Call { function: "io_ready_to_read", parameters: [] }), Number(U8, 1)), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }]), (Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_getchar_if_true_0_4
# inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# TtyIn
# 81a1d In0 [Register(0x70)]
#       inline_RpnCalc_run_getchar_39_tb816 <- ttyin Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       TtyIn
60 70 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987236/0x000f1064u32 `.
# 81a1f LoadImm32 [Register(0x7c), Constant32(0x000f1064=987236)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
#       Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s <- 0n987236/0x000f1064u32 `.
20 7c 64 10 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] }) }
# Call(Call { function: "queue_push", parameters: [AddressOf(Ident("stdin")), TtyIn] })
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n <- inline_RpnCalc_run_getchar_39_tb816 U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] }) }\nCall(Call { function: \"queue_push\", parameters: [AddressOf(Ident(\"stdin\")), TtyIn] })\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32 `.
# 81a25 LoadImm32 [Register(0x88), Constant32(0x000f1168=987496)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32 `.
20 88 68 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 81a2b Load8 [Register(0x88), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 88 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
# 81a2e LoadImm32 [Register(0x84), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
20 84 00 00 00 00 

# 81a34 Copy8 [Register(0x80), Register(0x84)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }
0b 80 84 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
# 81a37 ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
03 

# 81a38 AddCarry32_1 [Register(0x7c), Register(0x84), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
30 7c 84 7c 

# 81a3c AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t5bb7) Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "last") })
31 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
# Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
# 81a3d Store8 [Register(0x70), Register(0x7c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t2187] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_n U8 Some('/lutcomp/programs/lib/Queue.j':(25,5))
#       Assign { target: Index("values", PtrFieldDeref("s", "last")), var_type: None, value: Ident("n") }
06 70 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32 `.
# 81a40 LoadImm32 [Register(0x88), Constant32(0x000f1168=987496)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32 `.
20 88 68 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32 `.
# 81a46 LoadImm32 [Register(0x88), Constant32(0x000f1168=987496)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff <- 0n987496/0x000f1168u32 `.
20 88 68 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# PtrFieldDeref("s", "last")
# 81a4c Load8 [Register(0x88), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
#       PtrFieldDeref("s", "last")
05 88 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
# 81a4f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
04 00 01 

# 81a52 Add8NoCarryIn [Register(0x80), Register(0x00), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t3ee Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1))
14 80 00 70 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
# 81a56 Store8 [Register(0x70), Register(0x88)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_tc1ff] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_t6778 U8 Some('/lutcomp/programs/lib/Queue.j':(26,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "last"), Number(U8, 1)) }
06 70 88 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push)], resolved: None }
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_push_38_function_end_queue_push
# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 81a59 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 8a 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_0_5 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_0_5
# inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# Ident("keyboard_enable")
# 81a5d LoadImm32 [Register(0x74), Constant32(0x000f1008=987144)]
#       inline_RpnCalc_run_getchar_39_t0 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
#       Ident("keyboard_enable")
20 74 08 10 0f 00 

# inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# Ident("keyboard_enable")
# 81a63 Load8 [Register(0x74), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_teb6e <- mem[inline_RpnCalc_run_getchar_39_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
#       Ident("keyboard_enable")
05 74 70 

# inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 81a66 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 78 00 

# if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
# 81a69 Cmp8 [Register(0x70), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
15 70 78 

# 81a6c JzImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_else_1_7)]
#       if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Comparison { op: NotEquals, left: Ident("keyboard_enable"), right: Number(U8, 0) }
72 8a 1a 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_RpnCalc_run_getchar_39_teb6e != inline_RpnCalc_run_getchar_39_tb36e then 'inline_RpnCalc_run_getchar_39_getchar_if_true_1_6' else 'inline_RpnCalc_run_getchar_39_getchar_if_else_1_7' Some('/lutcomp/programs/lib/stdio.j':(21,5))\nComparison { op: NotEquals, left: Ident(\"keyboard_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_getchar_if_true_1_6)], resolved: None }
# :inline_RpnCalc_run_getchar_39_getchar_if_true_1_6 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_true_1_6
# None <= call Keyboard_poll() Some('/lutcomp/programs/lib/stdio.j':(21,5))
# VoidExpression { expression: Call(Call { function: "Keyboard_poll", parameters: [] }) }
# Call(Call { function: "Keyboard_poll", parameters: [] })
# Registers used by this function: {108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139}
# Registers used by callee tree: {24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52}
# Registers to save: []
# 81a70 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c fc ff ff ff 

# 81a76 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:Keyboard_poll))
25 0c 80 1a 08 00 

# 81a7c JmpImm [Label24(:Keyboard_poll)]
#       PseudoCall(Label24(:Keyboard_poll))
70 46 08 08 

# 81a80 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:Keyboard_poll))
32 0c 04 00 00 00 

# goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 81a86 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_if_end_3)]
#       goto inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 8a 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_if_else_1_7 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_else_1_7
# :inline_RpnCalc_run_getchar_39_getchar_if_end_3 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_if_end_3
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
# Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
# Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987236/0x000f1064u32 `.
# 81a8a LoadImm32 [Register(0x74), Constant32(0x000f1064=987236)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987236/0x000f1064u32  Some('/lutcomp/programs/lib/stdio.j':(21,5))
#       Assign { target: Ident("ch"), var_type: None, value: Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] }) }
#       Call(Call { function: "queue_pop", parameters: [AddressOf(Ident("stdin"))] })
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- inline_RpnCalc_run_getchar_39_tfff6 U32` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s <- 0n987236/0x000f1064u32 `.
20 74 64 10 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
# 81a90 LoadImm32 [Register(0x7c), Constant32(0x000f1164=987492)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
20 7c 64 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "first")
# 81a96 Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "first")
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987496/0x000f1168u32 `.
# 81a99 LoadImm32 [Register(0x7c), Constant32(0x000f1168=987496)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff <- 0n987496/0x000f1168u32 `.
20 7c 68 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# PtrFieldDeref("s", "last")
# 81a9f Load8 [Register(0x7c), Register(0x78)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tc1ff] U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
#       PtrFieldDeref("s", "last")
05 7c 78 

# if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
# 81aa2 Cmp8 [Register(0x80), Register(0x78)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
15 80 78 

# 81aa5 JzImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
72 ad 1a 08 

# 81aa9 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2)]
#       if inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd == inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t3ee then 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1' else 'inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2' Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }
70 b8 1a 08 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: PtrFieldDeref("s", "first"), right: PtrFieldDeref("s", "last") }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_true_0_1
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 81aad LoadImm8 [Register(0x70), Constant8(0x00=0)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 70 00 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(13,5))\nReturn { value: Some(Number(U8, 0)) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
# Return { value: Some(Number(U8, 0)) }
# 81ab0 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(13,5))
#       Return { value: Some(Number(U8, 0)) }
70 f3 1a 08 

# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# 81ab4 JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
70 b8 1a 08 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_else_0_2
# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0 Some('/lutcomp/programs/lib/Queue.j':(13,5))
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_queue_pop_if_end_0
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
# 81ab8 LoadImm32 [Register(0x7c), Constant32(0x000f1164=987492)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
20 7c 64 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# PtrFieldDeref("s", "first")
# 81abe Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
#       PtrFieldDeref("s", "first")
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
# 81ac1 LoadImm32 [Register(0x7c), Constant32(0x00000000=0)]
#       Zero-pad for inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
20 7c 00 00 00 00 

# 81ac7 Copy8 [Register(0x80), Register(0x7c)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469 U32 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }
0b 80 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
# 81aca ClearCarry []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
03 

# 81acb AddCarry32_1 [Register(0x74), Register(0x7c), Register(0x74)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
30 74 7c 74 

# 81acf AddCarry32_2 []
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_s Add Var(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb469) Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Number(U8))), new_type: Number(USIZE), value: Ident("values") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: PtrFieldDeref("s", "first") })
31 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
# Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
# Index("values", PtrFieldDeref("s", "first"))
# 81ad0 Load8 [Register(0x74), Register(0x81)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tae11] U8 Some('/lutcomp/programs/lib/Queue.j':(18,5))
#       Assign { target: Ident("value"), var_type: Some(Number(U8)), value: Index("values", PtrFieldDeref("s", "first")) }
#       Index("values", PtrFieldDeref("s", "first"))
05 74 81 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
# 81ad3 LoadImm32 [Register(0x7c), Constant32(0x000f1164=987492)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
20 7c 64 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
# 81ad9 LoadImm32 [Register(0x7c), Constant32(0x000f1164=987492)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
#       # In IlFunctionId("RpnCalc_run"), replacing `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702 <- 0n987492/0x000f1164u32 `.
20 7c 64 11 0f 00 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# PtrFieldDeref("s", "first")
# 81adf Load8 [Register(0x7c), Register(0x80)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd <- mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
#       PtrFieldDeref("s", "first")
05 7c 80 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
# 81ae2 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
04 00 01 

# 81ae5 Add8NoCarryIn [Register(0x80), Register(0x00), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb6dd Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
#       Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1))
14 80 00 70 

# mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
# 81ae9 Store8 [Register(0x70), Register(0x7c)]
#       mem[inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_tb702] <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t6fdb U8 Some('/lutcomp/programs/lib/Queue.j':(19,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("s", "first"), Number(U8, 1)) }
06 70 7c 

# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# Ident("value")
# 81aec Copy8 [Register(0x81), Register(0x70)]
#       inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_value U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
#       Ident("value")
0b 81 70 

# inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_ch <- inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_t44ed U8 Some('/lutcomp/programs/lib/Queue.j':(20,5))\nReturn { value: Some(Ident(\"value\")) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
# Return { value: Some(Ident("value")) }
# 81aef JmpImm [Label24(inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop)]
#       goto inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop Some('/lutcomp/programs/lib/Queue.j':(20,5))
#       Return { value: Some(Ident("value")) }
70 f3 1a 08 

# :inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop None
# inline_RpnCalc_run_getchar_39_inline_getchar_queue_pop_36_function_end_queue_pop
# goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# 81af3 JmpImm [Label24(inline_RpnCalc_run_getchar_39_getchar_while_predicate_0)]
#       goto inline_RpnCalc_run_getchar_39_getchar_while_predicate_0 Some('/lutcomp/programs/lib/stdio.j':(21,5))
70 00 1a 08 

# :inline_RpnCalc_run_getchar_39_getchar_while_end_2 Some('/lutcomp/programs/lib/stdio.j':(21,5))
# inline_RpnCalc_run_getchar_39_getchar_while_end_2
# inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "inline_RpnCalc_run_getchar_39_tdcd9 <- inline_RpnCalc_run_getchar_39_ch U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# optimized away noop copy Instruction { source: "ch <- inline_RpnCalc_run_getchar_39_tdcd9 U8 Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# goto inline_RpnCalc_run_getchar_39_function_end_getchar Some('/lutcomp/programs/lib/stdio.j':(31,5))
# Return { value: Some(Ident("ch")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_RpnCalc_run_getchar_39_function_end_getchar Some('/lutcomp/programs/lib/stdio.j':(31,5))\nReturn { value: Some(Ident(\"ch\")) }\n", opcode: JmpImm, args: [Label24(inline_RpnCalc_run_getchar_39_function_end_getchar)], resolved: None }
# :inline_RpnCalc_run_getchar_39_function_end_getchar None
# inline_RpnCalc_run_getchar_39_function_end_getchar
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nAssign { target: Ident(\"result\"), var_type: Some(Number(U8)), value: Call(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] }) }\nCall(Call { function: \"RpnCalc_handle\", parameters: [Ident(\"calc\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
# Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
# 81af7 Copy32 [Register(0x6c), Register(0x00)]
#       Arg0[c]=calc Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
21 6c 00 

# 81afa Copy8 [Register(0x70), Register(0x04)]
#       Arg1[ch]=tdcd9 Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 70 04 

# Registers used by this function: {108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 138, 139]
# 81afd Push8 [Register(0x8b)]
#       Saving reg0x8b before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8b 

# 81aff Push8 [Register(0x8a)]
#       Saving reg0x8a before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 8a 

# 81b01 Push8 [Register(0x89)]
#       Saving reg0x89 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 89 

# 81b03 Push8 [Register(0x88)]
#       Saving reg0x88 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 88 

# 81b05 Push8 [Register(0x86)]
#       Saving reg0x86 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 86 

# 81b07 Push8 [Register(0x85)]
#       Saving reg0x85 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 85 

# 81b09 Push8 [Register(0x84)]
#       Saving reg0x84 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 84 

# 81b0b Push8 [Register(0x81)]
#       Saving reg0x81 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 81 

# 81b0d Push8 [Register(0x80)]
#       Saving reg0x80 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 80 

# 81b0f Push8 [Register(0x7f)]
#       Saving reg0x7f before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7f 

# 81b11 Push8 [Register(0x7e)]
#       Saving reg0x7e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7e 

# 81b13 Push8 [Register(0x7d)]
#       Saving reg0x7d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7d 

# 81b15 Push8 [Register(0x7c)]
#       Saving reg0x7c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 7c 

# 81b17 Push8 [Register(0x78)]
#       Saving reg0x78 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 78 

# 81b19 Push8 [Register(0x77)]
#       Saving reg0x77 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 77 

# 81b1b Push8 [Register(0x76)]
#       Saving reg0x76 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 76 

# 81b1d Push8 [Register(0x75)]
#       Saving reg0x75 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 75 

# 81b1f Push8 [Register(0x74)]
#       Saving reg0x74 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 74 

# 81b21 Push8 [Register(0x70)]
#       Saving reg0x70 before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 70 

# 81b23 Push8 [Register(0x6f)]
#       Saving reg0x6f before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6f 

# 81b25 Push8 [Register(0x6e)]
#       Saving reg0x6e before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6e 

# 81b27 Push8 [Register(0x6d)]
#       Saving reg0x6d before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6d 

# 81b29 Push8 [Register(0x6c)]
#       Saving reg0x6c before Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
09 6c 

# 81b2b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c fc ff ff ff 

# 81b31 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_handle))
25 0c 3b 1b 08 00 

# 81b37 JmpImm [Label24(:RpnCalc_handle)]
#       PseudoCall(Label24(:RpnCalc_handle))
70 a4 09 08 

# 81b3b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_handle))
32 0c 04 00 00 00 

# 81b41 Pop8 [Register(0x6c)]
#       Restoring reg0x6c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6c 

# 81b43 Pop8 [Register(0x6d)]
#       Restoring reg0x6d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6d 

# 81b45 Pop8 [Register(0x6e)]
#       Restoring reg0x6e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6e 

# 81b47 Pop8 [Register(0x6f)]
#       Restoring reg0x6f after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 6f 

# 81b49 Pop8 [Register(0x70)]
#       Restoring reg0x70 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 70 

# 81b4b Pop8 [Register(0x74)]
#       Restoring reg0x74 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 74 

# 81b4d Pop8 [Register(0x75)]
#       Restoring reg0x75 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 75 

# 81b4f Pop8 [Register(0x76)]
#       Restoring reg0x76 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 76 

# 81b51 Pop8 [Register(0x77)]
#       Restoring reg0x77 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 77 

# 81b53 Pop8 [Register(0x78)]
#       Restoring reg0x78 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 78 

# 81b55 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7c 

# 81b57 Pop8 [Register(0x7d)]
#       Restoring reg0x7d after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7d 

# 81b59 Pop8 [Register(0x7e)]
#       Restoring reg0x7e after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7e 

# 81b5b Pop8 [Register(0x7f)]
#       Restoring reg0x7f after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 7f 

# 81b5d Pop8 [Register(0x80)]
#       Restoring reg0x80 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 80 

# 81b5f Pop8 [Register(0x81)]
#       Restoring reg0x81 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 81 

# 81b61 Pop8 [Register(0x84)]
#       Restoring reg0x84 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 84 

# 81b63 Pop8 [Register(0x85)]
#       Restoring reg0x85 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 85 

# 81b65 Pop8 [Register(0x86)]
#       Restoring reg0x86 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 86 

# 81b67 Pop8 [Register(0x88)]
#       Restoring reg0x88 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 88 

# 81b69 Pop8 [Register(0x89)]
#       Restoring reg0x89 after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 89 

# 81b6b Pop8 [Register(0x8a)]
#       Restoring reg0x8a after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8a 

# 81b6d Pop8 [Register(0x8b)]
#       Restoring reg0x8b after Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0a 8b 

# 81b6f Copy8 [Register(0x00), Register(0x70)]
#       Some(result) <= call RpnCalc_handle(calc,tdcd9,) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Assign { target: Ident("result"), var_type: Some(Number(U8)), value: Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] }) }
#       Call(Call { function: "RpnCalc_handle", parameters: [Ident("calc"), Ident("ch")] })
0b 00 70 

# t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# Ident("result")
# optimized away noop copy Instruction { source: "t57fd <- result U8 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"result\"), right: Number(U8, 0) }\nIdent(\"result\")\n", opcode: Copy8, args: [Register(0x70), Register(0x70)], resolved: None }
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# Number(U8, 0)
# 81b72 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
#       Number(U8, 0)
04 78 00 

# if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
# 81b75 Cmp8 [Register(0x70), Register(0x78)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
15 70 78 

# 81b78 JzImm [Label24(RpnCalc_run_if_true_0_4)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
72 80 1b 08 

# 81b7c JmpImm [Label24(RpnCalc_run_if_else_0_5)]
#       if t57fd == tb36e then 'RpnCalc_run_if_true_0_4' else 'RpnCalc_run_if_else_0_5' Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }
70 8c 1b 08 

# :RpnCalc_run_if_true_0_4 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("result"), right: Number(U8, 0) }, [Return { value: Some(Number(U8, 0)) }])], else_block: [] }
# RpnCalc_run_if_true_0_4
# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(U8, 0)) }
# Number(U8, 0)
# 81b80 LoadImm8 [Register(0x78), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(U8, 0)) }
#       Number(U8, 0)
04 78 00 

# return Some(tb36e) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# Return { value: Some(Number(U8, 0)) }
# 81b83 Copy8 [Register(0x78), Register(0x00)]
#       return Some(tb36e) Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
#       Return { value: Some(Number(U8, 0)) }
0b 78 00 

# 81b86 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 81b88 JmpImm [Label24(RpnCalc_run_if_end_3)]
#       goto RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 8c 1b 08 

# :RpnCalc_run_if_else_0_5 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_else_0_5
# :RpnCalc_run_if_end_3 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_if_end_3
# goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# 81b8c JmpImm [Label24(RpnCalc_run_while_predicate_0)]
#       goto RpnCalc_run_while_predicate_0 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
70 ec 19 08 

# :RpnCalc_run_while_end_2 Some('/lutcomp/programs/lib/rpnlib.j':(122,5))
# RpnCalc_run_while_end_2
# :function_end_RpnCalc_run None
# function_end_RpnCalc_run
# Unreachable None
# 81b90 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :delay
# Ret None
# Arg0=x
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([140, 141, 142, 143]) [0, 0, 0, 0]
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([144, 145, 146, 147])
# Var x (Arg0 x Number(USIZE)) Reg(U32) Some([144, 145, 146, 147])
# 81b95 Copy32 [Register(0x00), Register(0x90)]
#       Save function parameter 'x' registers [0, 1, 2, 3] to locals [144, 145, 146, 147].
21 00 90 

# :delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# delay_while_predicate_0
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81b98 LoadImm32 [Register(0x8c), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 8c 00 00 00 00 

# if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
# 81b9e Cmp8 [Register(0x93), Register(0x8f)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
15 93 8f 

# 81ba1 Cmp8IfZero [Register(0x92), Register(0x8e)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 92 8e 

# 81ba4 Cmp8IfZero [Register(0x91), Register(0x8d)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 91 8d 

# 81ba7 Cmp8IfZero [Register(0x90), Register(0x8c)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
16 90 8c 

# 81baa JzImm [Label24(delay_while_end_2)]
#       if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))
#       While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
#       Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }
72 b8 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 != t60ec then 'delay_while_body_1' else 'delay_while_end_2' Some('/lutcomp/programs/lib/delay.j':(2,5))\nWhile { predicate: Comparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }] }\nComparison { op: NotEquals, left: Ident(\"x\"), right: Number(USIZE, 0) }\n", opcode: JmpImm, args: [Label24(delay_while_body_1)], resolved: None }
# :delay_while_body_1 Some('/lutcomp/programs/lib/delay.j':(2,5))
# While { predicate: Comparison { op: NotEquals, left: Ident("x"), right: Number(USIZE, 0) }, while_true: [Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }] }
# delay_while_body_1
# tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
# Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/delay.j':(2,5))\nAssign { target: Ident(\"x\"), var_type: None, value: Arithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1)) }\nArithmetic(Subtract, Ident(\"x\"), Number(USIZE, 1))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0x90), Register(0x90)], resolved: None }
# x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
# Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
# Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
# 81bae AddImm32IgnoreCarry [Register(0x90), Constant32(0xffffffff=4294967295)]
#       x <- tad57 Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/delay.j':(2,5))
#       Assign { target: Ident("x"), var_type: None, value: Arithmetic(Subtract, Ident("x"), Number(USIZE, 1)) }
#       Arithmetic(Subtract, Ident("x"), Number(USIZE, 1))
32 90 ff ff ff ff 

# goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
# 81bb4 JmpImm [Label24(delay_while_predicate_0)]
#       goto delay_while_predicate_0 Some('/lutcomp/programs/lib/delay.j':(2,5))
70 98 1b 08 

# :delay_while_end_2 Some('/lutcomp/programs/lib/delay.j':(2,5))
# delay_while_end_2
# return None None
# Return { value: None }
# 81bb8 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_delay None
# function_end_delay
# Unreachable None
# 81bba Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :div32
# Ret Some(U32)
# Arg0=a
# Arg1=b
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([148, 149, 150, 151])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([152, 153, 154, 155])
# Var hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_a (Arg0 a Number(USIZE)) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_b (Arg1 b Number(USIZE)) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_hi (Local hi Number(USIZE) Reg(U32)) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_a (Arg0 a Number(USIZE)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_b (Arg1 b Number(USIZE)) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t3585 (t3585 Ident("e")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 (t45f5 Ident("d")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([177])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac13 (tac13 Ident("c")) Reg(U32) Some([168, 169, 170, 171])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tace9 (tace9 Ident("b")) Reg(U32) Some([164, 165, 166, 167])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([179]) [0]
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([177])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([172, 173, 174, 175])
# Var inline_div32_div16_43_inline_div16_mul16_32_4_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([180, 181, 182, 183])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_a (Arg0 a Number(USIZE)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([176])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([184])
# Var inline_div32_div16_43_inline_div16_shiftright1_42_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([178])
# Var inline_div32_div16_43_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([188, 189, 190, 191])
# Var inline_div32_div16_43_mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([192, 193, 194, 195])
# Var inline_div32_div16_43_r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_t1506 (t1506 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_t3c0e (t3c0e Index("b", Number(U8, 0))) Reg(U8) Some([196])
# Var inline_div32_div16_43_t5508 (t5508 Ident("hi")) Reg(U32) Some([156, 157, 158, 159])
# Var inline_div32_div16_43_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([148, 149, 150, 151]) [0, 0, 0, 0]
# Var inline_div32_div16_43_t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([156, 157, 158, 159]) [0, 1, 0, 0]
# Var inline_div32_div16_43_tace9 (tace9 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var inline_div32_div16_43_tad57 (tad57 Ident("x")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_taee0 (taee0 Ident("r")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_tb0a8 (tb0a8 Index("x", Number(U8, 2))) Reg(U8) Some([176])
# Var inline_div32_div16_43_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([178]) [0]
# Var inline_div32_div16_43_tda9f (tda9f Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))) Reg(U8) Some([196])
# Var inline_div32_div16_43_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([197])
# Var inline_div32_div16_43_te264 (te264 Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) Reg(U32) Some([148, 149, 150, 151])
# Var inline_div32_div16_43_tf1d1 (tf1d1 Arithmetic(Add, Ident("lo"), Ident("hi"))) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_tf944 (tf944 Index("x", Number(U8, 3))) Reg(U8) Some([176])
# Var inline_div32_div16_43_tfd7e (tfd7e Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_div16_43_x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_a (Arg0 a Number(USIZE)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_44_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_44_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_44_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_44_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_44_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_a (Arg0 a Number(USIZE)) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_45_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_45_t1bbf (t1bbf Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_t1f15 (t1f15 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_t350e (t350e Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_t4d1a (t4d1a Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_t5a19 (t5a19 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_t5a73 (t5a73 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([176])
# Var inline_div32_shiftright1_45_t8384 (t8384 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_t8792 (t8792 Ident("a")) Reg(U32) Some([160, 161, 162, 163])
# Var inline_div32_shiftright1_45_t887d (t887d Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_t9144 (t9144 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_ta431 (ta431 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_taa3e (taa3e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_tb911 (tb911 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))) Reg(U8) Some([178])
# Var inline_div32_shiftright1_45_tc29b (tc29b Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([184])
# Var inline_div32_shiftright1_45_tf572 (tf572 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))) Reg(U8) Some([178])
# Var lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([172, 173, 174, 175])
# Var mid (Local mid Number(USIZE) Reg(U32)) Reg(U32) Some([160, 161, 162, 163])
# Var r (Local r Number(USIZE) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# Var t1506 (t1506 Ident("lo")) Reg(U32) Some([160, 161, 162, 163])
# Var t3803 (t3803 Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) Reg(U32) Some([160, 161, 162, 163])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([164, 165, 166, 167])
# Var t4917 (t4917 Number(USIZE, 65536)) Reg(U32) Some([156, 157, 158, 159]) [0, 0, 1, 0]
# Var t5508 (t5508 Ident("hi")) Reg(U32) Some([156, 157, 158, 159])
# Var t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([164, 165, 166, 167]) [0, 0, 0, 0]
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([148, 149, 150, 151])
# Var t9599 (t9599 Call(Call { function: "shiftright1", parameters: [Ident("lo")] })) Reg(U32) Some([180, 181, 182, 183])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([152, 153, 154, 155])
# Var tad57 (tad57 Ident("x")) Reg(U32) Some([164, 165, 166, 167])
# Var taee0 (taee0 Ident("r")) Reg(U32) Some([164, 165, 166, 167])
# Var tb608 (tb608 AddressOf(Ident("x64"))) Reg(U32) Some([164, 165, 166, 167])
# Var tb973 (tb973 LocalFieldDeref("x64", "hi")) Reg(U32) Some([168, 169, 170, 171])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([200, 201, 202, 203])
# Var te81f (te81f Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([148, 149, 150, 151])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([200, 201, 202, 203])
# Var tfd7e (tfd7e Ident("mid")) Reg(U32) Some([160, 161, 162, 163])
# Var x (Local x Number(USIZE) Reg(U32)) Reg(U32) Some([164, 165, 166, 167])
# 81bbf AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 81bc5 Copy32 [Register(0x00), Register(0x94)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [148, 149, 150, 151].
21 00 94 

# 81bc8 Copy32 [Register(0x04), Register(0x98)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [152, 153, 154, 155].
21 04 98 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 81bcb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81bd1 Cmp8 [Register(0x9b), Register(0x97)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9b 97 

# 81bd4 Cmp8IfZero [Register(0x9a), Register(0x96)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9a 96 

# 81bd7 Cmp8IfZero [Register(0x99), Register(0x95)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 99 95 

# 81bda Cmp8IfZero [Register(0x98), Register(0x94)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 98 94 

# 81bdd JcImm [Label24(div32_if_else_0_2)]
#       if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 fc 1b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < tace9 then 'div32_if_true_0_1' else 'div32_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(67,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_1)], resolved: None }
# :div32_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(67,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# div32_if_true_0_1
# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# Number(USIZE, 0)
# 81be1 LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
#       Number(USIZE, 0)
20 a4 00 00 00 00 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# 81be7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
32 0c 08 00 00 00 

# return Some(t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
# Return { value: Some(Number(USIZE, 0)) }
# 81bed Copy32 [Register(0xa4), Register(0x00)]
#       return Some(t60ec) Some('/lutcomp/programs/lib/div.j':(67,5))
#       Return { value: Some(Number(USIZE, 0)) }
21 a4 00 

# 81bf0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 81bf6 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# 81bf8 JmpImm [Label24(div32_if_end_0)]
#       goto div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
70 fc 1b 08 

# :div32_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_else_0_2
# :div32_if_end_0 Some('/lutcomp/programs/lib/div.j':(67,5))
# div32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# Number(USIZE, 65536)
# 81bfc LoadImm32 [Register(0x9c), Constant32(0x00010000=65536)]
#       t4917 <- 0n65536/0x00010000u32  Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
#       Number(USIZE, 65536)
20 9c 00 00 01 00 

# if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
# 81c02 Cmp8 [Register(0x9f), Register(0x97)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
15 9f 97 

# 81c05 Cmp8IfZero [Register(0x9e), Register(0x96)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 9e 96 

# 81c08 Cmp8IfZero [Register(0x9d), Register(0x95)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 9d 95 

# 81c0b Cmp8IfZero [Register(0x9c), Register(0x94)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
16 9c 94 

# 81c0e JcImm [Label24(div32_if_else_0_5)]
#       if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }
71 b9 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t4917 then 'div32_if_true_0_4' else 'div32_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(71,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 65536) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_4)], resolved: None }
# :div32_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(71,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 65536) }, [Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }])], else_block: [] }
# div32_if_true_0_4
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_a <- t8792 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_b <- tace9 U32 Some('/lutcomp/programs/lib/div.j':(71,5))\nReturn { value: Some(Call(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })) }\nCall(Call { function: \"div16\", parameters: [Ident(\"a\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
# 81c12 Cmp8 [Register(0x9b), Register(0x97)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
15 9b 97 

# 81c15 Cmp8IfZero [Register(0x9a), Register(0x96)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 9a 96 

# 81c18 Cmp8IfZero [Register(0x99), Register(0x95)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 99 95 

# 81c1b Cmp8IfZero [Register(0x98), Register(0x94)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
16 98 94 

# 81c1e JcImm [Label24(inline_div32_div16_43_div16_if_else_0_2)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }
71 30 1c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_1' else 'inline_div32_div16_43_div16_if_else_0_2' Some('/lutcomp/programs/lib/div.j':(21,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_1)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_1 Some('/lutcomp/programs/lib/div.j':(21,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Ident("b") }, [Return { value: Some(Number(USIZE, 0)) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_1
# inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# Number(USIZE, 0)
# 81c22 LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       inline_div32_div16_43_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(USIZE, 0)) }
#       Number(USIZE, 0)
20 94 00 00 00 00 

# te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_t60ec U32 Some('/lutcomp/programs/lib/div.j':(21,5))\nReturn { value: Some(Number(USIZE, 0)) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
# Return { value: Some(Number(USIZE, 0)) }
# 81c28 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(21,5))
#       Return { value: Some(Number(USIZE, 0)) }
70 a4 1e 08 

# goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# 81c2c JmpImm [Label24(inline_div32_div16_43_div16_if_end_0)]
#       goto inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
70 30 1c 08 

# :inline_div32_div16_43_div16_if_else_0_2 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_else_0_2
# :inline_div32_div16_43_div16_if_end_0 Some('/lutcomp/programs/lib/div.j':(21,5))
# inline_div32_div16_43_div16_if_end_0
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Number(USIZE, 256)
# 81c30 LoadImm32 [Register(0x9c), Constant32(0x00000100=256)]
#       inline_div32_div16_43_t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Number(USIZE, 256)
20 9c 00 01 00 00 

# if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# 81c36 Cmp8 [Register(0x9f), Register(0x97)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
15 9f 97 

# 81c39 Cmp8IfZero [Register(0x9e), Register(0x96)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 9e 96 

# 81c3c Cmp8IfZero [Register(0x9d), Register(0x95)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 9d 95 

# 81c3f Cmp8IfZero [Register(0x9c), Register(0x94)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 9c 94 

# 81c42 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_5)]
#       if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
71 61 1c 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t8792 < inline_div32_div16_43_t9c15 then 'inline_div32_div16_43_div16_if_true_0_4' else 'inline_div32_div16_43_div16_if_else_0_5' Some('/lutcomp/programs/lib/div.j':(25,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_4)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_4 Some('/lutcomp/programs/lib/div.j':(25,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_4
# inline_div32_div16_43_tdd9e <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# Index("a", Number(U8, 0))
# 81c46 Copy8 [Register(0x94), Register(0xc5)]
#       inline_div32_div16_43_tdd9e <- inline_div32_div16_43_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
#       Index("a", Number(U8, 0))
0b 94 c5 

# inline_div32_div16_43_t3c0e <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# Index("b", Number(U8, 0))
# 81c49 Copy8 [Register(0x98), Register(0xc4)]
#       inline_div32_div16_43_t3c0e <- inline_div32_div16_43_b[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
#       Index("b", Number(U8, 0))
0b 98 c4 

# inline_div32_div16_43_tda9f <- inline_div32_div16_43_tdd9e Divide Var(inline_div32_div16_43_t3c0e) Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
# 81c4c Divide8 [Register(0xc5), Register(0xc4), Register(0xc4)]
#       inline_div32_div16_43_tda9f <- inline_div32_div16_43_tdd9e Divide Var(inline_div32_div16_43_t3c0e) Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
#       Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0)))
17 c5 c4 c4 

# inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
# 81c50 LoadImm32 [Register(0x94), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
20 94 00 00 00 00 

# 81c56 Copy8 [Register(0xc4), Register(0x94)]
#       inline_div32_div16_43_te264 U32 <- inline_div32_div16_43_tda9f U8 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
#       Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }
0b c4 94 

# te81f <- inline_div32_div16_43_te264 U32 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# optimized away noop copy Instruction { source: "te81f <- inline_div32_div16_43_te264 U32 Some('/lutcomp/programs/lib/div.j':(25,5))\nReturn { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index(\"a\", Number(U8, 0)), Index(\"b\", Number(U8, 0))) }) }\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
# Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
# 81c59 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(25,5))
#       Return { value: Some(Cast { old_type: None, new_type: Number(USIZE), value: Arithmetic(Divide, Index("a", Number(U8, 0)), Index("b", Number(U8, 0))) }) }
70 a4 1e 08 

# goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# 81c5d JmpImm [Label24(inline_div32_div16_43_div16_if_end_3)]
#       goto inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
70 61 1c 08 

# :inline_div32_div16_43_div16_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_else_0_5
# :inline_div32_div16_43_div16_if_end_3 Some('/lutcomp/programs/lib/div.j':(25,5))
# inline_div32_div16_43_div16_if_end_3
# inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81c61 LoadImm32 [Register(0xbc), Constant32(0x00000000=0)]
#       inline_div32_div16_43_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(29,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 bc 00 00 00 00 

# inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
# Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }
# Number(USIZE, 65535)
# 81c67 LoadImm32 [Register(0x9c), Constant32(0x0000ffff=65535)]
#       inline_div32_div16_43_hi <- 0n65535/0x0000ffffu32  Some('/lutcomp/programs/lib/div.j':(30,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 65535) }
#       Number(USIZE, 65535)
20 9c ff ff 00 00 

# :inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# inline_div32_div16_43_div16_while_predicate_6
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81c6d Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 bc a0 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81c70 Cmp8 [Register(0x9f), Register(0xa3)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 9f a3 

# 81c73 Cmp8IfZero [Register(0x9e), Register(0xa2)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9e a2 

# 81c76 Cmp8IfZero [Register(0x9d), Register(0xa1)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9d a1 

# 81c79 Cmp8IfZero [Register(0x9c), Register(0xa0)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9c a0 

# 81c7c JcImm [Label24(inline_div32_div16_43_div16_while_end_8)]
#       if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 9a 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_t1506 < inline_div32_div16_43_t5508 then 'inline_div32_div16_43_div16_while_body_7' else 'inline_div32_div16_43_div16_while_end_8' Some('/lutcomp/programs/lib/div.j':(32,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_while_body_7)], resolved: None }
# :inline_div32_div16_43_div16_while_body_7 Some('/lutcomp/programs/lib/div.j':(32,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# inline_div32_div16_43_div16_while_body_7
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("lo")
# 81c80 Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
#       Ident("lo")
21 bc a0 

# inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# Ident("hi")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t5508 <- inline_div32_div16_43_hi U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\nArithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# Arithmetic(Add, Ident("lo"), Ident("hi"))
# 81c83 ClearCarry []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
03 

# 81c84 AddCarry32_1 [Register(0xa0), Register(0x9c), Register(0xa0)]
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
30 a0 9c a0 

# 81c88 AddCarry32_2 []
#       inline_div32_div16_43_tf1d1 <- inline_div32_div16_43_t1506 Add Var(inline_div32_div16_43_t5508) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
#       Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
#       Arithmetic(Add, Ident("lo"), Ident("hi"))
31 

# inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] }) }
# Call(Call { function: "shiftright1", parameters: [Arithmetic(Add, Ident("lo"), Ident("hi"))] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_a <- inline_div32_div16_43_tf1d1 U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] }) }\nCall(Call { function: \"shiftright1\", parameters: [Arithmetic(Add, Ident(\"lo\"), Ident(\"hi\"))] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 81c89 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 81c8c LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 

# 81c8f Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 b8 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 81c94 Copy8 [Register(0xb2), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b b2 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 81c97 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 81c9a LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 

# 81c9d Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_ta431 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 b0 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 81ca2 Copy8 [Register(0xb2), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b b2 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 81ca5 Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 81ca8 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 

# 81cab Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb2), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t350e <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 b2 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 81cb0 Copy8 [Register(0xb2), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b b2 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 81cb3 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 81cb6 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 

# 81cb9 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_taa3e <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 b0 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 81cbe Copy8 [Register(0xb2), Register(0xa3)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b b2 a3 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 81cc1 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 81cc4 Copy8 [Register(0xb8), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
0b b8 b2 

# 81cc7 AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t9144 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
18 b2 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 81cca Copy8 [Register(0xb2), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b b2 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 81ccd Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b a0 b8 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 81cd0 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 81cd3 Copy8 [Register(0xb0), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
0b b0 b2 

# 81cd6 AndImm8 [Register(0xb2), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t8384 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
18 b2 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_tf572 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 81cd9 Or8 [Register(0xb8), Register(0xb2), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tf572 <- inline_div32_div16_43_inline_div16_shiftright1_42_tdd9e BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c b8 b2 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 81cdd Copy8 [Register(0xb2), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x00..0x01] <- inline_div32_div16_43_inline_div16_shiftright1_42_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b b2 a0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 81ce0 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 81ce3 Copy8 [Register(0xb0), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
0b b0 b2 

# 81ce6 AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
18 b2 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 81ce9 Copy8 [Register(0xb2), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b b2 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 81cec Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1539 <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 81cef Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 81cf2 AndImm8 [Register(0xb2), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1f15 <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
18 b2 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 81cf5 Or8 [Register(0xb0), Register(0xb2), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a <- inline_div32_div16_43_inline_div16_shiftright1_42_t1539 BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c b0 b2 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 81cf9 Copy8 [Register(0xb2), Register(0xa1)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x01..0x02] <- inline_div32_div16_43_inline_div16_shiftright1_42_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b b2 a1 

# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 81cfc Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 81cff AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t887d <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
18 b2 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 81d02 Copy8 [Register(0xb2), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b b2 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 81d05 Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t577f <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 81d08 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 81d0b Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
0b b0 b8 

# 81d0e AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tc29b <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
18 b8 80 

# inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 81d11 Or8 [Register(0xb2), Register(0xb8), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf <- inline_div32_div16_43_inline_div16_shiftright1_42_t577f BitwiseOr Var(inline_div32_div16_43_inline_div16_shiftright1_42_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c b2 b8 b2 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 81d15 Copy8 [Register(0xb2), Register(0xa2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x02..0x03] <- inline_div32_div16_43_inline_div16_shiftright1_42_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b b2 a2 

# inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 81d18 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c <- inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b a3 b0 

# inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 81d1b Copy8 [Register(0xb0), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
0b b0 b2 

# 81d1e AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_tb911 <- inline_div32_div16_43_inline_div16_shiftright1_42_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
18 b2 7f 

# inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 81d21 Copy8 [Register(0xb2), Register(0xa3)]
#       inline_div32_div16_43_inline_div16_shiftright1_42_a[0x03..0x04] <- inline_div32_div16_43_inline_div16_shiftright1_42_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b b2 a3 

# inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_shiftright1_42_t8792 <- inline_div32_div16_43_inline_div16_shiftright1_42_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81d24 Copy32 [Register(0xa0), Register(0xc0)]
#       inline_div32_div16_43_mid <- inline_div32_div16_43_inline_div16_shiftright1_42_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a0 c0 

# goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1)], resolved: None }
# :inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1 None
# inline_div32_div16_43_inline_div16_shiftright1_42_function_end_shiftright1
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("mid")
# 81d27 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_a <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"mid\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
# 81d2a Copy32 [Register(0x98), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_b <- inline_div32_div16_43_tace9 U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("mid"), Ident("b")] })
21 98 a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 81d2d Mul8_16 [Register(0xa0), Register(0xa4), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 a0 a4 a8 

# 81d31 LoadImm8 [Register(0xaa), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 aa 00 

# 81d34 LoadImm8 [Register(0xab), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 ab 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 81d37 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 81d3a LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 b4 00 00 00 00 

# 81d40 Copy8 [Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b b0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 81d43 Copy8 [Register(0xa5), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b a5 b2 

# inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 81d46 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 ac 00 00 00 00 

# 81d4c Copy8 [Register(0xb2), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b b2 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 81d4f Mul8_16 [Register(0xb4), Register(0xac), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 b4 ac ac 

# 81d53 LoadImm8 [Register(0xae), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 ae 00 

# 81d56 LoadImm8 [Register(0xaf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 af 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 81d59 Copy8 [Register(0xad), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b ad b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 81d5c Copy8 [Register(0xb1), Register(0xaf)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b b1 af 

# inline_div32_div16_43_inline_div16_mul16_32_4_te25f <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 81d5f Copy8 [Register(0xac), Register(0xb1)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te25f <- inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b ac b1 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 81d62 Copy8 [Register(0xb1), Register(0xae)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b b1 ae 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81d65 LoadImm8 [Register(0xb3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 b3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 81d68 Copy8 [Register(0xb3), Register(0xad)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b b3 ad 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81d6b LoadImm8 [Register(0xb3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 b3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81d6e Copy8 [Register(0xb3), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_f[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b b3 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4 <- inline_div32_div16_43_inline_div16_mul16_32_4_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0xac), Register(0xac)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 81d71 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 81d72 AddCarry32_1 [Register(0xa8), Register(0xac), Register(0xa8)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 a8 ac a8 

# 81d76 AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_c <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t8792 <- inline_div32_div16_43_inline_div16_mul16_32_4_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 81d77 Copy8 [Register(0xa5), Register(0xb2)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b a5 b2 

# inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 81d7a LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 ac 00 00 00 00 

# 81d80 Copy8 [Register(0xb2), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_te8d8 U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b b2 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 81d83 Mul8_16 [Register(0xa0), Register(0xac), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 a0 ac ac 

# 81d87 LoadImm8 [Register(0xae), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 ae 00 

# 81d8a LoadImm8 [Register(0xaf), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t8792 Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 af 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 81d8d Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t1539 <- inline_div32_div16_43_inline_div16_mul16_32_4_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 81d90 LoadImm32 [Register(0xb4), Constant32(0x00000000=0)]
#       Zero-pad for inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 b4 00 00 00 00 

# 81d96 Copy8 [Register(0xb0), Register(0xb4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tff1a U32 <- inline_div32_div16_43_inline_div16_mul16_32_4_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b b0 b4 

# inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tace9 <- inline_div32_div16_43_inline_div16_mul16_32_4_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 81d99 Mul8_16 [Register(0xb4), Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 b4 a4 a0 

# 81d9d LoadImm8 [Register(0xa2), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 a2 00 

# 81da0 LoadImm8 [Register(0xa3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_e <- inline_div32_div16_43_inline_div16_mul16_32_4_tff1a Multiply Var(inline_div32_div16_43_inline_div16_mul16_32_4_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 a3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 81da3 Copy32 [Register(0xac), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 ac a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_t3585 <- inline_div32_div16_43_inline_div16_mul16_32_4_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 81da6 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 81da7 AddCarry32_1 [Register(0xa4), Register(0xa0), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 a4 a0 ac 

# 81dab AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_d <- inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 81dac Copy8 [Register(0xae), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b ae b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 81daf Copy8 [Register(0xb0), Register(0xaf)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x03..0x04] <- inline_div32_div16_43_inline_div16_mul16_32_4_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b b0 af 

# inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 81db2 Copy8 [Register(0xad), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b ad b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 81db5 Copy8 [Register(0xb0), Register(0xae)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x02..0x03] <- inline_div32_div16_43_inline_div16_mul16_32_4_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b b0 ae 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 81db8 Copy8 [Register(0xac), Register(0xb0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tac23 <- inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b ac b0 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 81dbb Copy8 [Register(0xb0), Register(0xad)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x01..0x02] <- inline_div32_div16_43_inline_div16_mul16_32_4_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b b0 ad 

# inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 81dbe LoadImm8 [Register(0xb3), Constant8(0x00=0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 b3 00 

# inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 81dc1 Copy8 [Register(0xb3), Register(0xac)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_d[0x00..0x01] <- inline_div32_div16_43_inline_div16_mul16_32_4_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b b3 ac 

# inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_inline_div16_mul16_32_4_tac13 <- inline_div32_div16_43_inline_div16_mul16_32_4_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0xa8), Register(0xa8)], resolved: None }
# inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 81dc4 Copy32 [Register(0xac), Register(0xa4)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_t45f5 <- inline_div32_div16_43_inline_div16_mul16_32_4_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 ac a4 

# inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 81dc7 ClearCarry []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 81dc8 AddCarry32_1 [Register(0xa8), Register(0xa4), Register(0xa0)]
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 a8 a4 a0 

# 81dcc AddCarry32_2 []
#       inline_div32_div16_43_inline_div16_mul16_32_4_ta65d <- inline_div32_div16_43_inline_div16_mul16_32_4_tac13 Add Var(inline_div32_div16_43_inline_div16_mul16_32_4_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "inline_div32_div16_43_x <- inline_div32_div16_43_inline_div16_mul16_32_4_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32)], resolved: None }
# :inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32 None
# inline_div32_div16_43_inline_div16_mul16_32_4_function_end_mul16_32
# inline_div32_div16_43_tb0a8 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# Index("x", Number(U8, 2))
# 81dcd Copy8 [Register(0xa2), Register(0xb0)]
#       inline_div32_div16_43_tb0a8 <- inline_div32_div16_43_x[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
#       Index("x", Number(U8, 2))
0b a2 b0 

# inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# Number(U8, 0)
# 81dd0 LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
#       Number(U8, 0)
04 b2 00 

# if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
# 81dd3 Cmp8 [Register(0xb0), Register(0xb2)]
#       if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
15 b0 b2 

# 81dd6 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_11)]
#       if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }
71 ee 1d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tb0a8 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_10' else 'inline_div32_div16_43_div16_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(U8, 2)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_10)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 2)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_10
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 81dda Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 81ddd Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 a0 9c 

# 81de0 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81de6 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 6d 1c 08 

# goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81dea JmpImm [Label24(inline_div32_div16_43_div16_if_end_9)]
#       goto inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
70 ee 1d 08 

# :inline_div32_div16_43_div16_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_11
# :inline_div32_div16_43_div16_if_end_9 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_9
# inline_div32_div16_43_tf944 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# Index("x", Number(U8, 3))
# 81dee Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_div16_43_tf944 <- inline_div32_div16_43_x[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
#       Index("x", Number(U8, 3))
0b a3 b0 

# inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# Number(U8, 0)
# 81df1 LoadImm8 [Register(0xb2), Constant8(0x00=0)]
#       inline_div32_div16_43_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
#       Number(U8, 0)
04 b2 00 

# if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
# 81df4 Cmp8 [Register(0xb0), Register(0xb2)]
#       if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
15 b0 b2 

# 81df7 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_14)]
#       if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }
71 0f 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tf944 > inline_div32_div16_43_tb36e then 'inline_div32_div16_43_div16_if_true_0_13' else 'inline_div32_div16_43_div16_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Index(\"x\", Number(U8, 3)), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_13)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Index("x", Number(U8, 3)), right: Number(U8, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_13
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 81dfb Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 81dfe Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 a0 9c 

# 81e01 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81e07 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 6d 1c 08 

# goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81e0b JmpImm [Label24(inline_div32_div16_43_div16_if_end_12)]
#       goto inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
70 0f 1e 08 

# :inline_div32_div16_43_div16_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_14
# :inline_div32_div16_43_div16_if_end_12 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_12
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 81e0f Cmp8 [Register(0xa3), Register(0x97)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 81e12 Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 81e15 Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 81e18 Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 81e1b JcImm [Label24(inline_div32_div16_43_div16_if_else_0_17)]
#       if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 33 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_tad57 > inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_16' else 'inline_div32_div16_43_div16_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_16)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_16
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 81e1f Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 81e22 Copy32 [Register(0xa0), Register(0x9c)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 a0 9c 

# 81e25 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       inline_div32_div16_43_hi <- inline_div32_div16_43_tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 9c ff ff ff ff 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# Continue
# 81e2b JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Continue
70 6d 1c 08 

# goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81e2f JmpImm [Label24(inline_div32_div16_43_div16_if_end_15)]
#       goto inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
70 33 1e 08 

# :inline_div32_div16_43_div16_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_17
# :inline_div32_div16_43_div16_if_end_15 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_15
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 81e33 Cmp8 [Register(0xa3), Register(0x97)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a3 97 

# 81e36 Cmp8IfZero [Register(0xa2), Register(0x96)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a2 96 

# 81e39 Cmp8IfZero [Register(0xa1), Register(0x95)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a1 95 

# 81e3c Cmp8IfZero [Register(0xa0), Register(0x94)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a0 94 

# 81e3f JzImm [Label24(inline_div32_div16_43_div16_if_true_0_19)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 47 1e 08 

# 81e43 JmpImm [Label24(inline_div32_div16_43_div16_if_else_0_20)]
#       if inline_div32_div16_43_tad57 == inline_div32_div16_43_t8792 then 'inline_div32_div16_43_div16_if_true_0_19' else 'inline_div32_div16_43_div16_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 55 1e 08 

# :inline_div32_div16_43_div16_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_19
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81e47 Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c0 a0 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81e4a Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81e4d JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 a4 1e 08 

# goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81e51 JmpImm [Label24(inline_div32_div16_43_div16_if_end_18)]
#       goto inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
70 55 1e 08 

# :inline_div32_div16_43_div16_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_20
# :inline_div32_div16_43_div16_if_end_18 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_18
# inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_t8792 <- inline_div32_div16_43_a U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tad57 <- inline_div32_div16_43_x U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 81e55 Copy32 [Register(0xa0), Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a0 00 

# 81e58 Invert8 [Register(0x00)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 81e5a Invert8 [Register(0x01)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 81e5c Invert8 [Register(0x02)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 81e5e Invert8 [Register(0x03)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 81e60 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 81e66 ClearCarry []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 81e67 AddCarry32_1 [Register(0x94), Register(0x00), Register(0xa0)]
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 94 00 a0 

# 81e6b AddCarry32_2 []
#       inline_div32_div16_43_r <- inline_div32_div16_43_t8792 Subtract Var(inline_div32_div16_43_tad57) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_taee0 <- inline_div32_div16_43_r U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "inline_div32_div16_43_tace9 <- inline_div32_div16_43_b U32 Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 81e6c Cmp8 [Register(0x9b), Register(0xa3)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9b a3 

# 81e6f Cmp8IfZero [Register(0x9a), Register(0xa2)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9a a2 

# 81e72 Cmp8IfZero [Register(0x99), Register(0xa1)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 99 a1 

# 81e75 Cmp8IfZero [Register(0x98), Register(0xa0)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 98 a0 

# 81e78 JcImm [Label24(inline_div32_div16_43_div16_if_else_0_23)]
#       if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 8a 1e 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_div32_div16_43_taee0 < inline_div32_div16_43_tace9 then 'inline_div32_div16_43_div16_if_true_0_22' else 'inline_div32_div16_43_div16_if_else_0_23' Some('/lutcomp/programs/lib/div.j':(32,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(inline_div32_div16_43_div16_if_true_0_22)], resolved: None }
# :inline_div32_div16_43_div16_if_true_0_22 Some('/lutcomp/programs/lib/div.j':(32,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# inline_div32_div16_43_div16_if_true_0_22
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# 81e7c Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
#       Ident("mid")
21 c0 a0 

# te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81e7f Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_tfd7e U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
# Return { value: Some(Ident("mid")) }
# 81e82 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Return { value: Some(Ident("mid")) }
70 a4 1e 08 

# goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81e86 JmpImm [Label24(inline_div32_div16_43_div16_if_end_21)]
#       goto inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
70 8a 1e 08 

# :inline_div32_div16_43_div16_if_else_0_23 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_else_0_23
# :inline_div32_div16_43_div16_if_end_21 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_if_end_21
# inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# Ident("mid")
# 81e8a Copy32 [Register(0xc0), Register(0xa0)]
#       inline_div32_div16_43_tfd7e <- inline_div32_div16_43_mid U32 Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
#       Ident("mid")
21 c0 a0 

# inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# 81e8d Copy32 [Register(0xa0), Register(0xbc)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
21 a0 bc 

# 81e90 AddImm32IgnoreCarry [Register(0xbc), Constant32(0x00000001=1)]
#       inline_div32_div16_43_lo <- inline_div32_div16_43_tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(32,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
32 bc 01 00 00 00 

# goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
# 81e96 JmpImm [Label24(inline_div32_div16_43_div16_while_predicate_6)]
#       goto inline_div32_div16_43_div16_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(32,5))
70 6d 1c 08 

# :inline_div32_div16_43_div16_while_end_8 Some('/lutcomp/programs/lib/div.j':(32,5))
# inline_div32_div16_43_div16_while_end_8
# inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 81e9a Copy32 [Register(0xbc), Register(0xa0)]
#       inline_div32_div16_43_t1506 <- inline_div32_div16_43_lo U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 bc a0 

# te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 81e9d Copy32 [Register(0xa0), Register(0x94)]
#       te81f <- inline_div32_div16_43_t1506 U32 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
21 a0 94 

# goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(63,5))
# Return { value: Some(Ident("lo")) }
# 81ea0 JmpImm [Label24(inline_div32_div16_43_function_end_div16)]
#       goto inline_div32_div16_43_function_end_div16 Some('/lutcomp/programs/lib/div.j':(63,5))
#       Return { value: Some(Ident("lo")) }
70 a4 1e 08 

# :inline_div32_div16_43_function_end_div16 None
# inline_div32_div16_43_function_end_div16
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81ea4 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
32 0c 08 00 00 00 

# return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
# Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
# 81eaa Copy32 [Register(0x94), Register(0x00)]
#       return Some(te81f) Some('/lutcomp/programs/lib/div.j':(71,5))
#       Return { value: Some(Call(Call { function: "div16", parameters: [Ident("a"), Ident("b")] })) }
21 94 00 

# 81ead AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 81eb3 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# 81eb5 JmpImm [Label24(div32_if_end_3)]
#       goto div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
70 b9 1e 08 

# :div32_if_else_0_5 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_else_0_5
# :div32_if_end_3 Some('/lutcomp/programs/lib/div.j':(71,5))
# div32_if_end_3
# lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 81eb9 LoadImm32 [Register(0xac), Constant32(0x00000000=0)]
#       lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(75,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 ac 00 00 00 00 

# hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
# Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }
# Number(USIZE, 4294967295)
# 81ebf LoadImm32 [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- 0xffffffffu32  Some('/lutcomp/programs/lib/div.j':(76,5))
#       Assign { target: Ident("hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 4294967295) }
#       Number(USIZE, 4294967295)
20 9c ff ff ff ff 

# :div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# div32_while_predicate_6
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("lo")
# 81ec5 Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
#       Ident("lo")
21 ac a0 

# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
# 81ec8 Cmp8 [Register(0x9f), Register(0xa3)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
15 9f a3 

# 81ecb Cmp8IfZero [Register(0x9e), Register(0xa2)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9e a2 

# 81ece Cmp8IfZero [Register(0x9d), Register(0xa1)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9d a1 

# 81ed1 Cmp8IfZero [Register(0x9c), Register(0xa0)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
16 9c a0 

# 81ed4 JcImm [Label24(div32_while_end_8)]
#       if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }
71 11 21 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t1506 < t5508 then 'div32_while_body_7' else 'div32_while_end_8' Some('/lutcomp/programs/lib/div.j':(78,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }, while_true: [Assign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }, Declare { scope: Local, name: \"x64\", var_type: Struct(\"U64\") }, VoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident(\"x\"), var_type: Some(Number(USIZE)), value: LocalFieldDeref(\"x64\", \"lo\") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }, Assign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lo\"), right: Ident(\"hi\") }\n", opcode: JmpImm, args: [Label24(div32_while_body_7)], resolved: None }
# :div32_while_body_7 Some('/lutcomp/programs/lib/div.j':(78,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lo"), right: Ident("hi") }, while_true: [Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }, Declare { scope: Local, name: "x64", var_type: Struct("U64") }, VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }, IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }, IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }, IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }, Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }] }
# div32_while_body_7
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# Ident("lo")
# 81ed8 Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
#       Ident("lo")
21 ac a0 

# inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("lo")] })
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_a <- t1506 U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] })\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 81edb Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b a0 b8 

# inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 81ede LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 

# 81ee1 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb2)]
#       inline_div32_shiftright1_44_t5a19 <- inline_div32_shiftright1_44_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 b8 b2 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 81ee6 Copy8 [Register(0xb2), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b b2 a0 

# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 81ee9 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 81eec LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 

# 81eef Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_44_ta431 <- inline_div32_shiftright1_44_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 b0 b2 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 81ef4 Copy8 [Register(0xb2), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b b2 a1 

# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 81ef7 Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 81efa LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 

# 81efd Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb2), Register(0xb2)]
#       inline_div32_shiftright1_44_t350e <- inline_div32_shiftright1_44_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 b2 b2 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 81f02 Copy8 [Register(0xb2), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b b2 a2 

# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 81f05 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b a3 b0 

# inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 81f08 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 

# 81f0b Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_44_taa3e <- inline_div32_shiftright1_44_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 b0 b2 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 81f10 Copy8 [Register(0xb2), Register(0xa3)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b b2 a3 

# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 81f13 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b a0 b8 

# inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 81f16 Copy8 [Register(0xb8), Register(0xb2)]
#       inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
0b b8 b2 

# 81f19 AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t9144 <- inline_div32_shiftright1_44_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
18 b2 7f 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 81f1c Copy8 [Register(0xb2), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b b2 a0 

# inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 81f1f Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_44_tdd9e <- inline_div32_shiftright1_44_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b a0 b8 

# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 81f22 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 81f25 Copy8 [Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
0b b0 b2 

# 81f28 AndImm8 [Register(0xb2), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t8384 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
18 b2 80 

# inline_div32_shiftright1_44_tf572 <- inline_div32_shiftright1_44_tdd9e BitwiseOr Var(inline_div32_shiftright1_44_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 81f2b Or8 [Register(0xb8), Register(0xb2), Register(0xb2)]
#       inline_div32_shiftright1_44_tf572 <- inline_div32_shiftright1_44_tdd9e BitwiseOr Var(inline_div32_shiftright1_44_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c b8 b2 b2 

# inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 81f2f Copy8 [Register(0xb2), Register(0xa0)]
#       inline_div32_shiftright1_44_a[0x00..0x01] <- inline_div32_shiftright1_44_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b b2 a0 

# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 81f32 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 81f35 Copy8 [Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
0b b0 b2 

# 81f38 AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t5a73 <- inline_div32_shiftright1_44_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
18 b2 7f 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 81f3b Copy8 [Register(0xb2), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b b2 a1 

# inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 81f3e Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_44_t1539 <- inline_div32_shiftright1_44_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 81f41 Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 81f44 AndImm8 [Register(0xb2), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_t1f15 <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
18 b2 80 

# inline_div32_shiftright1_44_t4d1a <- inline_div32_shiftright1_44_t1539 BitwiseOr Var(inline_div32_shiftright1_44_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 81f47 Or8 [Register(0xb0), Register(0xb2), Register(0xb2)]
#       inline_div32_shiftright1_44_t4d1a <- inline_div32_shiftright1_44_t1539 BitwiseOr Var(inline_div32_shiftright1_44_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c b0 b2 b2 

# inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 81f4b Copy8 [Register(0xb2), Register(0xa1)]
#       inline_div32_shiftright1_44_a[0x01..0x02] <- inline_div32_shiftright1_44_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b b2 a1 

# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 81f4e Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 81f51 AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_t887d <- inline_div32_shiftright1_44_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
18 b2 7f 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 81f54 Copy8 [Register(0xb2), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b b2 a2 

# inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 81f57 Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_shiftright1_44_t577f <- inline_div32_shiftright1_44_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 81f5a Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b a3 b0 

# inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 81f5d Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
0b b0 b8 

# 81f60 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_44_tc29b <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
18 b8 80 

# inline_div32_shiftright1_44_t1bbf <- inline_div32_shiftright1_44_t577f BitwiseOr Var(inline_div32_shiftright1_44_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 81f63 Or8 [Register(0xb2), Register(0xb8), Register(0xb2)]
#       inline_div32_shiftright1_44_t1bbf <- inline_div32_shiftright1_44_t577f BitwiseOr Var(inline_div32_shiftright1_44_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c b2 b8 b2 

# inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 81f67 Copy8 [Register(0xb2), Register(0xa2)]
#       inline_div32_shiftright1_44_a[0x02..0x03] <- inline_div32_shiftright1_44_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b b2 a2 

# inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 81f6a Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_44_t5b7c <- inline_div32_shiftright1_44_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b a3 b0 

# inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 81f6d Copy8 [Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
0b b0 b2 

# 81f70 AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_shiftright1_44_tb911 <- inline_div32_shiftright1_44_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
18 b2 7f 

# inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 81f73 Copy8 [Register(0xb2), Register(0xa3)]
#       inline_div32_shiftright1_44_a[0x03..0x04] <- inline_div32_shiftright1_44_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b b2 a3 

# inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_44_t8792 <- inline_div32_shiftright1_44_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# 81f76 Copy32 [Register(0xa0), Register(0xb4)]
#       t9599 <- inline_div32_shiftright1_44_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
#       Return { value: Some(Ident("a")) }
21 a0 b4 

# goto inline_div32_shiftright1_44_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_44_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_44_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_44_function_end_shiftright1 None
# inline_div32_shiftright1_44_function_end_shiftright1
# t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# Ident("hi")
# optimized away noop copy Instruction { source: "t5508 <- hi U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"mid\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })) }\nArithmetic(Add, Call(Call { function: \"shiftright1\", parameters: [Ident(\"lo\")] }), Call(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] }))\nCall(Call { function: \"shiftright1\", parameters: [Ident(\"hi\")] })\nIdent(\"hi\")\n", opcode: Copy32, args: [Register(0x9c), Register(0x9c)], resolved: None }
# inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
# 81f79 Copy32 [Register(0x9c), Register(0xa0)]
#       inline_div32_shiftright1_45_a <- t5508 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
#       Call(Call { function: "shiftright1", parameters: [Ident("hi")] })
21 9c a0 

# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# Index("a", Number(U8, 0))
# 81f7c Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
#       Index("a", Number(U8, 0))
0b a0 b8 

# inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
# 81f7f LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
04 00 01 

# 81f82 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb8), Register(0xb2)]
#       inline_div32_shiftright1_45_t5a19 <- inline_div32_shiftright1_45_tdd9e RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1))
1e 04 00 b8 b2 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
# 81f87 Copy8 [Register(0xb2), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t5a19 U8 Some('/lutcomp/programs/lib/div.j':(4,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 1)) }
0b b2 a0 

# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# Index("a", Number(U8, 1))
# 81f8a Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
# 81f8d LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
04 00 01 

# 81f90 Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_45_ta431 <- inline_div32_shiftright1_45_t1539 RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1))
1e 04 00 b0 b2 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
# 81f95 Copy8 [Register(0xb2), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_ta431 U8 Some('/lutcomp/programs/lib/div.j':(5,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 1)) }
0b b2 a1 

# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# Index("a", Number(U8, 2))
# 81f98 Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
# 81f9b LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
04 00 01 

# 81f9e Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb2), Register(0xb2)]
#       inline_div32_shiftright1_45_t350e <- inline_div32_shiftright1_45_t577f RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1))
1e 04 00 b2 b2 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
# 81fa3 Copy8 [Register(0xb2), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t350e U8 Some('/lutcomp/programs/lib/div.j':(6,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 1)) }
0b b2 a2 

# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# Index("a", Number(U8, 3))
# 81fa6 Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
#       Index("a", Number(U8, 3))
0b a3 b0 

# inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
# 81fa9 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
04 00 01 

# 81fac Shift8 [Constant8(0x04=4), Register(0x00), Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_45_taa3e <- inline_div32_shiftright1_45_t5b7c RotateRight Number(0n1/0x01u8) Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1))
1e 04 00 b0 b2 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
# 81fb1 Copy8 [Register(0xb2), Register(0xa3)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_taa3e U8 Some('/lutcomp/programs/lib/div.j':(7,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 1)) }
0b b2 a3 

# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# Index("a", Number(U8, 0))
# 81fb4 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
#       Index("a", Number(U8, 0))
0b a0 b8 

# inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
# 81fb7 Copy8 [Register(0xb8), Register(0xb2)]
#       inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
0b b8 b2 

# 81fba AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t9144 <- inline_div32_shiftright1_45_tdd9e BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127))
18 b2 7f 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
# 81fbd Copy8 [Register(0xb2), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_t9144 U8 Some('/lutcomp/programs/lib/div.j':(9,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 127)) }
0b b2 a0 

# inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Index("a", Number(U8, 0))
# 81fc0 Copy8 [Register(0xa0), Register(0xb8)]
#       inline_div32_shiftright1_45_tdd9e <- inline_div32_shiftright1_45_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Index("a", Number(U8, 0))
0b a0 b8 

# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# Index("a", Number(U8, 1))
# 81fc3 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
# 81fc6 Copy8 [Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
0b b0 b2 

# 81fc9 AndImm8 [Register(0xb2), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t8384 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))
18 b2 80 

# inline_div32_shiftright1_45_tf572 <- inline_div32_shiftright1_45_tdd9e BitwiseOr Var(inline_div32_shiftright1_45_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
# 81fcc Or8 [Register(0xb8), Register(0xb2), Register(0xb2)]
#       inline_div32_shiftright1_45_tf572 <- inline_div32_shiftright1_45_tdd9e BitwiseOr Var(inline_div32_shiftright1_45_t8384) Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128)))
1c b8 b2 b2 

# inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
# 81fd0 Copy8 [Register(0xb2), Register(0xa0)]
#       inline_div32_shiftright1_45_a[0x00..0x01] <- inline_div32_shiftright1_45_tf572 U8 Some('/lutcomp/programs/lib/div.j':(10,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 128))) }
0b b2 a0 

# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# Index("a", Number(U8, 1))
# 81fd3 Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
# 81fd6 Copy8 [Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
0b b0 b2 

# 81fd9 AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t5a73 <- inline_div32_shiftright1_45_t1539 BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127))
18 b2 7f 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
# 81fdc Copy8 [Register(0xb2), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t5a73 U8 Some('/lutcomp/programs/lib/div.j':(11,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 127)) }
0b b2 a1 

# inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Index("a", Number(U8, 1))
# 81fdf Copy8 [Register(0xa1), Register(0xb0)]
#       inline_div32_shiftright1_45_t1539 <- inline_div32_shiftright1_45_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Index("a", Number(U8, 1))
0b a1 b0 

# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# Index("a", Number(U8, 2))
# 81fe2 Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
# 81fe5 AndImm8 [Register(0xb2), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_t1f15 <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))
18 b2 80 

# inline_div32_shiftright1_45_t4d1a <- inline_div32_shiftright1_45_t1539 BitwiseOr Var(inline_div32_shiftright1_45_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
# 81fe8 Or8 [Register(0xb0), Register(0xb2), Register(0xb2)]
#       inline_div32_shiftright1_45_t4d1a <- inline_div32_shiftright1_45_t1539 BitwiseOr Var(inline_div32_shiftright1_45_t1f15) Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128)))
1c b0 b2 b2 

# inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
# 81fec Copy8 [Register(0xb2), Register(0xa1)]
#       inline_div32_shiftright1_45_a[0x01..0x02] <- inline_div32_shiftright1_45_t4d1a U8 Some('/lutcomp/programs/lib/div.j':(12,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 128))) }
0b b2 a1 

# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# Index("a", Number(U8, 2))
# 81fef Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
# 81ff2 AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_t887d <- inline_div32_shiftright1_45_t577f BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127))
18 b2 7f 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
# 81ff5 Copy8 [Register(0xb2), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t887d U8 Some('/lutcomp/programs/lib/div.j':(13,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 127)) }
0b b2 a2 

# inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Index("a", Number(U8, 2))
# 81ff8 Copy8 [Register(0xa2), Register(0xb2)]
#       inline_div32_shiftright1_45_t577f <- inline_div32_shiftright1_45_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Index("a", Number(U8, 2))
0b a2 b2 

# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# Index("a", Number(U8, 3))
# 81ffb Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
#       Index("a", Number(U8, 3))
0b a3 b0 

# inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
# 81ffe Copy8 [Register(0xb0), Register(0xb8)]
#       inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
0b b0 b8 

# 82001 AndImm8 [Register(0xb8), Constant8(0x80=128)]
#       inline_div32_shiftright1_45_tc29b <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n128/0x80u8) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))
18 b8 80 

# inline_div32_shiftright1_45_t1bbf <- inline_div32_shiftright1_45_t577f BitwiseOr Var(inline_div32_shiftright1_45_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
# 82004 Or8 [Register(0xb2), Register(0xb8), Register(0xb2)]
#       inline_div32_shiftright1_45_t1bbf <- inline_div32_shiftright1_45_t577f BitwiseOr Var(inline_div32_shiftright1_45_tc29b) Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128)))
1c b2 b8 b2 

# inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
# 82008 Copy8 [Register(0xb2), Register(0xa2)]
#       inline_div32_shiftright1_45_a[0x02..0x03] <- inline_div32_shiftright1_45_t1bbf U8 Some('/lutcomp/programs/lib/div.j':(14,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 128))) }
0b b2 a2 

# inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# Index("a", Number(U8, 3))
# 8200b Copy8 [Register(0xa3), Register(0xb0)]
#       inline_div32_shiftright1_45_t5b7c <- inline_div32_shiftright1_45_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
#       Index("a", Number(U8, 3))
0b a3 b0 

# inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
# 8200e Copy8 [Register(0xb0), Register(0xb2)]
#       inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
0b b0 b2 

# 82011 AndImm8 [Register(0xb2), Constant8(0x7f=127)]
#       inline_div32_shiftright1_45_tb911 <- inline_div32_shiftright1_45_t5b7c BitwiseAnd Number(0n127/0x7fu8) Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127))
18 b2 7f 

# inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
# 82014 Copy8 [Register(0xb2), Register(0xa3)]
#       inline_div32_shiftright1_45_a[0x03..0x04] <- inline_div32_shiftright1_45_tb911 U8 Some('/lutcomp/programs/lib/div.j':(15,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 127)) }
0b b2 a3 

# inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_div32_shiftright1_45_t8792 <- inline_div32_shiftright1_45_a U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "t3803 <- inline_div32_shiftright1_45_t8792 U32 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# goto inline_div32_shiftright1_45_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_div32_shiftright1_45_function_end_shiftright1 Some('/lutcomp/programs/lib/div.j':(17,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_div32_shiftright1_45_function_end_shiftright1)], resolved: None }
# :inline_div32_shiftright1_45_function_end_shiftright1 None
# inline_div32_shiftright1_45_function_end_shiftright1
# mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
# Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
# 82017 ClearCarry []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
03 

# 82018 AddCarry32_1 [Register(0xb4), Register(0xa0), Register(0xa0)]
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
30 b4 a0 a0 

# 8201c AddCarry32_2 []
#       mid <- t9599 Add Var(t3803) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("mid"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] })) }
#       Arithmetic(Add, Call(Call { function: "shiftright1", parameters: [Ident("lo")] }), Call(Call { function: "shiftright1", parameters: [Ident("hi")] }))
31 

# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nVoidExpression { expression: Call(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] }) }\nCall(Call { function: \"mul32_64\", parameters: [Ident(\"mid\"), Ident(\"b\"), AddressOf(Ident(\"x64\"))] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 8201d Copy32 [Register(0x0c), Register(0xc8)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c c8 

# tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# AddressOf(Ident("x64"))
# 82020 Copy32 [Register(0xc8), Register(0xa4)]
#       tb608 <- te825 U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
#       AddressOf(Ident("x64"))
21 c8 a4 

# None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
# 82023 Copy32 [Register(0xa0), Register(0x00)]
#       Arg0[a]=tfd7e None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a0 00 

# 82026 Copy32 [Register(0x98), Register(0x04)]
#       Arg1[b]=tace9 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 98 04 

# 82029 Copy32 [Register(0xa4), Register(0x08)]
#       Arg2[c]=tb608 None <= call mul32_64(tfd7e,tace9,tb608,) Some('/lutcomp/programs/lib/div.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("mid"), Ident("b"), AddressOf(Ident("x64"))] })
21 a4 08 

# Registers used by this function: {148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203}
# Registers used by callee tree: {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}
# Registers to save: []
# 8202c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 82032 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 3c 20 08 00 

# 82038 JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 98 26 08 

# 8203c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 82042 Copy32 [Register(0x0c), Register(0xc8)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c c8 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 82045 Copy32 [Register(0xc8), Register(0xa4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 c8 a4 

# 82048 AddImm32IgnoreCarry [Register(0xa4), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 a4 04 00 00 00 

# tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# LocalFieldDeref("x64", "hi")
# 8204e Load32 [Register(0xa4), Register(0xa8)]
#       tb973 <- mem[t3f2a] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       LocalFieldDeref("x64", "hi")
22 a4 a8 

# t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# Number(USIZE, 0)
# 82051 LoadImm32 [Register(0xa4), Constant32(0x00000000=0)]
#       t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 a4 00 00 00 00 

# if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
# 82057 Cmp8 [Register(0xab), Register(0xa7)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
15 ab a7 

# 8205a Cmp8IfZero [Register(0xaa), Register(0xa6)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 aa a6 

# 8205d Cmp8IfZero [Register(0xa9), Register(0xa5)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 a9 a5 

# 82060 Cmp8IfZero [Register(0xa8), Register(0xa4)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
16 a8 a4 

# 82063 JcImm [Label24(div32_if_else_0_11)]
#       if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }
71 78 20 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tb973 > t60ec then 'div32_if_true_0_10' else 'div32_if_else_0_11' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: LocalFieldDeref(\"x64\", \"hi\"), right: Number(USIZE, 0) }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_10)], resolved: None }
# :div32_if_true_0_10 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: LocalFieldDeref("x64", "hi"), right: Number(USIZE, 0) }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# div32_if_true_0_10
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 82067 Copy32 [Register(0xa0), Register(0x9c)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 a0 9c 

# 8206a AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 9c ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 82070 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 c5 1e 08 

# goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# 82074 JmpImm [Label24(div32_if_end_9)]
#       goto div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
70 78 20 08 

# :div32_if_else_0_11 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_11
# :div32_if_end_9 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_9
# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 82078 Copy32 [Register(0x0c), Register(0xc8)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c c8 

# x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
# LocalFieldDeref("x64", "lo")
# 8207b Load32 [Register(0xc8), Register(0xa4)]
#       x <- mem[te546] U32 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("x"), var_type: Some(Number(USIZE)), value: LocalFieldDeref("x64", "lo") }
#       LocalFieldDeref("x64", "lo")
22 c8 a4 

# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
# 8207e Cmp8 [Register(0xa7), Register(0x97)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
15 a7 97 

# 82081 Cmp8IfZero [Register(0xa6), Register(0x96)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a6 96 

# 82084 Cmp8IfZero [Register(0xa5), Register(0x95)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a5 95 

# 82087 Cmp8IfZero [Register(0xa4), Register(0x94)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
16 a4 94 

# 8208a JcImm [Label24(div32_if_else_0_14)]
#       if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
#       Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }
71 9f 20 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tad57 > t8792 then 'div32_if_true_0_13' else 'div32_if_else_0_14' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }, [Assign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }, Continue])], else_block: [] }\nComparison { op: GreaterThan, left: Ident(\"x\"), right: Ident(\"a\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_13)], resolved: None }
# :div32_if_true_0_13 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThan, left: Ident("x"), right: Ident("a") }, [Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }, Continue])], else_block: [] }
# div32_if_true_0_13
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"hi\"), var_type: None, value: Arithmetic(Subtract, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Subtract, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
# 8208e Copy32 [Register(0xa0), Register(0x9c)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
21 a0 9c 

# 82091 AddImm32IgnoreCarry [Register(0x9c), Constant32(0xffffffff=4294967295)]
#       hi <- tfd7e Subtract Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("hi"), var_type: None, value: Arithmetic(Subtract, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Subtract, Ident("mid"), Number(U8, 1))
32 9c ff ff ff ff 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# Continue
# 82097 JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
#       Continue
70 c5 1e 08 

# goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# 8209b JmpImm [Label24(div32_if_end_12)]
#       goto div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
70 9f 20 08 

# :div32_if_else_0_14 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_14
# :div32_if_end_12 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_12
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: Equals, left: Ident(\"x\"), right: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
# 8209f Cmp8 [Register(0xa7), Register(0x97)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
15 a7 97 

# 820a2 Cmp8IfZero [Register(0xa6), Register(0x96)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a6 96 

# 820a5 Cmp8IfZero [Register(0xa5), Register(0x95)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a5 95 

# 820a8 Cmp8IfZero [Register(0xa4), Register(0x94)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
16 a4 94 

# 820ab JzImm [Label24(div32_if_true_0_16)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
72 b3 20 08 

# 820af JmpImm [Label24(div32_if_else_0_17)]
#       if tad57 == t8792 then 'div32_if_true_0_16' else 'div32_if_else_0_17' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: Equals, left: Ident("x"), right: Ident("a") }
70 c8 20 08 

# :div32_if_true_0_16 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("x"), right: Ident("a") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_16
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 820b3 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 820b9 Copy32 [Register(0xa0), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a0 00 

# 820bc AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 820c2 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# 820c4 JmpImm [Label24(div32_if_end_15)]
#       goto div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
70 c8 20 08 

# :div32_if_else_0_17 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_17
# :div32_if_end_15 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_15
# t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x94), Register(0x94)], resolved: None }
# tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# Ident("x")
# optimized away noop copy Instruction { source: "tad57 <- x U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"r\"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident(\"a\"), Ident(\"x\")) }\nArithmetic(Subtract, Ident(\"a\"), Ident(\"x\"))\nIdent(\"x\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
# Arithmetic(Subtract, Ident("a"), Ident("x"))
# 820c8 Copy32 [Register(0xa4), Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
21 a4 00 

# 820cb Invert8 [Register(0x00)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 00 

# 820cd Invert8 [Register(0x01)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 01 

# 820cf Invert8 [Register(0x02)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 02 

# 820d1 Invert8 [Register(0x03)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
01 03 

# 820d3 AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
32 00 01 00 00 00 

# 820d9 ClearCarry []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
03 

# 820da AddCarry32_1 [Register(0x94), Register(0x00), Register(0xa4)]
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
30 94 00 a4 

# 820de AddCarry32_2 []
#       r <- t8792 Subtract Var(tad57) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("r"), var_type: Some(Number(USIZE)), value: Arithmetic(Subtract, Ident("a"), Ident("x")) }
#       Arithmetic(Subtract, Ident("a"), Ident("x"))
31 

# taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("r")
# optimized away noop copy Instruction { source: "taee0 <- r U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"r\")\n", opcode: Copy32, args: [Register(0xa4), Register(0xa4)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x98), Register(0x98)], resolved: None }
# if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
# 820df Cmp8 [Register(0x9b), Register(0xa7)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
15 9b a7 

# 820e2 Cmp8IfZero [Register(0x9a), Register(0xa6)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 9a a6 

# 820e5 Cmp8IfZero [Register(0x99), Register(0xa5)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 99 a5 

# 820e8 Cmp8IfZero [Register(0x98), Register(0xa4)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
16 98 a4 

# 820eb JcImm [Label24(div32_if_else_0_20)]
#       if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }
71 04 21 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if taee0 < tace9 then 'div32_if_true_0_19' else 'div32_if_else_0_20' Some('/lutcomp/programs/lib/div.j':(78,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }, [Return { value: Some(Ident(\"mid\")) }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"r\"), right: Ident(\"b\") }\n", opcode: JmpImm, args: [Label24(div32_if_true_0_19)], resolved: None }
# :div32_if_true_0_19 Some('/lutcomp/programs/lib/div.j':(78,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("r"), right: Ident("b") }, [Return { value: Some(Ident("mid")) }])], else_block: [] }
# div32_if_true_0_19
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nReturn { value: Some(Ident(\"mid\")) }\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 820ef AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
32 0c 08 00 00 00 

# return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
# Return { value: Some(Ident("mid")) }
# 820f5 Copy32 [Register(0xa0), Register(0x00)]
#       return Some(tfd7e) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Return { value: Some(Ident("mid")) }
21 a0 00 

# 820f8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 820fe JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# 82100 JmpImm [Label24(div32_if_end_18)]
#       goto div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
70 04 21 08 

# :div32_if_else_0_20 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_else_0_20
# :div32_if_end_18 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_if_end_18
# tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# Ident("mid")
# optimized away noop copy Instruction { source: "tfd7e <- mid U32 Some('/lutcomp/programs/lib/div.j':(78,5))\nAssign { target: Ident(\"lo\"), var_type: None, value: Arithmetic(Add, Ident(\"mid\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"mid\"), Number(U8, 1))\nIdent(\"mid\")\n", opcode: Copy32, args: [Register(0xa0), Register(0xa0)], resolved: None }
# lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
# Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
# Arithmetic(Add, Ident("mid"), Number(U8, 1))
# 82104 Copy32 [Register(0xa0), Register(0xac)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
21 a0 ac 

# 82107 AddImm32IgnoreCarry [Register(0xac), Constant32(0x00000001=1)]
#       lo <- tfd7e Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/div.j':(78,5))
#       Assign { target: Ident("lo"), var_type: None, value: Arithmetic(Add, Ident("mid"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("mid"), Number(U8, 1))
32 ac 01 00 00 00 

# goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
# 8210d JmpImm [Label24(div32_while_predicate_6)]
#       goto div32_while_predicate_6 Some('/lutcomp/programs/lib/div.j':(78,5))
70 c5 1e 08 

# :div32_while_end_8 Some('/lutcomp/programs/lib/div.j':(78,5))
# div32_while_end_8
# t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# Ident("lo")
# 82111 Copy32 [Register(0xac), Register(0xa0)]
#       t1506 <- lo U32 Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
#       Ident("lo")
21 ac a0 

# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 82114 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
32 0c 08 00 00 00 

# return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
# Return { value: Some(Ident("lo")) }
# 8211a Copy32 [Register(0xa0), Register(0x00)]
#       return Some(t1506) Some('/lutcomp/programs/lib/div.j':(108,5))
#       Return { value: Some(Ident("lo")) }
21 a0 00 

# 8211d AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 82123 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_div32 None
# function_end_div32
# Unreachable None
# 82125 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_draw_char
# Ret None
# Arg0=i
# Arg1=ch
# Var ch (Arg1 ch Number(U8)) Reg(U8) Some([206])
# Var i (Arg0 i Number(U8)) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_col (Local col Number(U8) Reg(U8)) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_row (Local row Number(U8) Reg(U8)) Reg(U8) Some([208])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd (t1acd Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 (t2f80 Index("lcd_row_start", Ident("row"))) Reg(U8) Some([208])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 (t38c7 Arithmetic(Multiply, Ident("row"), Number(U8, 20))) Reg(U8) Some([207])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd (t50bd Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) Reg(U32) Some([212, 213, 214, 215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf (t9eaf Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }) Reg(U32) Some([212, 213, 214, 215])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 (tb1b6 Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }) Reg(U32) Some([216, 217, 218, 219])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td007 (td007 Ident("row")) Reg(U8) Some([208])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 (td0f3 Ident("i")) Reg(U8) Some([220])
# Var inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 (tfee9 Ident("col")) Reg(U8) Some([207])
# Var pos (Local pos Number(U8) Reg(U8)) Reg(U8) Some([207])
# Var t1261 (t1261 Arithmetic(And, Ident("ch"), Number(U8, 15))) Reg(U8) Some([206])
# Var t136d (t136d Ident("pos")) Reg(U8) Some([207])
# Var t6e3a (t6e3a Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))) Reg(U8) Some([208])
# Var t7d80 (t7d80 Arithmetic(And, Ident("pos"), Number(U8, 15))) Reg(U8) Some([207])
# Var t8d12 (t8d12 Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))) Reg(U8) Some([208])
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([224, 225, 226, 227]) [2, 0, 0, 0]
# Var tb875 (tb875 Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))) Reg(U8) Some([206])
# Var tcd38 (tcd38 Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))) Reg(U8) Some([207])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([206])
# Var tec9e (tec9e Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))) Reg(U8) Some([207])
# 8212a Copy8 [Register(0x00), Register(0xcf)]
#       Save function parameter 'i' registers [0] to locals [207].
0b 00 cf 

# 8212d Copy8 [Register(0x04), Register(0xce)]
#       Save function parameter 'ch' registers [4] to locals [206].
0b 04 ce 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
# Arithmetic(Divide, Ident("i"), Number(U8, 20))
# Ident("i")
# 82130 Copy8 [Register(0xcf), Register(0xdc)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
#       Ident("i")
0b cf dc 

# inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
# Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
# Arithmetic(Divide, Ident("i"), Number(U8, 20))
# 82133 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
04 00 14 

# 82136 Divide8 [Register(0xdc), Register(0x00), Register(0xd0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_row <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(9,5))
#       Assign { target: Ident("row"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Divide, Ident("i"), Number(U8, 20))
17 dc 00 d0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Ident("i")
# 8213a Copy8 [Register(0xcf), Register(0xdc)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Ident("i")
0b cf dc 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Arithmetic(Multiply, Ident("row"), Number(U8, 20))
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(10,5))\nAssign { target: Ident(\"col\"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20))) }\nArithmetic(Subtract, Ident(\"i\"), Arithmetic(Multiply, Ident(\"row\"), Number(U8, 20)))\nArithmetic(Multiply, Ident(\"row\"), Number(U8, 20))\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# Arithmetic(Multiply, Ident("row"), Number(U8, 20))
# 8213d LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Arithmetic(Multiply, Ident("row"), Number(U8, 20))
04 00 14 

# 82140 Mul8_8 [Register(0xd0), Register(0x00), Register(0xcf)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
#       Arithmetic(Multiply, Ident("row"), Number(U8, 20))
10 d0 00 cf 

# inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/lutcomp/programs/lib/lcd.j':(10,5))
# Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
# Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
# 82144 Copy8 [Register(0xcf), Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
0b cf 00 

# 82147 Negate8 [Register(0x00)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
02 00 

# 82149 Add8NoCarryIn [Register(0xdc), Register(0x00), Register(0xcf)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_col <- inline_lcd_draw_char_lcd_logical_to_physical_3_td0f3 Subtract Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t38c7) Some('/lutcomp/programs/lib/lcd.j':(10,5))
#       Assign { target: Ident("col"), var_type: Some(Number(U8)), value: Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20))) }
#       Arithmetic(Subtract, Ident("i"), Arithmetic(Multiply, Ident("row"), Number(U8, 20)))
14 dc 00 cf 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }
# Ident("lcd_row_start")
# 8214d LoadImm32 [Register(0xd8), Label32(:lcd_row_start)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 <- const &lcd_row_start Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }
#       Ident("lcd_row_start")
20 d8 23 08 08 00 

# inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
# Ident("row")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_td007 <- inline_lcd_draw_char_lcd_logical_to_physical_3_row U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIndex(\"lcd_row_start\", Ident(\"row\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident(\"lcd_row_start\") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"row\") }\nIdent(\"row\")\n", opcode: Copy8, args: [Register(0xd0), Register(0xd0)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
# 82153 LoadImm32 [Register(0xd4), Constant32(0x00000000=0)]
#       Zero-pad for inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
20 d4 00 00 00 00 

# 82159 Copy8 [Register(0xd0), Register(0xd4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd U32 <- inline_lcd_draw_char_lcd_logical_to_physical_3_td007 U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }
0b d0 d4 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
# 8215c ClearCarry []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
03 

# 8215d AddCarry32_1 [Register(0xd8), Register(0xd4), Register(0xd4)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
30 d8 d4 d4 

# 82161 AddCarry32_2 []
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf <- inline_lcd_draw_char_lcd_logical_to_physical_3_tb1b6 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_t50bd) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") }) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Array(Number(U8), Some(4)))), new_type: Number(USIZE), value: Ident("lcd_row_start") }, Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("row") })
31 

# inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Index("lcd_row_start", Ident("row"))
# 82162 Load8 [Register(0xd4), Register(0xd0)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 <- mem[inline_lcd_draw_char_lcd_logical_to_physical_3_t9eaf] U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
#       Index("lcd_row_start", Ident("row"))
05 d4 d0 

# inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# Ident("col")
# optimized away noop copy Instruction { source: "inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9 <- inline_lcd_draw_char_lcd_logical_to_physical_3_col U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\nArithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))\nIdent(\"col\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
# 82165 Add8NoCarryIn [Register(0xd0), Register(0xcf), Register(0xcf)]
#       inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd <- inline_lcd_draw_char_lcd_logical_to_physical_3_t2f80 Add Var(inline_lcd_draw_char_lcd_logical_to_physical_3_tfee9) Some('/lutcomp/programs/lib/lcd.j':(11,5))
#       Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
#       Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))
14 d0 cf cf 

# pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# optimized away noop copy Instruction { source: "pos <- inline_lcd_draw_char_lcd_logical_to_physical_3_t1acd U8 Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/lutcomp/programs/lib/lcd.j':(11,5))
# Return { value: Some(Arithmetic(Add, Index("lcd_row_start", Ident("row")), Ident("col"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical Some('/lutcomp/programs/lib/lcd.j':(11,5))\nReturn { value: Some(Arithmetic(Add, Index(\"lcd_row_start\", Ident(\"row\")), Ident(\"col\"))) }\n", opcode: JmpImm, args: [Label24(inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical)], resolved: None }
# :inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical None
# inline_lcd_draw_char_lcd_logical_to_physical_3_function_end_lcd_logical_to_physical
# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(17,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))] })\nArithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4)))\nArithmetic(ShiftRight, Ident(\"pos\"), Number(U8, 4))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
# 82169 LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
04 00 04 

# 8216c Shift8 [Constant8(0x05=5), Register(0x00), Register(0xcf), Register(0xd0)]
#       t8d12 <- t136d ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4))
1e 05 00 cf d0 

# t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
# 82171 OrImm8 [Register(0xd0), Constant8(0x08=8)]
#       t6e3a <- t8d12 BitwiseOr Number(0n8/0x08u8) Some('/lutcomp/programs/lib/lcd.j':(17,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))
19 d0 08 

# None <= call io_write1(t6e3a,) Some('/lutcomp/programs/lib/lcd.j':(17,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 8), Arithmetic(ShiftRight, Ident("pos"), Number(U8, 4)))] })
# 82174 Out1 [Register(0xd0)]
#       IoWrite1
69 d0 

# t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# Arithmetic(And, Ident("pos"), Number(U8, 15))
# Ident("pos")
# optimized away noop copy Instruction { source: "t136d <- pos U8 Some('/lutcomp/programs/lib/lcd.j':(18,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(And, Ident(\"pos\"), Number(U8, 15))] })\nArithmetic(And, Ident(\"pos\"), Number(U8, 15))\nIdent(\"pos\")\n", opcode: Copy8, args: [Register(0xcf), Register(0xcf)], resolved: None }
# t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# Arithmetic(And, Ident("pos"), Number(U8, 15))
# 82176 AndImm8 [Register(0xcf), Constant8(0x0f=15)]
#       t7d80 <- t136d BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(18,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
#       Arithmetic(And, Ident("pos"), Number(U8, 15))
18 cf 0f 

# None <= call io_write1(t7d80,) Some('/lutcomp/programs/lib/lcd.j':(18,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(And, Ident("pos"), Number(U8, 15))] })
# 82179 Out1 [Register(0xcf)]
#       IoWrite1
69 cf 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 8217b LoadImm32 [Register(0xe0), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 e0 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 82181 Copy32 [Register(0xe0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(19,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 e0 00 

# Registers used by this function: {206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82184 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 8218a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 94 21 08 00 

# 82190 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 95 1b 08 

# 82194 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(21,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))] })\nArithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4)))\nArithmetic(ShiftRight, Ident(\"ch\"), Number(U8, 4))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xce), Register(0xce)], resolved: None }
# tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
# 8219a LoadImm8 [Register(0x00), Constant8(0x04=4)]
#       tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
04 00 04 

# 8219d Shift8 [Constant8(0x05=5), Register(0x00), Register(0xce), Register(0xcf)]
#       tec9e <- tdcd9 ShiftRight Number(0n4/0x04u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
#       Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4))
1e 05 00 ce cf 

# tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
# 821a2 OrImm8 [Register(0xcf), Constant8(0x80=128)]
#       tcd38 <- tec9e BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(21,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))
19 cf 80 

# None <= call io_write1(tcd38,) Some('/lutcomp/programs/lib/lcd.j':(21,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(ShiftRight, Ident("ch"), Number(U8, 4)))] })
# 821a5 Out1 [Register(0xcf)]
#       IoWrite1
69 cf 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# Arithmetic(And, Ident("ch"), Number(U8, 15))
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(22,5))\nVoidExpression { expression: Call(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] }) }\nCall(Call { function: \"io_write1\", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))] })\nArithmetic(Or, Number(U8, 128), Arithmetic(And, Ident(\"ch\"), Number(U8, 15)))\nArithmetic(And, Ident(\"ch\"), Number(U8, 15))\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xce), Register(0xce)], resolved: None }
# t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# Arithmetic(And, Ident("ch"), Number(U8, 15))
# 821a7 AndImm8 [Register(0xce), Constant8(0x0f=15)]
#       t1261 <- tdcd9 BitwiseAnd Number(0n15/0x0fu8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
#       Arithmetic(And, Ident("ch"), Number(U8, 15))
18 ce 0f 

# tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
# 821aa OrImm8 [Register(0xce), Constant8(0x80=128)]
#       tb875 <- t1261 BitwiseOr Number(0n128/0x80u8) Some('/lutcomp/programs/lib/lcd.j':(22,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
#       Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
#       Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))
19 ce 80 

# None <= call io_write1(tb875,) Some('/lutcomp/programs/lib/lcd.j':(22,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] }) }
# Call(Call { function: "io_write1", parameters: [Arithmetic(Or, Number(U8, 128), Arithmetic(And, Ident("ch"), Number(U8, 15)))] })
# 821ad Out1 [Register(0xce)]
#       IoWrite1
69 ce 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 821af LoadImm32 [Register(0xe0), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 e0 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 821b5 Copy32 [Register(0xe0), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(23,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 e0 00 

# Registers used by this function: {206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 821b8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 821be StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c c8 21 08 00 

# 821c4 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 95 1b 08 

# 821c8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 821ce JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_draw_char None
# function_end_lcd_draw_char
# Unreachable None
# 821d0 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_init
# Ret None
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([228])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([232, 233, 234, 235]) [12, 16, 15, 0]
# Var t385d (t385d Number(USIZE, 1)) Reg(U32) Some([232, 233, 234, 235]) [1, 0, 0, 0]
# Var t40c1 (t40c1 Number(U8, 2)) Reg(U8) Some([228]) [2]
# Var t4241 (t4241 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([236, 237, 238, 239])
# Var t80a1 (t80a1 Number(U8, 12)) Reg(U8) Some([228]) [12]
# Var t8820 (t8820 Number(U8, 3)) Reg(U8) Some([228]) [3]
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([240]) [80]
# Var t9498 (t9498 Number(USIZE, 2)) Reg(U32) Some([232, 233, 234, 235]) [2, 0, 0, 0]
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([236, 237, 238, 239])
# Var t9f32 (t9f32 Number(U8, 8)) Reg(U8) Some([228]) [8]
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([241]) [32]
# Var tb36e (tb36e Number(U8, 0)) Reg(U8) Some([240]) [0]
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([228])
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([228]) [1]
# t0 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
# 821d5 LoadImm32 [Register(0xe8), Constant32(0x000f100c=987148)]
#       t0 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
20 e8 0c 10 0f 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 821db LoadImm8 [Register(0xf0), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 f0 00 

# mem[t0] <- tb36e U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
# 821de Store8 [Register(0xf0), Register(0xe8)]
#       mem[t0] <- tb36e U8 Some('/lutcomp/programs/lib/lcd.j':(69,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Number(U8, 0) }
06 f0 e8 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 821e1 LoadImm8 [Register(0xe4), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(72,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 e4 00 

# :lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_init_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Number(U8, 80)
# 821e4 LoadImm8 [Register(0xf0), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
#       Number(U8, 80)
04 f0 50 

# if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# 821e7 Cmp8 [Register(0xf0), Register(0xe4)]
#       if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
15 f0 e4 

# 821ea JcImm [Label24(lcd_init_while_end_2)]
#       if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
71 0e 22 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_init_while_body_1' else 'lcd_init_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(73,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\n", opcode: JmpImm, args: [Label24(lcd_init_while_body_1)], resolved: None }
# :lcd_init_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_init_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 821ee LoadImm32 [Register(0xec), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 ec 00 00 00 00 

# 821f4 Copy8 [Register(0xe4), Register(0xec)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b e4 ec 

# t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 821f7 AddImm32IgnoreCarry [Register(0xec), Constant32(0x000f1010=987152)]
#       t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 ec 10 10 0f 00 

# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 821fd LoadImm8 [Register(0xf1), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 f1 20 

# mem[t4241] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# 82200 Store8 [Register(0xf1), Register(0xec)]
#       mem[t4241] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
06 f1 ec 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(73,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0xe4), Register(0xe4)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 82203 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 82206 Add8NoCarryIn [Register(0xe4), Register(0x00), Register(0xe4)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(73,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 e4 00 e4 

# goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# 8220a JmpImm [Label24(lcd_init_while_predicate_0)]
#       goto lcd_init_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(73,5))
70 e4 21 08 

# :lcd_init_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(73,5))
# lcd_init_while_end_2
# t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 8220e LoadImm8 [Register(0xe4), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(78,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 e4 03 

# None <= call io_write1(t8820,) Some('/lutcomp/programs/lib/lcd.j':(78,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 82211 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 82213 LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 82219 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(79,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 8221c AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82222 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 2c 22 08 00 

# 82228 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 95 1b 08 

# 8222c AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 82232 LoadImm8 [Register(0xe4), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(80,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 e4 03 

# None <= call io_write1(t8820,) Some('/lutcomp/programs/lib/lcd.j':(80,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 82235 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 82237 LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 8223d Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(81,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82240 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82246 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 50 22 08 00 

# 8224c JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 95 1b 08 

# 82250 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# Number(U8, 3)
# 82256 LoadImm8 [Register(0xe4), Constant8(0x03=3)]
#       t8820 <- 0n3/0x03u8  Some('/lutcomp/programs/lib/lcd.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
#       Number(U8, 3)
04 e4 03 

# None <= call io_write1(t8820,) Some('/lutcomp/programs/lib/lcd.j':(82,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 3)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 3)] })
# 82259 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# Number(USIZE, 1)
# 8225b LoadImm32 [Register(0xe8), Constant32(0x00000001=1)]
#       t385d <- 0n1/0x00000001u32  Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
#       Number(USIZE, 1)
20 e8 01 00 00 00 

# None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
# 82261 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t385d None <= call delay(t385d,) Some('/lutcomp/programs/lib/lcd.j':(83,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 1)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 1)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82264 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 8226a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 74 22 08 00 

# 82270 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 95 1b 08 

# 82274 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t40c1 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# Number(U8, 2)
# 8227a LoadImm8 [Register(0xe4), Constant8(0x02=2)]
#       t40c1 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(85,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
#       Number(U8, 2)
04 e4 02 

# None <= call io_write1(t40c1,) Some('/lutcomp/programs/lib/lcd.j':(85,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# 8227d Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 8227f LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 82285 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(86,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82288 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 8228e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 98 22 08 00 

# 82294 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 95 1b 08 

# 82298 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# t40c1 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# Number(U8, 2)
# 8229e LoadImm8 [Register(0xe4), Constant8(0x02=2)]
#       t40c1 <- 0n2/0x02u8  Some('/lutcomp/programs/lib/lcd.j':(88,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
#       Number(U8, 2)
04 e4 02 

# None <= call io_write1(t40c1,) Some('/lutcomp/programs/lib/lcd.j':(88,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 2)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 2)] })
# 822a1 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9f32 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
# Number(U8, 8)
# 822a3 LoadImm8 [Register(0xe4), Constant8(0x08=8)]
#       t9f32 <- 0n8/0x08u8  Some('/lutcomp/programs/lib/lcd.j':(89,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
#       Number(U8, 8)
04 e4 08 

# None <= call io_write1(t9f32,) Some('/lutcomp/programs/lib/lcd.j':(89,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 8)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 8)] })
# 822a6 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 822a8 LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 822ae Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(90,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 822b1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 822b7 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c c1 22 08 00 

# 822bd JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 95 1b 08 

# 822c1 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# Number(U8, 0)
# 822c7 LoadImm8 [Register(0xf0), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
#       Number(U8, 0)
04 f0 00 

# None <= call io_write1(tb36e,) Some('/lutcomp/programs/lib/lcd.j':(92,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# 822ca Out1 [Register(0xf0)]
#       IoWrite1
69 f0 

# t80a1 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
# Number(U8, 12)
# 822cc LoadImm8 [Register(0xe4), Constant8(0x0c=12)]
#       t80a1 <- 0n12/0x0cu8  Some('/lutcomp/programs/lib/lcd.j':(93,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
#       Number(U8, 12)
04 e4 0c 

# None <= call io_write1(t80a1,) Some('/lutcomp/programs/lib/lcd.j':(93,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 12)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 12)] })
# 822cf Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 822d1 LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 822d7 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(94,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 822da AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 822e0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c ea 22 08 00 

# 822e6 JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 95 1b 08 

# 822ea AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# Number(U8, 0)
# 822f0 LoadImm8 [Register(0xf0), Constant8(0x00=0)]
#       tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(96,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
#       Number(U8, 0)
04 f0 00 

# None <= call io_write1(tb36e,) Some('/lutcomp/programs/lib/lcd.j':(96,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 0)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 0)] })
# 822f3 Out1 [Register(0xf0)]
#       IoWrite1
69 f0 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
# Number(U8, 1)
# 822f5 LoadImm8 [Register(0xe4), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/lcd.j':(97,5))
#       VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
#       Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
#       Number(U8, 1)
04 e4 01 

# None <= call io_write1(tfcd,) Some('/lutcomp/programs/lib/lcd.j':(97,5))
# VoidExpression { expression: Call(Call { function: "io_write1", parameters: [Number(U8, 1)] }) }
# Call(Call { function: "io_write1", parameters: [Number(U8, 1)] })
# 822f8 Out1 [Register(0xe4)]
#       IoWrite1
69 e4 

# t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# Number(USIZE, 2)
# 822fa LoadImm32 [Register(0xe8), Constant32(0x00000002=2)]
#       t9498 <- 0n2/0x00000002u32  Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
#       Number(USIZE, 2)
20 e8 02 00 00 00 

# None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
# VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
# Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
# 82300 Copy32 [Register(0xe8), Register(0x00)]
#       Arg0[x]=t9498 None <= call delay(t9498,) Some('/lutcomp/programs/lib/lcd.j':(98,5))
#       VoidExpression { expression: Call(Call { function: "delay", parameters: [Number(USIZE, 2)] }) }
#       Call(Call { function: "delay", parameters: [Number(USIZE, 2)] })
21 e8 00 

# Registers used by this function: {228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147}
# Registers to save: []
# 82303 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:delay))
32 0c fc ff ff ff 

# 82309 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:delay))
25 0c 13 23 08 00 

# 8230f JmpImm [Label24(:delay)]
#       PseudoCall(Label24(:delay))
70 95 1b 08 

# 82313 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:delay))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 82319 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_init None
# function_end_lcd_init
# Unreachable None
# 8231b Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_putc
# Ret None
# Arg0=ch
# Var ch (Arg0 ch Number(U8)) Reg(U8) Some([242])
# Var next (Local next Number(U8) Reg(U8)) Reg(U8) Some([242])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([244, 245, 246, 247]) [12, 16, 15, 0]
# Var t1 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) [12, 16, 15, 0]
# Var t2 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) [12, 16, 15, 0]
# Var t3 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) [12, 16, 15, 0]
# Var t4 (static "lcd_current" addr) Reg(U32) Some([252, 253, 254, 255]) [12, 16, 15, 0]
# Var t4584 (t4584 Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))) Reg(U8) Some([16])
# Var t5 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) [12, 16, 15, 0]
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([16])
# Var t6 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) [12, 16, 15, 0]
# Var t7 (static "lcd_current" addr) Reg(U32) Some([244, 245, 246, 247]) [12, 16, 15, 0]
# Var t8 (static "lcd_current" addr) Reg(U32) Some([248, 249, 250, 251]) [12, 16, 15, 0]
# Var t8658 (t8658 Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))) Reg(U8) Some([242])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([242]) [80]
# Var t9 (static "lcd_current" addr) Reg(U32) Some([244, 245, 246, 247]) [12, 16, 15, 0]
# Var ta5ff (ta5ff Ident("next")) Reg(U8) Some([242])
# Var ta72 (ta72 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }) Reg(U32) Some([248, 249, 250, 251])
# Var tab78 (tab78 Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([242])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([16]) [32]
# Var tad4e (tad4e Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) Reg(U32) Some([248, 249, 250, 251])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([17]) [10]
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([242])
# 82320 Copy8 [Register(0x00), Register(0xf2)]
#       Save function parameter 'ch' registers [0] to locals [242].
0b 00 f2 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nIfElse { if_blocks: [(Comparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }, [Assign { target: Ident(\"next\"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident(\"lcd_current\"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: Equals, left: Ident(\"ch\"), right: Number(U8, 10) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# Number(U8, 10)
# 82323 LoadImm8 [Register(0x11), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
#       Number(U8, 10)
04 11 0a 

# if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
# 82326 Cmp8 [Register(0xf2), Register(0x11)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
15 f2 11 

# 82329 JzImm [Label24(lcd_putc_if_true_0_1)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
72 31 23 08 

# 8232d JmpImm [Label24(lcd_putc_if_else_0_2)]
#       if tdcd9 == td7b5 then 'lcd_putc_if_true_0_1' else 'lcd_putc_if_else_0_2' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }
70 9e 23 08 

# :lcd_putc_if_true_0_1 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# IfElse { if_blocks: [(Comparison { op: Equals, left: Ident("ch"), right: Number(U8, 10) }, [Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }, While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }])], else_block: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_if_true_0_1
# t0 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 82331 LoadImm32 [Register(0xf4), Constant32(0x000f100c=987148)]
#       t0 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
20 f4 0c 10 0f 00 

# t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 82337 Load8 [Register(0xf4), Register(0x10)]
#       t5dda <- mem[t0] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
05 f4 10 

# tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
# 8233a LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
04 00 14 

# 8233d Divide8 [Register(0x10), Register(0x00), Register(0xf2)]
#       tab78 <- t5dda Divide Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
#       Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20))
17 10 00 f2 

# t8658 <- tab78 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
# 82341 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t8658 <- tab78 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
04 00 01 

# 82344 Add8NoCarryIn [Register(0xf2), Register(0x00), Register(0xf2)]
#       t8658 <- tab78 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
#       Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1))
14 f2 00 f2 

# next <- t8658 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
# Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
# 82348 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       next <- t8658 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
04 00 14 

# 8234b Mul8_8 [Register(0xf2), Register(0x00), Register(0xf2)]
#       next <- t8658 Multiply Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("next"), var_type: Some(Number(U8)), value: Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20)) }
#       Arithmetic(Multiply, Arithmetic(Add, Arithmetic(Divide, Ident("lcd_current"), Number(U8, 20)), Number(U8, 1)), Number(U8, 20))
10 f2 00 f2 

# :lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_while_predicate_3
# t1 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 8234f LoadImm32 [Register(0xf8), Constant32(0x000f100c=987148)]
#       t1 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
20 f8 0c 10 0f 00 

# t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("lcd_current")
# 82355 Load8 [Register(0xf8), Register(0x10)]
#       t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
#       Ident("lcd_current")
05 f8 10 

# ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# Ident("next")
# optimized away noop copy Instruction { source: "ta5ff <- next U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\nIdent(\"next\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
# 82358 Cmp8 [Register(0xf2), Register(0x10)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
15 f2 10 

# 8235b JcImm [Label24(lcd_putc_while_end_5)]
#       if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }
71 9a 23 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t5dda < ta5ff then 'lcd_putc_while_body_4' else 'lcd_putc_while_end_5' Some('/lutcomp/programs/lib/lcd.j':(51,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }, while_true: [Assign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident(\"lcd_current\"), var_type: None, value: Arithmetic(Add, Ident(\"lcd_current\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"lcd_current\"), right: Ident(\"next\") }\n", opcode: JmpImm, args: [Label24(lcd_putc_while_body_4)], resolved: None }
# :lcd_putc_while_body_4 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# While { predicate: Comparison { op: LessThan, left: Ident("lcd_current"), right: Ident("next") }, while_true: [Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }, Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }] }
# lcd_putc_while_body_4
# t2 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 8235f LoadImm32 [Register(0xf8), Constant32(0x000f100c=987148)]
#       t2 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 f8 0c 10 0f 00 

# t5dda <- mem[t2] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 82365 Load8 [Register(0xf8), Register(0x10)]
#       t5dda <- mem[t2] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 f8 10 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# 82368 LoadImm32 [Register(0xf8), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
20 f8 00 00 00 00 

# 8236e Copy8 [Register(0x10), Register(0xf8)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
0b 10 f8 

# ta72 <- tad4e Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# 82371 AddImm32IgnoreCarry [Register(0xf8), Constant32(0x000f1010=987152)]
#       ta72 <- tad4e Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
32 f8 10 10 0f 00 

# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 82377 LoadImm8 [Register(0x10), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 10 20 

# mem[ta72] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
# 8237a Store8 [Register(0x10), Register(0xf8)]
#       mem[ta72] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Number(U8, 32) }
06 10 f8 

# t3 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 8237d LoadImm32 [Register(0xf8), Constant32(0x000f100c=987148)]
#       t3 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
20 f8 0c 10 0f 00 

# t4 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 82383 LoadImm32 [Register(0xfc), Constant32(0x000f100c=987148)]
#       t4 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
20 fc 0c 10 0f 00 

# t5dda <- mem[t4] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 82389 Load8 [Register(0xfc), Register(0x10)]
#       t5dda <- mem[t4] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
05 fc 10 

# t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# 8238c LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
04 00 01 

# 8238f Add8NoCarryIn [Register(0x10), Register(0x00), Register(0x10)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
14 10 00 10 

# mem[t3] <- t4584 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 82393 Store8 [Register(0x10), Register(0xf8)]
#       mem[t3] <- t4584 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
06 10 f8 

# goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 82396 JmpImm [Label24(lcd_putc_while_predicate_3)]
#       goto lcd_putc_while_predicate_3 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 4f 23 08 

# :lcd_putc_while_end_5 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_while_end_5
# goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# 8239a JmpImm [Label24(lcd_putc_if_end_0)]
#       goto lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
70 f7 23 08 

# :lcd_putc_if_else_0_2 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_else_0_2
# t5 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 8239e LoadImm32 [Register(0xf8), Constant32(0x000f100c=987148)]
#       t5 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
20 f8 0c 10 0f 00 

# t5dda <- mem[t5] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# Ident("lcd_current")
# 823a4 Load8 [Register(0xf8), Register(0x10)]
#       t5dda <- mem[t5] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
#       Ident("lcd_current")
05 f8 10 

# tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
# 823a7 LoadImm32 [Register(0xf8), Constant32(0x00000000=0)]
#       Zero-pad for tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
20 f8 00 00 00 00 

# 823ad Copy8 [Register(0x10), Register(0xf8)]
#       tad4e U32 <- t5dda U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }
0b 10 f8 

# ta72 <- tad4e Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
# 823b0 AddImm32IgnoreCarry [Register(0xf8), Constant32(0x000f1010=987152)]
#       ta72 <- tad4e Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("lcd_current") })
32 f8 10 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nAssign { target: Index(\"lcd_display\", Ident(\"lcd_current\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# mem[ta72] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
# 823b6 Store8 [Register(0xf2), Register(0xf8)]
#       mem[ta72] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Index("lcd_display", Ident("lcd_current")), var_type: None, value: Ident("ch") }
06 f2 f8 

# t6 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 823b9 LoadImm32 [Register(0xf8), Constant32(0x000f100c=987148)]
#       t6 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
20 f8 0c 10 0f 00 

# t5dda <- mem[t6] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("lcd_current")
# 823bf Load8 [Register(0xf8), Register(0x10)]
#       t5dda <- mem[t6] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
#       Ident("lcd_current")
05 f8 10 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"lcd_current\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0xf2), Register(0xf2)], resolved: None }
# None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
# 823c2 Copy8 [Register(0x10), Register(0x00)]
#       Arg0[i]=t5dda None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b 10 00 

# 823c5 Copy8 [Register(0xf2), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(t5dda,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("lcd_current"), Ident("ch")] })
0b f2 04 

# Registers used by this function: {16, 17, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 823c8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 823ce StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c d8 23 08 00 

# 823d4 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 2a 21 08 

# 823d8 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# t7 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 823de LoadImm32 [Register(0xf4), Constant32(0x000f100c=987148)]
#       t7 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
20 f4 0c 10 0f 00 

# t8 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 823e4 LoadImm32 [Register(0xf8), Constant32(0x000f100c=987148)]
#       t8 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
20 f8 0c 10 0f 00 

# t5dda <- mem[t8] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# Ident("lcd_current")
# 823ea Load8 [Register(0xf8), Register(0x10)]
#       t5dda <- mem[t8] U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
#       Ident("lcd_current")
05 f8 10 

# t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
# 823ed LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
04 00 01 

# 823f0 Add8NoCarryIn [Register(0x10), Register(0x00), Register(0x10)]
#       t4584 <- t5dda Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("lcd_current"), Number(U8, 1))
14 10 00 10 

# mem[t7] <- t4584 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
# 823f4 Store8 [Register(0x10), Register(0xf4)]
#       mem[t7] <- t4584 U8 Some('/lutcomp/programs/lib/lcd.j':(51,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Add, Ident("lcd_current"), Number(U8, 1)) }
06 10 f4 

# :lcd_putc_if_end_0 Some('/lutcomp/programs/lib/lcd.j':(51,5))
# lcd_putc_if_end_0
# t9 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Ident("lcd_current")
# 823f7 LoadImm32 [Register(0xf4), Constant32(0x000f100c=987148)]
#       t9 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Ident("lcd_current")
20 f4 0c 10 0f 00 

# t5dda <- mem[t9] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Ident("lcd_current")
# 823fd Load8 [Register(0xf4), Register(0x10)]
#       t5dda <- mem[t9] U8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Ident("lcd_current")
05 f4 10 

# t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# Number(U8, 80)
# 82400 LoadImm8 [Register(0xf2), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
#       Number(U8, 80)
04 f2 50 

# if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
# 82403 Cmp8 [Register(0xf2), Register(0x10)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
15 f2 10 

# 82406 JcImm [Label24(lcd_putc_if_true_0_7)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
71 0e 24 08 

# 8240a JmpImm [Label24(lcd_putc_if_else_0_8)]
#       if t5dda >= t8fe0 then 'lcd_putc_if_true_0_7' else 'lcd_putc_if_else_0_8' Some('/lutcomp/programs/lib/lcd.j':(63,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }
70 28 24 08 

# :lcd_putc_if_true_0_7 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("lcd_current"), right: Number(U8, 80) }, [VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }])], else_block: [] }
# lcd_putc_if_true_0_7
# None <= call lcd_scroll_up() Some('/lutcomp/programs/lib/lcd.j':(63,5))
# VoidExpression { expression: Call(Call { function: "lcd_scroll_up", parameters: [] }) }
# Call(Call { function: "lcd_scroll_up", parameters: [] })
# Registers used by this function: {16, 17, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers used by callee tree: {18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 8240e AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c fc ff ff ff 

# 82414 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_scroll_up))
25 0c 1e 24 08 00 

# 8241a JmpImm [Label24(:lcd_scroll_up)]
#       PseudoCall(Label24(:lcd_scroll_up))
70 2f 24 08 

# 8241e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_scroll_up))
32 0c 04 00 00 00 

# goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# 82424 JmpImm [Label24(lcd_putc_if_end_6)]
#       goto lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
70 28 24 08 

# :lcd_putc_if_else_0_8 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_else_0_8
# :lcd_putc_if_end_6 Some('/lutcomp/programs/lib/lcd.j':(63,5))
# lcd_putc_if_end_6
# return None None
# Return { value: None }
# 82428 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_putc None
# function_end_lcd_putc
# Unreachable None
# 8242a Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :lcd_scroll_up
# Ret None
# Var ch (Local ch Number(U8) Reg(U8)) Reg(U8) Some([18])
# Var i (Local i Number(U8) Reg(U8)) Reg(U8) Some([19])
# Var t0 (static "lcd_current" addr) Reg(U32) Some([20, 21, 22, 23]) [12, 16, 15, 0]
# Var t1 (static "lcd_current" addr) Reg(U32) Some([24, 25, 26, 27]) [12, 16, 15, 0]
# Var t2aa3 (t2aa3 Number(U8, 60)) Reg(U8) Some([18]) [60]
# Var t2cc3 (t2cc3 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }) Reg(U32) Some([20, 21, 22, 23])
# Var t4241 (t4241 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }) Reg(U32) Some([28, 29, 30, 31])
# Var t5dda (t5dda Ident("lcd_current")) Reg(U8) Some([19])
# Var t7e9 (t7e9 Arithmetic(Add, Ident("i"), Number(U8, 20))) Reg(U8) Some([18])
# Var t8fe0 (t8fe0 Number(U8, 80)) Reg(U8) Some([18]) [80]
# Var t9725 (t9725 Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) Reg(U32) Some([28, 29, 30, 31])
# Var ta094 (ta094 Index("lcd_display", Ident("i"))) Reg(U8) Some([32])
# Var tac5f (tac5f Number(U8, 32)) Reg(U8) Some([18]) [32]
# Var tb175 (tb175 Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))) Reg(U8) Some([19])
# Var td0f3 (td0f3 Ident("i")) Reg(U8) Some([19])
# Var tdcd9 (tdcd9 Ident("ch")) Reg(U8) Some([18])
# Var tfd7d (tfd7d Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) Reg(U32) Some([20, 21, 22, 23])
# t0 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# 8242f LoadImm32 [Register(0x14), Constant32(0x000f100c=987148)]
#       t0 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
20 14 0c 10 0f 00 

# t1 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 82435 LoadImm32 [Register(0x18), Constant32(0x000f100c=987148)]
#       t1 <- 0n987148/0x000f100cu32  Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
20 18 0c 10 0f 00 

# t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# Ident("lcd_current")
# 8243b Load8 [Register(0x18), Register(0x13)]
#       t5dda <- mem[t1] U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
#       Ident("lcd_current")
05 18 13 

# tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
# 8243e LoadImm8 [Register(0x00), Constant8(0xec=236)]
#       tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
04 00 ec 

# 82441 Add8NoCarryIn [Register(0x13), Register(0x00), Register(0x13)]
#       tb175 <- t5dda Subtract Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
#       Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20))
14 13 00 13 

# mem[t0] <- tb175 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
# Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
# 82445 Store8 [Register(0x13), Register(0x14)]
#       mem[t0] <- tb175 U8 Some('/lutcomp/programs/lib/lcd.j':(27,5))
#       Assign { target: Ident("lcd_current"), var_type: None, value: Arithmetic(Subtract, Ident("lcd_current"), Number(U8, 20)) }
06 13 14 

# i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
# Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
# Number(U8, 0)
# 82448 LoadImm8 [Register(0x13), Constant8(0x00=0)]
#       i <- 0n0/0x00u8  Some('/lutcomp/programs/lib/lcd.j':(29,5))
#       Assign { target: Ident("i"), var_type: Some(Number(U8)), value: Number(U8, 0) }
#       Number(U8, 0)
04 13 00 

# :lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_predicate_0
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# t2aa3 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# Number(U8, 60)
# 8244b LoadImm8 [Register(0x12), Constant8(0x3c=60)]
#       t2aa3 <- 0n60/0x3cu8  Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
#       Number(U8, 60)
04 12 3c 

# if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
# 8244e Cmp8 [Register(0x12), Register(0x13)]
#       if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
15 12 13 

# 82451 JcImm [Label24(lcd_scroll_up_while_end_2)]
#       if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }
71 c4 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t2aa3 then 'lcd_scroll_up_while_body_1' else 'lcd_scroll_up_while_end_2' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }, while_true: [Assign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 60) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_1)], resolved: None }
# :lcd_scroll_up_while_body_1 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 60) }, while_true: [Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }, IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_body_1
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# Arithmetic(Add, Ident("i"), Number(U8, 20))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"ch\"), var_type: None, value: Index(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20))) }\nIndex(\"lcd_display\", Arithmetic(Add, Ident(\"i\"), Number(U8, 20)))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }) }\nArithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident(\"i\"), Number(U8, 20)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 20))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# Arithmetic(Add, Ident("i"), Number(U8, 20))
# 82455 LoadImm8 [Register(0x00), Constant8(0x14=20)]
#       t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 20))
04 00 14 

# 82458 Add8NoCarryIn [Register(0x13), Register(0x00), Register(0x12)]
#       t7e9 <- td0f3 Add Number(0n20/0x14u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 20))
14 13 00 12 

# tfd7d U32 <- t7e9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
# 8245c LoadImm32 [Register(0x14), Constant32(0x00000000=0)]
#       Zero-pad for tfd7d U32 <- t7e9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
20 14 00 00 00 00 

# 82462 Copy8 [Register(0x12), Register(0x14)]
#       tfd7d U32 <- t7e9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }
0b 12 14 

# t2cc3 <- tfd7d Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
# 82465 AddImm32IgnoreCarry [Register(0x14), Constant32(0x000f1010=987152)]
#       t2cc3 <- tfd7d Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Arithmetic(Add, Ident("i"), Number(U8, 20)) })
32 14 10 10 0f 00 

# ch <- mem[t2cc3] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
# Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
# 8246b Load8 [Register(0x14), Register(0x12)]
#       ch <- mem[t2cc3] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("ch"), var_type: None, value: Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20))) }
#       Index("lcd_display", Arithmetic(Add, Ident("i"), Number(U8, 20)))
05 14 12 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x12), Register(0x12)], resolved: None }
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 8246e LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 1c 00 00 00 00 

# 82474 Copy8 [Register(0x13), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 13 1c 

# t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 82477 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f1010=987152)]
#       t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 1c 10 10 0f 00 

# ta094 <- mem[t4241] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# Index("lcd_display", Ident("i"))
# 8247d Load8 [Register(0x1c), Register(0x20)]
#       ta094 <- mem[t4241] U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
#       Index("lcd_display", Ident("i"))
05 1c 20 

# if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
# 82480 Cmp8 [Register(0x12), Register(0x20)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
15 12 20 

# 82483 JzImm [Label24(lcd_scroll_up_if_else_0_5)]
#       if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }
72 b9 24 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if tdcd9 != ta094 then 'lcd_scroll_up_if_true_0_4' else 'lcd_scroll_up_if_else_0_5' Some('/lutcomp/programs/lib/lcd.j':(31,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"ch\"), right: Index(\"lcd_display\", Ident(\"i\")) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_4)], resolved: None }
# :lcd_scroll_up_if_true_0_4 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("ch"), right: Index("lcd_display", Ident("i")) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_4
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 82487 LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 1c 00 00 00 00 

# 8248d Copy8 [Register(0x13), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 13 1c 

# t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 82490 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f1010=987152)]
#       t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 1c 10 10 0f 00 

# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Ident(\"ch\") }\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x12), Register(0x12)], resolved: None }
# mem[t4241] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
# 82496 Store8 [Register(0x12), Register(0x1c)]
#       mem[t4241] <- tdcd9 U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Ident("ch") }
06 12 1c 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# Ident("ch")
# optimized away noop copy Instruction { source: "tdcd9 <- ch U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Ident(\"ch\")] })\nIdent(\"ch\")\n", opcode: Copy8, args: [Register(0x12), Register(0x12)], resolved: None }
# None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
# 82499 Copy8 [Register(0x13), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 13 00 

# 8249c Copy8 [Register(0x12), Register(0x04)]
#       Arg1[ch]=tdcd9 None <= call lcd_draw_char(td0f3,tdcd9,) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Ident("ch")] })
0b 12 04 

# Registers used by this function: {18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 8249f AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 824a5 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c af 24 08 00 

# 824ab JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 2a 21 08 

# 824af AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# goto lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 824b5 JmpImm [Label24(lcd_scroll_up_if_end_3)]
#       goto lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 b9 24 08 

# :lcd_scroll_up_if_else_0_5 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_else_0_5
# :lcd_scroll_up_if_end_3 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_if_end_3
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(31,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 824b9 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 824bc Add8NoCarryIn [Register(0x13), Register(0x00), Register(0x13)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(31,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 13 00 13 

# goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# 824c0 JmpImm [Label24(lcd_scroll_up_while_predicate_0)]
#       goto lcd_scroll_up_while_predicate_0 Some('/lutcomp/programs/lib/lcd.j':(31,5))
70 4b 24 08 

# :lcd_scroll_up_while_end_2 Some('/lutcomp/programs/lib/lcd.j':(31,5))
# lcd_scroll_up_while_end_2
# :lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_predicate_6
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(U8, 32) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# Number(U8, 80)
# 824c4 LoadImm8 [Register(0x12), Constant8(0x50=80)]
#       t8fe0 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
#       Number(U8, 80)
04 12 50 

# if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
# 824c7 Cmp8 [Register(0x12), Register(0x13)]
#       if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
15 12 13 

# 824ca JcImm [Label24(lcd_scroll_up_while_end_8)]
#       if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
#       Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }
71 2d 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if td0f3 < t8fe0 then 'lcd_scroll_up_while_body_7' else 'lcd_scroll_up_while_end_8' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nWhile { predicate: Comparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(U8, 32) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }] }\nComparison { op: LessThan, left: Ident(\"i\"), right: Number(U8, 80) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_while_body_7)], resolved: None }
# :lcd_scroll_up_while_body_7 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# While { predicate: Comparison { op: LessThan, left: Ident("i"), right: Number(U8, 80) }, while_true: [IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }, Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }] }
# lcd_scroll_up_while_body_7
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(U8, 32) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(U8, 32) }\nIndex(\"lcd_display\", Ident(\"i\"))\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 824ce LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 1c 00 00 00 00 

# 824d4 Copy8 [Register(0x13), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 13 1c 

# t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
# Index("lcd_display", Ident("i"))
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 824d7 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f1010=987152)]
#       t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
#       Index("lcd_display", Ident("i"))
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 1c 10 10 0f 00 

# ta094 <- mem[t4241] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
# Index("lcd_display", Ident("i"))
# 824dd Load8 [Register(0x1c), Register(0x20)]
#       ta094 <- mem[t4241] U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
#       Index("lcd_display", Ident("i"))
05 1c 20 

# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
# Number(U8, 32)
# 824e0 LoadImm8 [Register(0x12), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
#       Number(U8, 32)
04 12 20 

# if ta094 != tac5f then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
# 824e3 Cmp8 [Register(0x20), Register(0x12)]
#       if ta094 != tac5f then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
15 20 12 

# 824e6 JzImm [Label24(lcd_scroll_up_if_else_0_11)]
#       if ta094 != tac5f then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }
72 22 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if ta094 != tac5f then 'lcd_scroll_up_if_true_0_10' else 'lcd_scroll_up_if_else_0_11' Some('/lutcomp/programs/lib/lcd.j':(41,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(U8, 32) }, [Assign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Index(\"lcd_display\", Ident(\"i\")), right: Number(U8, 32) }\n", opcode: JmpImm, args: [Label24(lcd_scroll_up_if_true_0_10)], resolved: None }
# :lcd_scroll_up_if_true_0_10 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Index("lcd_display", Ident("i")), right: Number(U8, 32) }, [Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }, VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }])], else_block: [] }
# lcd_scroll_up_if_true_0_10
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Index(\"lcd_display\", Ident(\"i\")), var_type: None, value: Number(U8, 32) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }) }\nArithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") })\nCast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident(\"i\") }\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
# 824ea LoadImm32 [Register(0x1c), Constant32(0x00000000=0)]
#       Zero-pad for t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
20 1c 00 00 00 00 

# 824f0 Copy8 [Register(0x13), Register(0x1c)]
#       t9725 U32 <- td0f3 U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
#       Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }
0b 13 1c 

# t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
# Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
# 824f3 AddImm32IgnoreCarry [Register(0x1c), Constant32(0x000f1010=987152)]
#       t4241 <- t9725 Add Number(0n987152/0x000f1010u32) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") }) }
#       Arithmetic(Add, Number(USIZE, 987152), Cast { old_type: Some(Number(U8)), new_type: Number(USIZE), value: Ident("i") })
32 1c 10 10 0f 00 

# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# Number(U8, 32)
# 824f9 LoadImm8 [Register(0x12), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
#       Number(U8, 32)
04 12 20 

# mem[t4241] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
# 824fc Store8 [Register(0x12), Register(0x1c)]
#       mem[t4241] <- tac5f U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Index("lcd_display", Ident("i")), var_type: None, value: Number(U8, 32) }
06 12 1c 

# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nVoidExpression { expression: Call(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] }) }\nCall(Call { function: \"lcd_draw_char\", parameters: [Ident(\"i\"), Number(U8, 32)] })\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# Number(U8, 32)
# 824ff LoadImm8 [Register(0x12), Constant8(0x20=32)]
#       tac5f <- 0n32/0x20u8  Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
#       Number(U8, 32)
04 12 20 

# None <= call lcd_draw_char(td0f3,tac5f,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
# Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
# 82502 Copy8 [Register(0x13), Register(0x00)]
#       Arg0[i]=td0f3 None <= call lcd_draw_char(td0f3,tac5f,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
0b 13 00 

# 82505 Copy8 [Register(0x12), Register(0x04)]
#       Arg1[ch]=tac5f None <= call lcd_draw_char(td0f3,tac5f,) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       VoidExpression { expression: Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] }) }
#       Call(Call { function: "lcd_draw_char", parameters: [Ident("i"), Number(U8, 32)] })
0b 12 04 

# Registers used by this function: {18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227}
# Registers to save: []
# 82508 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c fc ff ff ff 

# 8250e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_draw_char))
25 0c 18 25 08 00 

# 82514 JmpImm [Label24(:lcd_draw_char)]
#       PseudoCall(Label24(:lcd_draw_char))
70 2a 21 08 

# 82518 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_draw_char))
32 0c 04 00 00 00 

# goto lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 8251e JmpImm [Label24(lcd_scroll_up_if_end_9)]
#       goto lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 22 25 08 

# :lcd_scroll_up_if_else_0_11 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_else_0_11
# :lcd_scroll_up_if_end_9 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_if_end_9
# td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# Ident("i")
# optimized away noop copy Instruction { source: "td0f3 <- i U8 Some('/lutcomp/programs/lib/lcd.j':(41,5))\nAssign { target: Ident(\"i\"), var_type: None, value: Arithmetic(Add, Ident(\"i\"), Number(U8, 1)) }\nArithmetic(Add, Ident(\"i\"), Number(U8, 1))\nIdent(\"i\")\n", opcode: Copy8, args: [Register(0x13), Register(0x13)], resolved: None }
# i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
# Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
# Arithmetic(Add, Ident("i"), Number(U8, 1))
# 82522 LoadImm8 [Register(0x00), Constant8(0x01=1)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
04 00 01 

# 82525 Add8NoCarryIn [Register(0x13), Register(0x00), Register(0x13)]
#       i <- td0f3 Add Number(0n1/0x01u8) Some('/lutcomp/programs/lib/lcd.j':(41,5))
#       Assign { target: Ident("i"), var_type: None, value: Arithmetic(Add, Ident("i"), Number(U8, 1)) }
#       Arithmetic(Add, Ident("i"), Number(U8, 1))
14 13 00 13 

# goto lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# 82529 JmpImm [Label24(lcd_scroll_up_while_predicate_6)]
#       goto lcd_scroll_up_while_predicate_6 Some('/lutcomp/programs/lib/lcd.j':(41,5))
70 c4 24 08 

# :lcd_scroll_up_while_end_8 Some('/lutcomp/programs/lib/lcd.j':(41,5))
# lcd_scroll_up_while_end_8
# return None None
# Return { value: None }
# 8252d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_lcd_scroll_up None
# function_end_lcd_scroll_up
# Unreachable None
# 8252f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :main
# Ret Some(U8)
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([36, 37, 38, 39]) [0, 0, 0, 0]
# Var inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 (tc957 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }) Reg(U32) Some([40, 41, 42, 43]) [180, 17, 15, 0]
# Var inline_main_RpnCalc_init_51_t60ec (t60ec Number(USIZE, 0)) Reg(U32) Some([36, 37, 38, 39]) [0, 0, 0, 0]
# Var inline_main_RpnCalc_init_51_t6e8e (t6e8e Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }) Reg(U32) Some([40, 41, 42, 43]) [184, 17, 15, 0]
# Var inline_main_putc_25_t0 (static "lcd_enable" addr) Reg(U32) Some([36, 37, 38, 39]) [96, 16, 15, 0]
# Var inline_main_putc_25_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_25_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) [82]
# Var inline_main_putc_25_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([45]) [0]
# Var inline_main_putc_26_t0 (static "lcd_enable" addr) Reg(U32) Some([36, 37, 38, 39]) [96, 16, 15, 0]
# Var inline_main_putc_26_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_26_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) [80]
# Var inline_main_putc_26_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([45]) [0]
# Var inline_main_putc_27_t0 (static "lcd_enable" addr) Reg(U32) Some([36, 37, 38, 39]) [96, 16, 15, 0]
# Var inline_main_putc_27_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_27_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) [78]
# Var inline_main_putc_27_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([45]) [0]
# Var inline_main_putc_28_t0 (static "lcd_enable" addr) Reg(U32) Some([36, 37, 38, 39]) [96, 16, 15, 0]
# Var inline_main_putc_28_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([44])
# Var inline_main_putc_28_tac13 (tac13 Ident("c")) Reg(U8) Some([44]) [10]
# Var inline_main_putc_28_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([45]) [0]
# Var t2a99 (t2a99 Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) Reg(U8) Some([44])
# Var tca8 (tca8 AddressOf(Ident("calc"))) Reg(U32) Some([36, 37, 38, 39]) [116, 17, 15, 0]
# None <= call stdio_init() Some('programs/app/rpn.j':(4,5))
# VoidExpression { expression: Call(Call { function: "stdio_init", parameters: [] }) }
# Call(Call { function: "stdio_init", parameters: [] })
# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 20, 21, 22, 23, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 205, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers to save: []
# 82534 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:stdio_init))
32 0c fc ff ff ff 

# 8253a StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:stdio_init))
25 0c 44 25 08 00 

# 82540 JmpImm [Label24(:stdio_init)]
#       PseudoCall(Label24(:stdio_init))
70 bd 2d 08 

# 82544 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:stdio_init))
32 0c 04 00 00 00 

# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 8254a LoadImm8 [Register(0x2c), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 2c 52 

# None <= call io_write0(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8254d Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_25_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 8254f LoadImm32 [Register(0x24), Constant32(0x000f1060=987232)]
#       inline_main_putc_25_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 24 60 10 0f 00 

# inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 82555 Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_25_t76c7 <- mem[inline_main_putc_25_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 24 2c 

# inline_main_putc_25_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 82558 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_25_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 2d 00 

# if inline_main_putc_25_t76c7 != inline_main_putc_25_tb36e then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 8255b Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_tb36e then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 2c 2d 

# 8255e JzImm [Label24(inline_main_putc_25_putc_if_else_0_2)]
#       if inline_main_putc_25_t76c7 != inline_main_putc_25_tb36e then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 82 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_25_t76c7 != inline_main_putc_25_tb36e then 'inline_main_putc_25_putc_if_true_0_1' else 'inline_main_putc_25_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_25_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_25_putc_if_true_0_1
# inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
# 82562 LoadImm8 [Register(0x2c), Constant8(0x52=82)]
#       inline_main_putc_25_tac13 <- 0n82/0x52u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_25_tac13 <- inline_main_putc_25_c U8` with constant `inline_main_putc_25_tac13 <- 0n82/0x52u8 `.
04 2c 52 

# None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82565 Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_25_tac13 None <= call lcd_putc(inline_main_putc_25_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 82568 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 8256e StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 78 25 08 00 

# 82574 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 82578 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 8257e JmpImm [Label24(inline_main_putc_25_putc_if_end_0)]
#       goto inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 82 25 08 

# :inline_main_putc_25_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_else_0_2
# :inline_main_putc_25_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_25_putc_if_end_0
# goto inline_main_putc_25_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_25_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_25_function_end_putc)], resolved: None }
# :inline_main_putc_25_function_end_putc None
# inline_main_putc_25_function_end_putc
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 82582 LoadImm8 [Register(0x2c), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 2c 50 

# None <= call io_write0(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82585 Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_26_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 82587 LoadImm32 [Register(0x24), Constant32(0x000f1060=987232)]
#       inline_main_putc_26_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 24 60 10 0f 00 

# inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 8258d Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_26_t76c7 <- mem[inline_main_putc_26_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 24 2c 

# inline_main_putc_26_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 82590 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_26_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 2d 00 

# if inline_main_putc_26_t76c7 != inline_main_putc_26_tb36e then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 82593 Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_26_tb36e then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 2c 2d 

# 82596 JzImm [Label24(inline_main_putc_26_putc_if_else_0_2)]
#       if inline_main_putc_26_t76c7 != inline_main_putc_26_tb36e then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 ba 25 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_26_t76c7 != inline_main_putc_26_tb36e then 'inline_main_putc_26_putc_if_true_0_1' else 'inline_main_putc_26_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_26_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_26_putc_if_true_0_1
# inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
# 8259a LoadImm8 [Register(0x2c), Constant8(0x50=80)]
#       inline_main_putc_26_tac13 <- 0n80/0x50u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_26_tac13 <- inline_main_putc_26_c U8` with constant `inline_main_putc_26_tac13 <- 0n80/0x50u8 `.
04 2c 50 

# None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 8259d Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_26_tac13 None <= call lcd_putc(inline_main_putc_26_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 825a0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 825a6 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c b0 25 08 00 

# 825ac JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 825b0 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 825b6 JmpImm [Label24(inline_main_putc_26_putc_if_end_0)]
#       goto inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 ba 25 08 

# :inline_main_putc_26_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_else_0_2
# :inline_main_putc_26_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_26_putc_if_end_0
# goto inline_main_putc_26_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_26_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_26_function_end_putc)], resolved: None }
# :inline_main_putc_26_function_end_putc None
# inline_main_putc_26_function_end_putc
# tca8 <- 0n987508/0x000f1174u32  Some('programs/app/rpn.j':(12,5))
# VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
# Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(USIZE, 987508)
# 825ba LoadImm32 [Register(0x24), Constant32(0x000f1174=987508)]
#       tca8 <- 0n987508/0x000f1174u32  Some('programs/app/rpn.j':(12,5))
#       VoidExpression { expression: Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] }) }
#       Call(Call { function: "RpnCalc_init", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(USIZE, 987508)
20 24 74 11 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987572/0x000f11b4u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987572/0x000f11b4u32 `.
# 825c0 LoadImm32 [Register(0x28), Constant32(0x000f11b4=987572)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987572/0x000f11b4u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Stack"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 64))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_s Add Number(0n64/0x00000040u32)` with constant `inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957 <- 0n987572/0x000f11b4u32 `.
20 28 b4 11 0f 00 

# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 825c6 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 24 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
# Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
# 825cc Store32_1 [Register(0x24), Register(0x28)]
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
23 24 28 

# 825cf Store32_2 []
#       mem[inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_tc957] <- inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_t60ec U32 Some('/lutcomp/programs/lib/Stack.j':(7,5))
#       Assign { target: PtrFieldDeref("s", "first_free"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init)], resolved: None }
# :inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init None
# inline_main_RpnCalc_init_51_inline_RpnCalc_init_stack_init_49_function_end_stack_init
# inline_main_RpnCalc_init_51_t6e8e <- 0n987576/0x000f11b8u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
# # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987576/0x000f11b8u32 `.
# 825d0 LoadImm32 [Register(0x28), Constant32(0x000f11b8=987576)]
#       inline_main_RpnCalc_init_51_t6e8e <- 0n987576/0x000f11b8u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("RpnCalc"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 68))
#       # In IlFunctionId("main"), replacing `inline_main_RpnCalc_init_51_t6e8e <- inline_main_RpnCalc_init_51_c Add Number(0n68/0x00000044u32)` with constant `inline_main_RpnCalc_init_51_t6e8e <- 0n987576/0x000f11b8u32 `.
20 28 b8 11 0f 00 

# inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 825d6 LoadImm32 [Register(0x24), Constant32(0x00000000=0)]
#       inline_main_RpnCalc_init_51_t60ec <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 24 00 00 00 00 

# mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
# Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
# 825dc Store32_1 [Register(0x24), Register(0x28)]
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
23 24 28 

# 825df Store32_2 []
#       mem[inline_main_RpnCalc_init_51_t6e8e] <- inline_main_RpnCalc_init_51_t60ec U32 Some('/lutcomp/programs/lib/rpnlib.j':(16,5))
#       Assign { target: PtrFieldDeref("c", "num"), var_type: None, value: Number(USIZE, 0) }
24 

# goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_RpnCalc_init_51_function_end_RpnCalc_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_RpnCalc_init_51_function_end_RpnCalc_init)], resolved: None }
# :inline_main_RpnCalc_init_51_function_end_RpnCalc_init None
# inline_main_RpnCalc_init_51_function_end_RpnCalc_init
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 825e0 LoadImm8 [Register(0x2c), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 2c 4e 

# None <= call io_write0(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 825e3 Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_27_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 825e5 LoadImm32 [Register(0x24), Constant32(0x000f1060=987232)]
#       inline_main_putc_27_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 24 60 10 0f 00 

# inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 825eb Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_27_t76c7 <- mem[inline_main_putc_27_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 24 2c 

# inline_main_putc_27_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 825ee LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_27_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 2d 00 

# if inline_main_putc_27_t76c7 != inline_main_putc_27_tb36e then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 825f1 Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_27_tb36e then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 2c 2d 

# 825f4 JzImm [Label24(inline_main_putc_27_putc_if_else_0_2)]
#       if inline_main_putc_27_t76c7 != inline_main_putc_27_tb36e then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 18 26 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_27_t76c7 != inline_main_putc_27_tb36e then 'inline_main_putc_27_putc_if_true_0_1' else 'inline_main_putc_27_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_27_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_27_putc_if_true_0_1
# inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
# 825f8 LoadImm8 [Register(0x2c), Constant8(0x4e=78)]
#       inline_main_putc_27_tac13 <- 0n78/0x4eu8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_27_tac13 <- inline_main_putc_27_c U8` with constant `inline_main_putc_27_tac13 <- 0n78/0x4eu8 `.
04 2c 4e 

# None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 825fb Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_27_tac13 None <= call lcd_putc(inline_main_putc_27_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 825fe AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82604 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 0e 26 08 00 

# 8260a JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 8260e AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 82614 JmpImm [Label24(inline_main_putc_27_putc_if_end_0)]
#       goto inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 18 26 08 

# :inline_main_putc_27_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_else_0_2
# :inline_main_putc_27_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_27_putc_if_end_0
# goto inline_main_putc_27_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_27_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_27_function_end_putc)], resolved: None }
# :inline_main_putc_27_function_end_putc None
# inline_main_putc_27_function_end_putc
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 82618 LoadImm8 [Register(0x2c), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(35,5))
#       VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
#       Call(Call { function: "io_write0", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 2c 0a 

# None <= call io_write0(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 8261b Out0 [Register(0x2c)]
#       IoWrite0
68 2c 

# inline_main_putc_28_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 8261d LoadImm32 [Register(0x24), Constant32(0x000f1060=987232)]
#       inline_main_putc_28_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 24 60 10 0f 00 

# inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 82623 Load8 [Register(0x24), Register(0x2c)]
#       inline_main_putc_28_t76c7 <- mem[inline_main_putc_28_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 24 2c 

# inline_main_putc_28_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 82626 LoadImm8 [Register(0x2d), Constant8(0x00=0)]
#       inline_main_putc_28_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 2d 00 

# if inline_main_putc_28_t76c7 != inline_main_putc_28_tb36e then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 82629 Cmp8 [Register(0x2c), Register(0x2d)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_28_tb36e then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 2c 2d 

# 8262c JzImm [Label24(inline_main_putc_28_putc_if_else_0_2)]
#       if inline_main_putc_28_t76c7 != inline_main_putc_28_tb36e then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 50 26 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_main_putc_28_t76c7 != inline_main_putc_28_tb36e then 'inline_main_putc_28_putc_if_true_0_1' else 'inline_main_putc_28_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_putc_if_true_0_1)], resolved: None }
# :inline_main_putc_28_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_main_putc_28_putc_if_true_0_1
# inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
# 82630 LoadImm8 [Register(0x2c), Constant8(0x0a=10)]
#       inline_main_putc_28_tac13 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
#       Ident("c")
#       # In IlFunctionId("main"), replacing `inline_main_putc_28_tac13 <- inline_main_putc_28_c U8` with constant `inline_main_putc_28_tac13 <- 0n10/0x0au8 `.
04 2c 0a 

# None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82633 Copy8 [Register(0x2c), Register(0x00)]
#       Arg0[ch]=inline_main_putc_28_tac13 None <= call lcd_putc(inline_main_putc_28_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 2c 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 82636 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 8263c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c 46 26 08 00 

# 82642 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 82646 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 8264c JmpImm [Label24(inline_main_putc_28_putc_if_end_0)]
#       goto inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 50 26 08 

# :inline_main_putc_28_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_else_0_2
# :inline_main_putc_28_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_main_putc_28_putc_if_end_0
# goto inline_main_putc_28_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_main_putc_28_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_main_putc_28_function_end_putc)], resolved: None }
# :inline_main_putc_28_function_end_putc None
# inline_main_putc_28_function_end_putc
# tca8 <- 0n987508/0x000f1174u32  Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# AddressOf(Ident("calc"))
# Number(USIZE, 987508)
# 82650 LoadImm32 [Register(0x24), Constant32(0x000f1174=987508)]
#       tca8 <- 0n987508/0x000f1174u32  Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
#       AddressOf(Ident("calc"))
#       Number(USIZE, 987508)
20 24 74 11 0f 00 

# Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
# 82656 Copy32 [Register(0x24), Register(0x00)]
#       Arg0[calc]=tca8 Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
21 24 00 

# Registers used by this function: {36, 37, 38, 39, 40, 41, 42, 43, 44, 45}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [36, 40, 41, 42, 43, 44, 45]
# 82659 Push8 [Register(0x2d)]
#       Saving reg0x2d before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2d 

# 8265b Push8 [Register(0x2c)]
#       Saving reg0x2c before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2c 

# 8265d Push8 [Register(0x2b)]
#       Saving reg0x2b before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2b 

# 8265f Push8 [Register(0x2a)]
#       Saving reg0x2a before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 2a 

# 82661 Push8 [Register(0x29)]
#       Saving reg0x29 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 29 

# 82663 Push8 [Register(0x28)]
#       Saving reg0x28 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 28 

# 82665 Push8 [Register(0x24)]
#       Saving reg0x24 before Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
09 24 

# 82667 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c fc ff ff ff 

# 8266d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:RpnCalc_run))
25 0c 77 26 08 00 

# 82673 JmpImm [Label24(:RpnCalc_run)]
#       PseudoCall(Label24(:RpnCalc_run))
70 e9 19 08 

# 82677 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:RpnCalc_run))
32 0c 04 00 00 00 

# 8267d Pop8 [Register(0x24)]
#       Restoring reg0x24 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 24 

# 8267f Pop8 [Register(0x28)]
#       Restoring reg0x28 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 28 

# 82681 Pop8 [Register(0x29)]
#       Restoring reg0x29 after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 29 

# 82683 Pop8 [Register(0x2a)]
#       Restoring reg0x2a after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2a 

# 82685 Pop8 [Register(0x2b)]
#       Restoring reg0x2b after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2b 

# 82687 Pop8 [Register(0x2c)]
#       Restoring reg0x2c after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2c 

# 82689 Pop8 [Register(0x2d)]
#       Restoring reg0x2d after Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0a 2d 

# 8268b Copy8 [Register(0x00), Register(0x2c)]
#       Some(t2a99) <= call RpnCalc_run(tca8,) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
#       Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })
0b 00 2c 

# return Some(t2a99) Some('programs/app/rpn.j':(17,5))
# Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
# 8268e Copy8 [Register(0x2c), Register(0x00)]
#       return Some(t2a99) Some('programs/app/rpn.j':(17,5))
#       Return { value: Some(Call(Call { function: "RpnCalc_run", parameters: [AddressOf(Ident("calc"))] })) }
0b 2c 00 

# 82691 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_main None
# function_end_main
# Unreachable None
# 82693 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :mul32_64
# Ret None
# Arg0=a
# Arg1=b
# Arg2=c
# Var __frame_pointer (__frame_pointer) Reg(U32) Some([12, 13, 14, 15])
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([48, 49, 50, 51])
# Var a_hi (Local a_hi Number(USIZE) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var b (Arg1 b Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var b_hi (Local b_hi Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_0_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_0_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_0_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t1506 (t1506 Ident("lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_0_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_add_U64_0_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_0_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_0_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_0_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_add_U64_0_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_add_U64_0_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_a (Arg0 a Ptr(Struct("U64"))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_b (Arg1 b Ptr(Struct("U64"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_c (Arg2 c Ptr(Struct("U64"))) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_lo (Local lo Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_add_U64_1_t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_t144a (t144a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t1506 (t1506 Ident("lo")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_t153d (t153d PtrFieldDeref("b", "hi")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t2558 (t2558 Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_t6f1c (t6f1c Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t809 (t809 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_add_U64_1_t8956 (t8956 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_add_U64_1_t90ac (t90ac PtrFieldDeref("c", "lo")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_add_U64_1_ta95f (ta95f Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_tbeec (tbeec Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_tcbd1 (tcbd1 Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_td5bf (td5bf PtrFieldDeref("b", "lo")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_add_U64_1_td868 (td868 PtrFieldDeref("a", "lo")) Reg(U32) Some([64, 65, 66, 67])
# Var inline_mul32_64_add_U64_1_te24c (te24c PtrFieldDeref("a", "hi")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_add_U64_1_tf677 (tf677 PtrFieldDeref("c", "hi")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_10_a (Arg0 a Number(USIZE)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_b (Arg1 b Number(USIZE)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_10_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_10_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_10_t3585 (t3585 Ident("e")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_t45f5 (t45f5 Ident("d")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([89])
# Var inline_mul32_64_mul16_32_10_t8792 (t8792 Ident("a")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([90])
# Var inline_mul32_64_mul16_32_10_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_10_tac13 (tac13 Ident("c")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_10_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_10_tace9 (tace9 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_10_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([91]) [0]
# Var inline_mul32_64_mul16_32_10_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_10_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([89])
# Var inline_mul32_64_mul16_32_10_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_10_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_11_a (Arg0 a Number(USIZE)) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_b (Arg1 b Number(USIZE)) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_11_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_11_t3585 (t3585 Ident("e")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_t45f5 (t45f5 Ident("d")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_11_t8792 (t8792 Ident("a")) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([88])
# Var inline_mul32_64_mul16_32_11_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([48, 49, 50, 51])
# Var inline_mul32_64_mul16_32_11_tac13 (tac13 Ident("c")) Reg(U32) Some([56, 57, 58, 59])
# Var inline_mul32_64_mul16_32_11_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_11_tace9 (tace9 Ident("b")) Reg(U32) Some([52, 53, 54, 55])
# Var inline_mul32_64_mul16_32_11_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([94]) [0]
# Var inline_mul32_64_mul16_32_11_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([92])
# Var inline_mul32_64_mul16_32_11_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([93])
# Var inline_mul32_64_mul16_32_11_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([60, 61, 62, 63])
# Var inline_mul32_64_mul16_32_11_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_a (Arg0 a Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_b (Arg1 b Number(USIZE)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_t3585 (t3585 Ident("e")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([95])
# Var inline_mul32_64_mul16_32_8_t8792 (t8792 Ident("a")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([89])
# Var inline_mul32_64_mul16_32_8_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_8_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_8_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_8_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_mul32_64_mul16_32_8_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_8_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([95])
# Var inline_mul32_64_mul16_32_8_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_8_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var inline_mul32_64_mul16_32_9_a (Arg0 a Number(USIZE)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_b (Arg1 b Number(USIZE)) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_c (Local c Number(USIZE) Reg(U32)) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_d (Local d Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_e (Local e Number(USIZE) Reg(U32)) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_f (Local f Number(USIZE) Reg(U32)) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_t2d6f (t2d6f Index("d", Number(U8, 2))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_t3585 (t3585 Ident("e")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_t45f5 (t45f5 Ident("d")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_t5d8 (t5d8 Index("f", Number(U8, 1))) Reg(U8) Some([95])
# Var inline_mul32_64_mul16_32_9_t8792 (t8792 Ident("a")) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_t8b9 (t8b9 Index("b", Number(U8, 1))) Reg(U8) Some([89])
# Var inline_mul32_64_mul16_32_9_ta65d (ta65d Arithmetic(Add, Ident("c"), Ident("d"))) Reg(U32) Some([68, 69, 70, 71])
# Var inline_mul32_64_mul16_32_9_tac13 (tac13 Ident("c")) Reg(U32) Some([76, 77, 78, 79])
# Var inline_mul32_64_mul16_32_9_tac23 (tac23 Index("d", Number(U8, 0))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_tace9 (tace9 Ident("b")) Reg(U32) Some([72, 73, 74, 75])
# Var inline_mul32_64_mul16_32_9_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([96]) [0]
# Var inline_mul32_64_mul16_32_9_tbd6 (tbd6 Index("d", Number(U8, 1))) Reg(U8) Some([94])
# Var inline_mul32_64_mul16_32_9_tcbd4 (tcbd4 Ident("f")) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_te25f (te25f Index("f", Number(U8, 0))) Reg(U8) Some([95])
# Var inline_mul32_64_mul16_32_9_te8d8 (te8d8 Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) Reg(U32) Some([80, 81, 82, 83])
# Var inline_mul32_64_mul16_32_9_tff1a (tff1a Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }) Reg(U32) Some([84, 85, 86, 87])
# Var t1335 (t1335 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }) Reg(U32) Some([100, 101, 102, 103])
# Var t3308 (t3308 Ident("temp_lo")) Reg(U32) Some([52, 53, 54, 55])
# Var t3f2a (t3f2a Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }) Reg(U32) Some([52, 53, 54, 55])
# Var t41f5 (t41f5 Ident("temp_hi")) Reg(U32) Some([56, 57, 58, 59])
# Var t4a94 (t4a94 Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))) Reg(U32) Some([52, 53, 54, 55])
# Var t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([92])
# Var t5a04 (t5a04 Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })) Reg(U32) Some([68, 69, 70, 71])
# Var t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([92])
# Var t5cca (t5cca Ident("b_hi")) Reg(U32) Some([60, 61, 62, 63])
# Var t720d (t720d Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })) Reg(U32) Some([68, 69, 70, 71])
# Var t811a (t811a Index("b", Number(U8, 2))) Reg(U8) Some([90])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([48, 49, 50, 51])
# Var t8fbd (t8fbd Ident("a_hi")) Reg(U32) Some([52, 53, 54, 55])
# Var t9829 (t9829 Index("b", Number(U8, 3))) Reg(U8) Some([90])
# Var tac13 (tac13 Ident("c")) Reg(U32) Some([64, 65, 66, 67])
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([56, 57, 58, 59])
# Var tb6b4 (tb6b4 Index("temp", Number(U8, 3))) Reg(U8) Some([88])
# Var tc89e (tc89e Index("temp", Number(U8, 0))) Reg(U8) Some([88])
# Var tdc08 (tdc08 Index("temp", Number(U8, 1))) Reg(U8) Some([88])
# Var te546 (te546 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }) Reg(U32) Some([104, 105, 106, 107])
# Var te825 (te825 Ident("__frame_pointer")) Reg(U32) Some([104, 105, 106, 107])
# Var temp (Local temp Number(USIZE) Reg(U32)) Reg(U32) Some([52, 53, 54, 55])
# Var temp_hi (Local temp_hi Number(USIZE) Reg(U32)) Reg(U32) Some([100, 101, 102, 103])
# Var temp_lo (Local temp_lo Number(USIZE) Reg(U32)) Reg(U32) Some([108, 109, 110, 111])
# Var tf338 (tf338 Index("temp", Number(U8, 2))) Reg(U8) Some([88])
# Var tf4b2 (tf4b2 AddressOf(Ident("temp64"))) Reg(U32) Some([56, 57, 58, 59])
# 82698 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       reserve 8 bytes of stack space for locals
32 0c f8 ff ff ff 

# 8269e Copy32 [Register(0x00), Register(0x30)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [48, 49, 50, 51].
21 00 30 

# 826a1 Copy32 [Register(0x04), Register(0x38)]
#       Save function parameter 'b' registers [4, 5, 6, 7] to locals [56, 57, 58, 59].
21 04 38 

# 826a4 Copy32 [Register(0x08), Register(0x40)]
#       Save function parameter 'c' registers [8, 9, 10, 11] to locals [64, 65, 66, 67].
21 08 40 

# __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
# 826a7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffff8=4294967288)]
#       __frame_pointer <- __frame_pointer Add Number(0xfffffff8u32) None
32 0c f8 ff ff ff 

# a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
# Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 826ad LoadImm32 [Register(0x34), Constant32(0x00000000=0)]
#       a_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(58,5))
#       Assign { target: Ident("a_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 34 00 00 00 00 

# t5b7c <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# Index("a", Number(U8, 3))
# 826b3 Copy8 [Register(0x33), Register(0x5c)]
#       t5b7c <- a[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
#       Index("a", Number(U8, 3))
0b 33 5c 

# a_hi[0x01..0x02] <- t5b7c U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
# Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
# 826b6 Copy8 [Register(0x5c), Register(0x35)]
#       a_hi[0x01..0x02] <- t5b7c U8 Some('/lutcomp/programs/lib/mul.j':(59,5))
#       Assign { target: Index("a_hi", Number(U8, 1)), var_type: None, value: Index("a", Number(U8, 3)) }
0b 5c 35 

# t577f <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# Index("a", Number(U8, 2))
# 826b9 Copy8 [Register(0x32), Register(0x5c)]
#       t577f <- a[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
#       Index("a", Number(U8, 2))
0b 32 5c 

# a_hi[0x00..0x01] <- t577f U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
# Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
# 826bc Copy8 [Register(0x5c), Register(0x34)]
#       a_hi[0x00..0x01] <- t577f U8 Some('/lutcomp/programs/lib/mul.j':(60,5))
#       Assign { target: Index("a_hi", Number(U8, 0)), var_type: None, value: Index("a", Number(U8, 2)) }
0b 5c 34 

# b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
# Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 826bf LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       b_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(62,5))
#       Assign { target: Ident("b_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 3c 00 00 00 00 

# t9829 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# Index("b", Number(U8, 3))
# 826c5 Copy8 [Register(0x3b), Register(0x5a)]
#       t9829 <- b[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
#       Index("b", Number(U8, 3))
0b 3b 5a 

# b_hi[0x01..0x02] <- t9829 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
# Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
# 826c8 Copy8 [Register(0x5a), Register(0x3d)]
#       b_hi[0x01..0x02] <- t9829 U8 Some('/lutcomp/programs/lib/mul.j':(63,5))
#       Assign { target: Index("b_hi", Number(U8, 1)), var_type: None, value: Index("b", Number(U8, 3)) }
0b 5a 3d 

# t811a <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# Index("b", Number(U8, 2))
# 826cb Copy8 [Register(0x3a), Register(0x5a)]
#       t811a <- b[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
#       Index("b", Number(U8, 2))
0b 3a 5a 

# b_hi[0x00..0x01] <- t811a U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
# Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
# 826ce Copy8 [Register(0x5a), Register(0x3c)]
#       b_hi[0x00..0x01] <- t811a U8 Some('/lutcomp/programs/lib/mul.j':(64,5))
#       Assign { target: Index("b_hi", Number(U8, 0)), var_type: None, value: Index("b", Number(U8, 2)) }
0b 5a 3c 

# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(66,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 826d1 Copy32 [Register(0x30), Register(0x44)]
#       inline_mul32_64_mul16_32_8_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 30 44 

# inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
# 826d4 Copy32 [Register(0x38), Register(0x48)]
#       inline_mul32_64_mul16_32_8_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] })
21 38 48 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 826d7 Mul8_16 [Register(0x44), Register(0x48), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 44 48 4c 

# 826db LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 826de LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 826e1 Copy8 [Register(0x45), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 45 5e 

# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 826e4 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 826ea Copy8 [Register(0x5e), Register(0x54)]
#       inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 5e 54 

# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 826ed Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 49 59 

# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 826f0 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 826f6 Copy8 [Register(0x59), Register(0x50)]
#       inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 59 50 

# inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 826f9 Mul8_16 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 54 50 50 

# 826fd LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 82700 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_f <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 82703 Copy8 [Register(0x51), Register(0x5f)]
#       inline_mul32_64_mul16_32_8_t5d8 <- inline_mul32_64_mul16_32_8_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 51 5f 

# inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 82706 Copy8 [Register(0x5f), Register(0x53)]
#       inline_mul32_64_mul16_32_8_f[0x03..0x04] <- inline_mul32_64_mul16_32_8_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 5f 53 

# inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 82709 Copy8 [Register(0x50), Register(0x5f)]
#       inline_mul32_64_mul16_32_8_te25f <- inline_mul32_64_mul16_32_8_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 50 5f 

# inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 8270c Copy8 [Register(0x5f), Register(0x52)]
#       inline_mul32_64_mul16_32_8_f[0x02..0x03] <- inline_mul32_64_mul16_32_8_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 5f 52 

# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8270f LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 82712 Copy8 [Register(0x60), Register(0x51)]
#       inline_mul32_64_mul16_32_8_f[0x01..0x02] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 60 51 

# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82715 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 82718 Copy8 [Register(0x60), Register(0x50)]
#       inline_mul32_64_mul16_32_8_f[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 60 50 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tcbd4 <- inline_mul32_64_mul16_32_8_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 8271b ClearCarry []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 8271c AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 

# 82720 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_c <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t8792 <- inline_mul32_64_mul16_32_8_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 82721 Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_8_t8b9 <- inline_mul32_64_mul16_32_8_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 49 59 

# inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 82724 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 8272a Copy8 [Register(0x59), Register(0x50)]
#       inline_mul32_64_mul16_32_8_te8d8 U32 <- inline_mul32_64_mul16_32_8_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 59 50 

# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 8272d Mul8_16 [Register(0x44), Register(0x50), Register(0x50)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 44 50 50 

# 82731 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 82734 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t8792 Multiply Var(inline_mul32_64_mul16_32_8_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 82737 Copy8 [Register(0x45), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t1539 <- inline_mul32_64_mul16_32_8_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 45 5e 

# inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 8273a LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 82740 Copy8 [Register(0x5e), Register(0x54)]
#       inline_mul32_64_mul16_32_8_tff1a U32 <- inline_mul32_64_mul16_32_8_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 5e 54 

# inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tace9 <- inline_mul32_64_mul16_32_8_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 82743 Mul8_16 [Register(0x54), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 54 48 44 

# 82747 LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 46 00 

# 8274a LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_e <- inline_mul32_64_mul16_32_8_tff1a Multiply Var(inline_mul32_64_mul16_32_8_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 47 00 

# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 8274d Copy32 [Register(0x50), Register(0x48)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 48 

# inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_t3585 <- inline_mul32_64_mul16_32_8_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82750 ClearCarry []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 82751 AddCarry32_1 [Register(0x48), Register(0x44), Register(0x50)]
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 44 50 

# 82755 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_d <- inline_mul32_64_mul16_32_8_t45f5 Add Var(inline_mul32_64_mul16_32_8_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 82756 Copy8 [Register(0x52), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_t2d6f <- inline_mul32_64_mul16_32_8_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 52 5e 

# inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 82759 Copy8 [Register(0x5e), Register(0x53)]
#       inline_mul32_64_mul16_32_8_d[0x03..0x04] <- inline_mul32_64_mul16_32_8_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 5e 53 

# inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 8275c Copy8 [Register(0x51), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_tbd6 <- inline_mul32_64_mul16_32_8_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 51 5e 

# inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 8275f Copy8 [Register(0x5e), Register(0x52)]
#       inline_mul32_64_mul16_32_8_d[0x02..0x03] <- inline_mul32_64_mul16_32_8_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 5e 52 

# inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 82762 Copy8 [Register(0x50), Register(0x5e)]
#       inline_mul32_64_mul16_32_8_tac23 <- inline_mul32_64_mul16_32_8_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 50 5e 

# inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 82765 Copy8 [Register(0x5e), Register(0x51)]
#       inline_mul32_64_mul16_32_8_d[0x01..0x02] <- inline_mul32_64_mul16_32_8_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 5e 51 

# inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82768 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_8_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 8276b Copy8 [Register(0x60), Register(0x50)]
#       inline_mul32_64_mul16_32_8_d[0x00..0x01] <- inline_mul32_64_mul16_32_8_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 60 50 

# inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_8_tac13 <- inline_mul32_64_mul16_32_8_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 8276e Copy32 [Register(0x50), Register(0x48)]
#       inline_mul32_64_mul16_32_8_t45f5 <- inline_mul32_64_mul16_32_8_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 48 

# inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 82771 ClearCarry []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82772 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 48 44 

# 82776 AddCarry32_2 []
#       inline_mul32_64_mul16_32_8_ta65d <- inline_mul32_64_mul16_32_8_tac13 Add Var(inline_mul32_64_mul16_32_8_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t720d <- inline_mul32_64_mul16_32_8_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_8_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_8_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_8_function_end_mul16_32 None
# inline_mul32_64_mul16_32_8_function_end_mul16_32
# mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
# 82777 Store32_1 [Register(0x44), Register(0x40)]
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
23 44 40 

# 8277a Store32_2 []
#       mem[c] <- t720d U32 Some('/lutcomp/programs/lib/mul.j':(66,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b")] }) }
24 

# t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 8277b Copy32 [Register(0x40), Register(0x64)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 40 64 

# 8277e AddImm32IgnoreCarry [Register(0x64), Constant32(0x00000004=4)]
#       t1335 <- c Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 64 04 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(67,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 82784 Copy32 [Register(0x34), Register(0x44)]
#       inline_mul32_64_mul16_32_9_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 34 44 

# inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
# 82787 Copy32 [Register(0x3c), Register(0x48)]
#       inline_mul32_64_mul16_32_9_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] })
21 3c 48 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 8278a Mul8_16 [Register(0x44), Register(0x48), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 44 48 4c 

# 8278e LoadImm8 [Register(0x4e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4e 00 

# 82791 LoadImm8 [Register(0x4f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 4f 00 

# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 82794 Copy8 [Register(0x45), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 45 5e 

# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 82797 LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 8279d Copy8 [Register(0x5e), Register(0x54)]
#       inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 5e 54 

# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 827a0 Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 49 59 

# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 827a3 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 827a9 Copy8 [Register(0x59), Register(0x50)]
#       inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 59 50 

# inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 827ac Mul8_16 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 54 50 50 

# 827b0 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 827b3 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_f <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 827b6 Copy8 [Register(0x51), Register(0x5f)]
#       inline_mul32_64_mul16_32_9_t5d8 <- inline_mul32_64_mul16_32_9_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 51 5f 

# inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 827b9 Copy8 [Register(0x5f), Register(0x53)]
#       inline_mul32_64_mul16_32_9_f[0x03..0x04] <- inline_mul32_64_mul16_32_9_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 5f 53 

# inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 827bc Copy8 [Register(0x50), Register(0x5f)]
#       inline_mul32_64_mul16_32_9_te25f <- inline_mul32_64_mul16_32_9_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 50 5f 

# inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 827bf Copy8 [Register(0x5f), Register(0x52)]
#       inline_mul32_64_mul16_32_9_f[0x02..0x03] <- inline_mul32_64_mul16_32_9_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 5f 52 

# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 827c2 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 827c5 Copy8 [Register(0x60), Register(0x51)]
#       inline_mul32_64_mul16_32_9_f[0x01..0x02] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 60 51 

# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 827c8 LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 827cb Copy8 [Register(0x60), Register(0x50)]
#       inline_mul32_64_mul16_32_9_f[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 60 50 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tcbd4 <- inline_mul32_64_mul16_32_9_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x50), Register(0x50)], resolved: None }
# inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 827ce ClearCarry []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 827cf AddCarry32_1 [Register(0x4c), Register(0x50), Register(0x4c)]
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 4c 50 4c 

# 827d3 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_c <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t8792 <- inline_mul32_64_mul16_32_9_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 827d4 Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_9_t8b9 <- inline_mul32_64_mul16_32_9_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 49 59 

# inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 827d7 LoadImm32 [Register(0x50), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 50 00 00 00 00 

# 827dd Copy8 [Register(0x59), Register(0x50)]
#       inline_mul32_64_mul16_32_9_te8d8 U32 <- inline_mul32_64_mul16_32_9_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 59 50 

# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 827e0 Mul8_16 [Register(0x44), Register(0x50), Register(0x50)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 44 50 50 

# 827e4 LoadImm8 [Register(0x52), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 52 00 

# 827e7 LoadImm8 [Register(0x53), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t8792 Multiply Var(inline_mul32_64_mul16_32_9_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 53 00 

# inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 827ea Copy8 [Register(0x45), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t1539 <- inline_mul32_64_mul16_32_9_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 45 5e 

# inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 827ed LoadImm32 [Register(0x54), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 54 00 00 00 00 

# 827f3 Copy8 [Register(0x5e), Register(0x54)]
#       inline_mul32_64_mul16_32_9_tff1a U32 <- inline_mul32_64_mul16_32_9_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 5e 54 

# inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tace9 <- inline_mul32_64_mul16_32_9_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 827f6 Mul8_16 [Register(0x54), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 54 48 44 

# 827fa LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 46 00 

# 827fd LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_e <- inline_mul32_64_mul16_32_9_tff1a Multiply Var(inline_mul32_64_mul16_32_9_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 47 00 

# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 82800 Copy32 [Register(0x50), Register(0x48)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 50 48 

# inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_t3585 <- inline_mul32_64_mul16_32_9_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82803 ClearCarry []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 82804 AddCarry32_1 [Register(0x48), Register(0x44), Register(0x50)]
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 48 44 50 

# 82808 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_d <- inline_mul32_64_mul16_32_9_t45f5 Add Var(inline_mul32_64_mul16_32_9_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 82809 Copy8 [Register(0x52), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_t2d6f <- inline_mul32_64_mul16_32_9_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 52 5e 

# inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 8280c Copy8 [Register(0x5e), Register(0x53)]
#       inline_mul32_64_mul16_32_9_d[0x03..0x04] <- inline_mul32_64_mul16_32_9_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 5e 53 

# inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 8280f Copy8 [Register(0x51), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_tbd6 <- inline_mul32_64_mul16_32_9_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 51 5e 

# inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 82812 Copy8 [Register(0x5e), Register(0x52)]
#       inline_mul32_64_mul16_32_9_d[0x02..0x03] <- inline_mul32_64_mul16_32_9_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 5e 52 

# inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 82815 Copy8 [Register(0x50), Register(0x5e)]
#       inline_mul32_64_mul16_32_9_tac23 <- inline_mul32_64_mul16_32_9_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 50 5e 

# inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 82818 Copy8 [Register(0x5e), Register(0x51)]
#       inline_mul32_64_mul16_32_9_d[0x01..0x02] <- inline_mul32_64_mul16_32_9_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 5e 51 

# inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 8281b LoadImm8 [Register(0x60), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_9_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 60 00 

# inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 8281e Copy8 [Register(0x60), Register(0x50)]
#       inline_mul32_64_mul16_32_9_d[0x00..0x01] <- inline_mul32_64_mul16_32_9_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 60 50 

# inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_9_tac13 <- inline_mul32_64_mul16_32_9_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x4c), Register(0x4c)], resolved: None }
# inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 82821 Copy32 [Register(0x50), Register(0x48)]
#       inline_mul32_64_mul16_32_9_t45f5 <- inline_mul32_64_mul16_32_9_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 50 48 

# inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 82824 ClearCarry []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82825 AddCarry32_1 [Register(0x4c), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 4c 48 44 

# 82829 AddCarry32_2 []
#       inline_mul32_64_mul16_32_9_ta65d <- inline_mul32_64_mul16_32_9_tac13 Add Var(inline_mul32_64_mul16_32_9_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "t5a04 <- inline_mul32_64_mul16_32_9_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_9_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_9_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_9_function_end_mul16_32 None
# inline_mul32_64_mul16_32_9_function_end_mul16_32
# mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
# 8282a Store32_1 [Register(0x44), Register(0x64)]
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
23 44 64 

# 8282d Store32_2 []
#       mem[t1335] <- t5a04 U32 Some('/lutcomp/programs/lib/mul.j':(67,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b_hi")] }) }
24 

# temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
# Assign { target: Ident("temp_lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 8282e LoadImm32 [Register(0x6c), Constant32(0x00000000=0)]
#       temp_lo <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(71,5))
#       Assign { target: Ident("temp_lo"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 6c 00 00 00 00 

# temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
# Assign { target: Ident("temp_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
# Number(USIZE, 0)
# 82834 LoadImm32 [Register(0x64), Constant32(0x00000000=0)]
#       temp_hi <- 0n0/0x00000000u32  Some('/lutcomp/programs/lib/mul.j':(72,5))
#       Assign { target: Ident("temp_hi"), var_type: Some(Number(USIZE)), value: Number(USIZE, 0) }
#       Number(USIZE, 0)
20 64 00 00 00 00 

# t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("a_hi")
# optimized away noop copy Instruction { source: "t8fbd <- a_hi U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"a_hi\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_a <- t8fbd U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a_hi"), Ident("b")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_b <- tace9 U32 Some('/lutcomp/programs/lib/mul.j':(74,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a_hi\"), Ident(\"b\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 8283a Mul8_16 [Register(0x34), Register(0x38), Register(0x44)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 34 38 44 

# 8283e LoadImm8 [Register(0x46), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 46 00 

# 82841 LoadImm8 [Register(0x47), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 47 00 

# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 82844 Copy8 [Register(0x35), Register(0x58)]
#       inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 35 58 

# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 82847 LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 4c 00 00 00 00 

# 8284d Copy8 [Register(0x58), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 58 4c 

# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 82850 Copy8 [Register(0x39), Register(0x5a)]
#       inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 39 5a 

# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 82853 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 48 00 00 00 00 

# 82859 Copy8 [Register(0x5a), Register(0x48)]
#       inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 5a 48 

# inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 8285c Mul8_16 [Register(0x4c), Register(0x48), Register(0x48)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 4c 48 48 

# 82860 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4a 00 

# 82863 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_f <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4b 00 

# inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 82866 Copy8 [Register(0x49), Register(0x59)]
#       inline_mul32_64_mul16_32_10_t5d8 <- inline_mul32_64_mul16_32_10_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 49 59 

# inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 82869 Copy8 [Register(0x59), Register(0x4b)]
#       inline_mul32_64_mul16_32_10_f[0x03..0x04] <- inline_mul32_64_mul16_32_10_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 59 4b 

# inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 8286c Copy8 [Register(0x48), Register(0x59)]
#       inline_mul32_64_mul16_32_10_te25f <- inline_mul32_64_mul16_32_10_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 48 59 

# inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 8286f Copy8 [Register(0x59), Register(0x4a)]
#       inline_mul32_64_mul16_32_10_f[0x02..0x03] <- inline_mul32_64_mul16_32_10_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 59 4a 

# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82872 LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 5b 00 

# inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 82875 Copy8 [Register(0x5b), Register(0x49)]
#       inline_mul32_64_mul16_32_10_f[0x01..0x02] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 5b 49 

# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82878 LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 5b 00 

# inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 8287b Copy8 [Register(0x5b), Register(0x48)]
#       inline_mul32_64_mul16_32_10_f[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 5b 48 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tcbd4 <- inline_mul32_64_mul16_32_10_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x48), Register(0x48)], resolved: None }
# inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 8287e ClearCarry []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 8287f AddCarry32_1 [Register(0x44), Register(0x48), Register(0x44)]
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 44 48 44 

# 82883 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_c <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t8792 <- inline_mul32_64_mul16_32_10_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 82884 Copy8 [Register(0x39), Register(0x5a)]
#       inline_mul32_64_mul16_32_10_t8b9 <- inline_mul32_64_mul16_32_10_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 39 5a 

# inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 82887 LoadImm32 [Register(0x48), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 48 00 00 00 00 

# 8288d Copy8 [Register(0x5a), Register(0x48)]
#       inline_mul32_64_mul16_32_10_te8d8 U32 <- inline_mul32_64_mul16_32_10_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 5a 48 

# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 82890 Mul8_16 [Register(0x34), Register(0x48), Register(0x48)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 34 48 48 

# 82894 LoadImm8 [Register(0x4a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4a 00 

# 82897 LoadImm8 [Register(0x4b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t8792 Multiply Var(inline_mul32_64_mul16_32_10_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 4b 00 

# inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 8289a Copy8 [Register(0x35), Register(0x58)]
#       inline_mul32_64_mul16_32_10_t1539 <- inline_mul32_64_mul16_32_10_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 35 58 

# inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 8289d LoadImm32 [Register(0x4c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 4c 00 00 00 00 

# 828a3 Copy8 [Register(0x58), Register(0x4c)]
#       inline_mul32_64_mul16_32_10_tff1a U32 <- inline_mul32_64_mul16_32_10_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 58 4c 

# inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tace9 <- inline_mul32_64_mul16_32_10_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 828a6 Mul8_16 [Register(0x4c), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 4c 38 34 

# 828aa LoadImm8 [Register(0x36), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 36 00 

# 828ad LoadImm8 [Register(0x37), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_e <- inline_mul32_64_mul16_32_10_tff1a Multiply Var(inline_mul32_64_mul16_32_10_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 37 00 

# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 828b0 Copy32 [Register(0x48), Register(0x38)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 48 38 

# inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_t3585 <- inline_mul32_64_mul16_32_10_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 828b3 ClearCarry []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 828b4 AddCarry32_1 [Register(0x38), Register(0x34), Register(0x48)]
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 38 34 48 

# 828b8 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_d <- inline_mul32_64_mul16_32_10_t45f5 Add Var(inline_mul32_64_mul16_32_10_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 828b9 Copy8 [Register(0x4a), Register(0x58)]
#       inline_mul32_64_mul16_32_10_t2d6f <- inline_mul32_64_mul16_32_10_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 4a 58 

# inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 828bc Copy8 [Register(0x58), Register(0x4b)]
#       inline_mul32_64_mul16_32_10_d[0x03..0x04] <- inline_mul32_64_mul16_32_10_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 58 4b 

# inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 828bf Copy8 [Register(0x49), Register(0x58)]
#       inline_mul32_64_mul16_32_10_tbd6 <- inline_mul32_64_mul16_32_10_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 49 58 

# inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 828c2 Copy8 [Register(0x58), Register(0x4a)]
#       inline_mul32_64_mul16_32_10_d[0x02..0x03] <- inline_mul32_64_mul16_32_10_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 58 4a 

# inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 828c5 Copy8 [Register(0x48), Register(0x58)]
#       inline_mul32_64_mul16_32_10_tac23 <- inline_mul32_64_mul16_32_10_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 48 58 

# inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 828c8 Copy8 [Register(0x58), Register(0x49)]
#       inline_mul32_64_mul16_32_10_d[0x01..0x02] <- inline_mul32_64_mul16_32_10_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 58 49 

# inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 828cb LoadImm8 [Register(0x5b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_10_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 5b 00 

# inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 828ce Copy8 [Register(0x5b), Register(0x48)]
#       inline_mul32_64_mul16_32_10_d[0x00..0x01] <- inline_mul32_64_mul16_32_10_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 5b 48 

# inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_10_tac13 <- inline_mul32_64_mul16_32_10_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 828d1 Copy32 [Register(0x48), Register(0x38)]
#       inline_mul32_64_mul16_32_10_t45f5 <- inline_mul32_64_mul16_32_10_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 48 38 

# inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 828d4 ClearCarry []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 828d5 AddCarry32_1 [Register(0x44), Register(0x38), Register(0x34)]
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 44 38 34 

# 828d9 AddCarry32_2 []
#       inline_mul32_64_mul16_32_10_ta65d <- inline_mul32_64_mul16_32_10_tac13 Add Var(inline_mul32_64_mul16_32_10_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# optimized away noop copy Instruction { source: "temp <- inline_mul32_64_mul16_32_10_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_10_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_10_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_10_function_end_mul16_32 None
# inline_mul32_64_mul16_32_10_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# Index("temp", Number(U8, 0))
# 828da Copy8 [Register(0x34), Register(0x58)]
#       tc89e <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
#       Index("temp", Number(U8, 0))
0b 34 58 

# temp_lo[0x02..0x03] <- tc89e U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# 828dd Copy8 [Register(0x58), Register(0x6e)]
#       temp_lo[0x02..0x03] <- tc89e U8 Some('/lutcomp/programs/lib/mul.j':(75,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
0b 58 6e 

# tdc08 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# Index("temp", Number(U8, 1))
# 828e0 Copy8 [Register(0x35), Register(0x58)]
#       tdc08 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
#       Index("temp", Number(U8, 1))
0b 35 58 

# temp_lo[0x03..0x04] <- tdc08 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# 828e3 Copy8 [Register(0x58), Register(0x6f)]
#       temp_lo[0x03..0x04] <- tdc08 U8 Some('/lutcomp/programs/lib/mul.j':(76,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
0b 58 6f 

# tf338 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# Index("temp", Number(U8, 2))
# 828e6 Copy8 [Register(0x36), Register(0x58)]
#       tf338 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
#       Index("temp", Number(U8, 2))
0b 36 58 

# temp_hi[0x00..0x01] <- tf338 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# 828e9 Copy8 [Register(0x58), Register(0x64)]
#       temp_hi[0x00..0x01] <- tf338 U8 Some('/lutcomp/programs/lib/mul.j':(77,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
0b 58 64 

# tb6b4 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# Index("temp", Number(U8, 3))
# 828ec Copy8 [Register(0x37), Register(0x58)]
#       tb6b4 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
#       Index("temp", Number(U8, 3))
0b 37 58 

# temp_hi[0x01..0x02] <- tb6b4 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# 828ef Copy8 [Register(0x58), Register(0x65)]
#       temp_hi[0x01..0x02] <- tb6b4 U8 Some('/lutcomp/programs/lib/mul.j':(78,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
0b 58 65 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 828f2 Copy32 [Register(0x0c), Register(0x68)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 68 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 828f5 Copy32 [Register(0x6c), Register(0x34)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 6c 34 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 828f8 Store32_1 [Register(0x34), Register(0x68)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 34 68 

# 828fb Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(80,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 828fc Copy32 [Register(0x0c), Register(0x68)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c 68 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 828ff Copy32 [Register(0x68), Register(0x34)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 68 34 

# 82902 AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 34 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 82908 Copy32 [Register(0x64), Register(0x38)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 64 38 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 8290b Store32_1 [Register(0x38), Register(0x34)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 38 34 

# 8290e Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(81,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 8290f Copy32 [Register(0x0c), Register(0x68)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c 68 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 82912 Copy32 [Register(0x68), Register(0x34)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 68 34 

# 82915 AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 34 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 8291b Copy32 [Register(0x34), Register(0x38)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 34 38 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 8291e Copy32 [Register(0x40), Register(0x34)]
#       inline_mul32_64_add_U64_0_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 40 34 

# inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82921 Copy32 [Register(0x40), Register(0x44)]
#       inline_mul32_64_add_U64_0_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(82,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 40 44 

# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 82924 Load32 [Register(0x34), Register(0x48)]
#       inline_mul32_64_add_U64_0_lo <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 34 48 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 82927 Copy32 [Register(0x44), Register(0x4c)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 44 4c 

# 8292a AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 4c 04 00 00 00 

# inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# 82930 Copy32 [Register(0x34), Register(0x50)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
21 34 50 

# 82933 AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t144a <- inline_mul32_64_add_U64_0_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 82939 Load32 [Register(0x50), Register(0x54)]
#       inline_mul32_64_add_U64_0_te24c <- mem[inline_mul32_64_add_U64_0_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 50 54 

# inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# 8293c Copy32 [Register(0x38), Register(0x50)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
21 38 50 

# 8293f AddImm32IgnoreCarry [Register(0x50), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t809 <- inline_mul32_64_add_U64_0_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
32 50 04 00 00 00 

# inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 82945 Load32 [Register(0x50), Register(0x50)]
#       inline_mul32_64_add_U64_0_t153d <- mem[inline_mul32_64_add_U64_0_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 50 50 

# inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 82948 ClearCarry []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 82949 AddCarry32_1 [Register(0x54), Register(0x50), Register(0x50)]
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 54 50 50 

# 8294d AddCarry32_2 []
#       inline_mul32_64_add_U64_0_t6f1c <- inline_mul32_64_add_U64_0_te24c Add Var(inline_mul32_64_add_U64_0_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 8294e Store32_1 [Register(0x50), Register(0x4c)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 50 4c 

# 82951 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_tbeec <- inline_mul32_64_add_U64_0_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 82952 Load32 [Register(0x34), Register(0x4c)]
#       inline_mul32_64_add_U64_0_td868 <- mem[inline_mul32_64_add_U64_0_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 34 4c 

# inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 82955 Load32 [Register(0x38), Register(0x34)]
#       inline_mul32_64_add_U64_0_td5bf <- mem[inline_mul32_64_add_U64_0_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 38 34 

# inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 82958 ClearCarry []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 82959 AddCarry32_1 [Register(0x4c), Register(0x34), Register(0x34)]
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 4c 34 34 

# 8295d AddCarry32_2 []
#       inline_mul32_64_add_U64_0_ta95f <- inline_mul32_64_add_U64_0_td868 Add Var(inline_mul32_64_add_U64_0_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 8295e Store32_1 [Register(0x34), Register(0x44)]
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 34 44 

# 82961 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t8956] <- inline_mul32_64_add_U64_0_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t8956 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 82962 Load32 [Register(0x44), Register(0x38)]
#       inline_mul32_64_add_U64_0_t90ac <- mem[inline_mul32_64_add_U64_0_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 44 38 

# inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 82965 Copy32 [Register(0x48), Register(0x34)]
#       inline_mul32_64_add_U64_0_t1506 <- inline_mul32_64_add_U64_0_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 48 34 

# if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 82968 Cmp8 [Register(0x37), Register(0x3b)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 37 3b 

# 8296b Cmp8IfZero [Register(0x36), Register(0x3a)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 36 3a 

# 8296e Cmp8IfZero [Register(0x35), Register(0x39)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 35 39 

# 82971 Cmp8IfZero [Register(0x34), Register(0x38)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 34 38 

# 82974 JcImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 9b 29 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_0_t90ac < inline_mul32_64_add_U64_0_t1506 then 'inline_mul32_64_add_U64_0_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_0_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_0_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# inline_mul32_64_add_U64_0_add_U64_if_true_0_1
# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 82978 Copy32 [Register(0x44), Register(0x4c)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 44 4c 

# 8297b AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 4c 04 00 00 00 

# inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_0_t2558 <- inline_mul32_64_add_U64_0_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x44), Register(0x44)], resolved: None }
# inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 82981 Copy32 [Register(0x44), Register(0x4c)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 44 4c 

# 82984 AddImm32IgnoreCarry [Register(0x4c), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_0_t1335 <- inline_mul32_64_add_U64_0_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 4c 04 00 00 00 

# inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# 8298a Load32 [Register(0x4c), Register(0x34)]
#       inline_mul32_64_add_U64_0_tf677 <- mem[inline_mul32_64_add_U64_0_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
22 4c 34 

# inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# 8298d AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_0_tcbd1 <- inline_mul32_64_add_U64_0_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
32 34 01 00 00 00 

# mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# 82993 Store32_1 [Register(0x34), Register(0x4c)]
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
23 34 4c 

# 82996 Store32_2 []
#       mem[inline_mul32_64_add_U64_0_t1335] <- inline_mul32_64_add_U64_0_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
24 

# goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 82997 JmpImm [Label24(inline_mul32_64_add_U64_0_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 9b 29 08 

# :inline_mul32_64_add_U64_0_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_0_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_0_add_U64_if_end_0
# goto inline_mul32_64_add_U64_0_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_0_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_0_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_0_function_end_add_U64 None
# inline_mul32_64_add_U64_0_function_end_add_U64
# t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("a")
# optimized away noop copy Instruction { source: "t8792 <- a U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# Ident("b_hi")
# optimized away noop copy Instruction { source: "t5cca <- b_hi U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\nIdent(\"b_hi\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_a <- t8792 U32 Some('/lutcomp/programs/lib/mul.j':(84,5))\nAssign { target: Ident(\"temp\"), var_type: None, value: Call(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] }) }\nCall(Call { function: \"mul16_32\", parameters: [Ident(\"a\"), Ident(\"b_hi\")] })\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
# Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
# Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
# 8299b Copy32 [Register(0x3c), Register(0x34)]
#       inline_mul32_64_mul16_32_11_b <- t5cca U32 Some('/lutcomp/programs/lib/mul.j':(84,5))
#       Assign { target: Ident("temp"), var_type: None, value: Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] }) }
#       Call(Call { function: "mul16_32", parameters: [Ident("a"), Ident("b_hi")] })
21 3c 34 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(10,5))\nAssign { target: Ident(\"c\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Ident(\"b\")) }\nArithmetic(Multiply, Ident(\"a\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
# Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
# Arithmetic(Multiply, Ident("a"), Ident("b"))
# 8299e Mul8_16 [Register(0x30), Register(0x34), Register(0x38)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
11 30 34 38 

# 829a2 LoadImm8 [Register(0x3a), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3a 00 

# 829a5 LoadImm8 [Register(0x3b), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(10,5))
#       Assign { target: Ident("c"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Ident("b")) }
#       Arithmetic(Multiply, Ident("a"), Ident("b"))
04 3b 00 

# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 829a8 Copy8 [Register(0x31), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 31 5c 

# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 829ab LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 44 00 00 00 00 

# 829b1 Copy8 [Register(0x5c), Register(0x44)]
#       inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 5c 44 

# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 829b4 Copy8 [Register(0x35), Register(0x58)]
#       inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 35 58 

# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 829b7 LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 3c 00 00 00 00 

# 829bd Copy8 [Register(0x58), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 58 3c 

# inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
# Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 829c0 Mul8_16 [Register(0x44), Register(0x3c), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 44 3c 3c 

# 829c4 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 3e 00 

# 829c7 LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_f <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(12,5))
#       Assign { target: Ident("f"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 3f 00 

# inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# Index("f", Number(U8, 1))
# 829ca Copy8 [Register(0x3d), Register(0x5d)]
#       inline_mul32_64_mul16_32_11_t5d8 <- inline_mul32_64_mul16_32_11_f[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
#       Index("f", Number(U8, 1))
0b 3d 5d 

# inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
# Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
# 829cd Copy8 [Register(0x5d), Register(0x3f)]
#       inline_mul32_64_mul16_32_11_f[0x03..0x04] <- inline_mul32_64_mul16_32_11_t5d8 U8 Some('/lutcomp/programs/lib/mul.j':(13,5))
#       Assign { target: Index("f", Number(U8, 3)), var_type: None, value: Index("f", Number(U8, 1)) }
0b 5d 3f 

# inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# Index("f", Number(U8, 0))
# 829d0 Copy8 [Register(0x3c), Register(0x5d)]
#       inline_mul32_64_mul16_32_11_te25f <- inline_mul32_64_mul16_32_11_f[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
#       Index("f", Number(U8, 0))
0b 3c 5d 

# inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
# Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
# 829d3 Copy8 [Register(0x5d), Register(0x3e)]
#       inline_mul32_64_mul16_32_11_f[0x02..0x03] <- inline_mul32_64_mul16_32_11_te25f U8 Some('/lutcomp/programs/lib/mul.j':(14,5))
#       Assign { target: Index("f", Number(U8, 2)), var_type: None, value: Index("f", Number(U8, 0)) }
0b 5d 3e 

# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 829d6 LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 5e 00 

# inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
# Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
# 829d9 Copy8 [Register(0x5e), Register(0x3d)]
#       inline_mul32_64_mul16_32_11_f[0x01..0x02] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(15,5))
#       Assign { target: Index("f", Number(U8, 1)), var_type: None, value: Number(U8, 0) }
0b 5e 3d 

# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 829dc LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 5e 00 

# inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
# Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 829df Copy8 [Register(0x5e), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_f[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(16,5))
#       Assign { target: Index("f", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 5e 3c 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# Ident("f")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tcbd4 <- inline_mul32_64_mul16_32_11_f U32 Some('/lutcomp/programs/lib/mul.j':(17,5))\nAssign { target: Ident(\"c\"), var_type: None, value: Arithmetic(Add, Ident(\"c\"), Ident(\"f\")) }\nArithmetic(Add, Ident(\"c\"), Ident(\"f\"))\nIdent(\"f\")\n", opcode: Copy32, args: [Register(0x3c), Register(0x3c)], resolved: None }
# inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
# Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
# Arithmetic(Add, Ident("c"), Ident("f"))
# 829e2 ClearCarry []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
03 

# 829e3 AddCarry32_1 [Register(0x38), Register(0x3c), Register(0x38)]
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
30 38 3c 38 

# 829e7 AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_c <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_tcbd4) Some('/lutcomp/programs/lib/mul.j':(17,5))
#       Assign { target: Ident("c"), var_type: None, value: Arithmetic(Add, Ident("c"), Ident("f")) }
#       Arithmetic(Add, Ident("c"), Ident("f"))
31 

# inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t8792 <- inline_mul32_64_mul16_32_11_a U32 Some('/lutcomp/programs/lib/mul.j':(19,5))\nAssign { target: Ident(\"d\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) }) }\nArithmetic(Multiply, Ident(\"a\"), Cast { old_type: None, new_type: Number(USIZE), value: Index(\"b\", Number(U8, 1)) })\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# Index("b", Number(U8, 1))
# 829e8 Copy8 [Register(0x35), Register(0x58)]
#       inline_mul32_64_mul16_32_11_t8b9 <- inline_mul32_64_mul16_32_11_b[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
#       Index("b", Number(U8, 1))
0b 35 58 

# inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
# 829eb LoadImm32 [Register(0x3c), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
20 3c 00 00 00 00 

# 829f1 Copy8 [Register(0x58), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_te8d8 U32 <- inline_mul32_64_mul16_32_11_t8b9 U8 Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }
0b 58 3c 

# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
# Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
# Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
# 829f4 Mul8_16 [Register(0x30), Register(0x3c), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
11 30 3c 3c 

# 829f8 LoadImm8 [Register(0x3e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 3e 00 

# 829fb LoadImm8 [Register(0x3f), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t8792 Multiply Var(inline_mul32_64_mul16_32_11_te8d8) Some('/lutcomp/programs/lib/mul.j':(19,5))
#       Assign { target: Ident("d"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) }) }
#       Arithmetic(Multiply, Ident("a"), Cast { old_type: None, new_type: Number(USIZE), value: Index("b", Number(U8, 1)) })
04 3f 00 

# inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# Index("a", Number(U8, 1))
# 829fe Copy8 [Register(0x31), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_t1539 <- inline_mul32_64_mul16_32_11_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
#       Index("a", Number(U8, 1))
0b 31 5c 

# inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
# 82a01 LoadImm32 [Register(0x44), Constant32(0x00000000=0)]
#       Zero-pad for inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
20 44 00 00 00 00 

# 82a07 Copy8 [Register(0x5c), Register(0x44)]
#       inline_mul32_64_mul16_32_11_tff1a U32 <- inline_mul32_64_mul16_32_11_t1539 U8 Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
#       Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }
0b 5c 44 

# inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tace9 <- inline_mul32_64_mul16_32_11_b U32 Some('/lutcomp/programs/lib/mul.j':(20,5))\nAssign { target: Ident(\"e\"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\")) }\nArithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index(\"a\", Number(U8, 1)) }, Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x34), Register(0x34)], resolved: None }
# inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
# Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
# Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
# 82a0a Mul8_16 [Register(0x44), Register(0x34), Register(0x30)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
11 44 34 30 

# 82a0e LoadImm8 [Register(0x32), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 32 00 

# 82a11 LoadImm8 [Register(0x33), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_e <- inline_mul32_64_mul16_32_11_tff1a Multiply Var(inline_mul32_64_mul16_32_11_tace9) Some('/lutcomp/programs/lib/mul.j':(20,5))
#       Assign { target: Ident("e"), var_type: Some(Number(USIZE)), value: Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b")) }
#       Arithmetic(Multiply, Cast { old_type: None, new_type: Number(USIZE), value: Index("a", Number(U8, 1)) }, Ident("b"))
04 33 00 

# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("d")
# 82a14 Copy32 [Register(0x3c), Register(0x34)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
#       Ident("d")
21 3c 34 

# inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# Ident("e")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_t3585 <- inline_mul32_64_mul16_32_11_e U32 Some('/lutcomp/programs/lib/mul.j':(21,5))\nAssign { target: Ident(\"d\"), var_type: None, value: Arithmetic(Add, Ident(\"d\"), Ident(\"e\")) }\nArithmetic(Add, Ident(\"d\"), Ident(\"e\"))\nIdent(\"e\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
# Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
# Arithmetic(Add, Ident("d"), Ident("e"))
# 82a17 ClearCarry []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
03 

# 82a18 AddCarry32_1 [Register(0x34), Register(0x30), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
30 34 30 3c 

# 82a1c AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_d <- inline_mul32_64_mul16_32_11_t45f5 Add Var(inline_mul32_64_mul16_32_11_t3585) Some('/lutcomp/programs/lib/mul.j':(21,5))
#       Assign { target: Ident("d"), var_type: None, value: Arithmetic(Add, Ident("d"), Ident("e")) }
#       Arithmetic(Add, Ident("d"), Ident("e"))
31 

# inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# Index("d", Number(U8, 2))
# 82a1d Copy8 [Register(0x3e), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_t2d6f <- inline_mul32_64_mul16_32_11_d[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
#       Index("d", Number(U8, 2))
0b 3e 5c 

# inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
# Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
# 82a20 Copy8 [Register(0x5c), Register(0x3f)]
#       inline_mul32_64_mul16_32_11_d[0x03..0x04] <- inline_mul32_64_mul16_32_11_t2d6f U8 Some('/lutcomp/programs/lib/mul.j':(22,5))
#       Assign { target: Index("d", Number(U8, 3)), var_type: None, value: Index("d", Number(U8, 2)) }
0b 5c 3f 

# inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# Index("d", Number(U8, 1))
# 82a23 Copy8 [Register(0x3d), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_tbd6 <- inline_mul32_64_mul16_32_11_d[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
#       Index("d", Number(U8, 1))
0b 3d 5c 

# inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
# Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
# 82a26 Copy8 [Register(0x5c), Register(0x3e)]
#       inline_mul32_64_mul16_32_11_d[0x02..0x03] <- inline_mul32_64_mul16_32_11_tbd6 U8 Some('/lutcomp/programs/lib/mul.j':(23,5))
#       Assign { target: Index("d", Number(U8, 2)), var_type: None, value: Index("d", Number(U8, 1)) }
0b 5c 3e 

# inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# Index("d", Number(U8, 0))
# 82a29 Copy8 [Register(0x3c), Register(0x5c)]
#       inline_mul32_64_mul16_32_11_tac23 <- inline_mul32_64_mul16_32_11_d[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
#       Index("d", Number(U8, 0))
0b 3c 5c 

# inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
# Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
# 82a2c Copy8 [Register(0x5c), Register(0x3d)]
#       inline_mul32_64_mul16_32_11_d[0x01..0x02] <- inline_mul32_64_mul16_32_11_tac23 U8 Some('/lutcomp/programs/lib/mul.j':(24,5))
#       Assign { target: Index("d", Number(U8, 1)), var_type: None, value: Index("d", Number(U8, 0)) }
0b 5c 3d 

# inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82a2f LoadImm8 [Register(0x5e), Constant8(0x00=0)]
#       inline_mul32_64_mul16_32_11_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 5e 00 

# inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
# Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
# 82a32 Copy8 [Register(0x5e), Register(0x3c)]
#       inline_mul32_64_mul16_32_11_d[0x00..0x01] <- inline_mul32_64_mul16_32_11_tb36e U8 Some('/lutcomp/programs/lib/mul.j':(25,5))
#       Assign { target: Index("d", Number(U8, 0)), var_type: None, value: Number(U8, 0) }
0b 5e 3c 

# inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_mul16_32_11_tac13 <- inline_mul32_64_mul16_32_11_c U32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\nArithmetic(Add, Ident(\"c\"), Ident(\"d\"))\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# Ident("d")
# 82a35 Copy32 [Register(0x3c), Register(0x34)]
#       inline_mul32_64_mul16_32_11_t45f5 <- inline_mul32_64_mul16_32_11_d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
#       Ident("d")
21 3c 34 

# inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Arithmetic(Add, Ident("c"), Ident("d"))
# 82a38 ClearCarry []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
03 

# 82a39 AddCarry32_1 [Register(0x38), Register(0x34), Register(0x30)]
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
30 38 34 30 

# 82a3d AddCarry32_2 []
#       inline_mul32_64_mul16_32_11_ta65d <- inline_mul32_64_mul16_32_11_tac13 Add Var(inline_mul32_64_mul16_32_11_t45f5) Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
#       Arithmetic(Add, Ident("c"), Ident("d"))
31 

# temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# 82a3e Copy32 [Register(0x30), Register(0x34)]
#       temp <- inline_mul32_64_mul16_32_11_ta65d U32 Some('/lutcomp/programs/lib/mul.j':(26,5))
#       Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
21 30 34 

# goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))
# Return { value: Some(Arithmetic(Add, Ident("c"), Ident("d"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_mul16_32_11_function_end_mul16_32 Some('/lutcomp/programs/lib/mul.j':(26,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"c\"), Ident(\"d\"))) }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_mul16_32_11_function_end_mul16_32)], resolved: None }
# :inline_mul32_64_mul16_32_11_function_end_mul16_32 None
# inline_mul32_64_mul16_32_11_function_end_mul16_32
# tc89e <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# Index("temp", Number(U8, 0))
# 82a41 Copy8 [Register(0x34), Register(0x58)]
#       tc89e <- temp[0x00..0x01] U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
#       Index("temp", Number(U8, 0))
0b 34 58 

# temp_lo[0x02..0x03] <- tc89e U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
# Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
# 82a44 Copy8 [Register(0x58), Register(0x6e)]
#       temp_lo[0x02..0x03] <- tc89e U8 Some('/lutcomp/programs/lib/mul.j':(85,5))
#       Assign { target: Index("temp_lo", Number(U8, 2)), var_type: None, value: Index("temp", Number(U8, 0)) }
0b 58 6e 

# tdc08 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# Index("temp", Number(U8, 1))
# 82a47 Copy8 [Register(0x35), Register(0x58)]
#       tdc08 <- temp[0x01..0x02] U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
#       Index("temp", Number(U8, 1))
0b 35 58 

# temp_lo[0x03..0x04] <- tdc08 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
# Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
# 82a4a Copy8 [Register(0x58), Register(0x6f)]
#       temp_lo[0x03..0x04] <- tdc08 U8 Some('/lutcomp/programs/lib/mul.j':(86,5))
#       Assign { target: Index("temp_lo", Number(U8, 3)), var_type: None, value: Index("temp", Number(U8, 1)) }
0b 58 6f 

# tf338 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# Index("temp", Number(U8, 2))
# 82a4d Copy8 [Register(0x36), Register(0x58)]
#       tf338 <- temp[0x02..0x03] U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
#       Index("temp", Number(U8, 2))
0b 36 58 

# temp_hi[0x00..0x01] <- tf338 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
# Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
# 82a50 Copy8 [Register(0x58), Register(0x64)]
#       temp_hi[0x00..0x01] <- tf338 U8 Some('/lutcomp/programs/lib/mul.j':(87,5))
#       Assign { target: Index("temp_hi", Number(U8, 0)), var_type: None, value: Index("temp", Number(U8, 2)) }
0b 58 64 

# tb6b4 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# Index("temp", Number(U8, 3))
# 82a53 Copy8 [Register(0x37), Register(0x58)]
#       tb6b4 <- temp[0x03..0x04] U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
#       Index("temp", Number(U8, 3))
0b 37 58 

# temp_hi[0x01..0x02] <- tb6b4 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
# Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
# 82a56 Copy8 [Register(0x58), Register(0x65)]
#       temp_hi[0x01..0x02] <- tb6b4 U8 Some('/lutcomp/programs/lib/mul.j':(88,5))
#       Assign { target: Index("temp_hi", Number(U8, 1)), var_type: None, value: Index("temp", Number(U8, 3)) }
0b 58 65 

# te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
# Ident("__frame_pointer")
# 82a59 Copy32 [Register(0x0c), Register(0x68)]
#       te546 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Ident("__frame_pointer") }
#       Ident("__frame_pointer")
21 0c 68 

# t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# Ident("temp_lo")
# 82a5c Copy32 [Register(0x6c), Register(0x34)]
#       t3308 <- temp_lo U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
#       Ident("temp_lo")
21 6c 34 

# mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
# Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
# 82a5f Store32_1 [Register(0x34), Register(0x68)]
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
23 34 68 

# 82a62 Store32_2 []
#       mem[te546] <- t3308 U32 Some('/lutcomp/programs/lib/mul.j':(90,5))
#       Assign { target: LocalFieldDeref("temp64", "lo"), var_type: None, value: Ident("temp_lo") }
24 

# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# Ident("__frame_pointer")
# 82a63 Copy32 [Register(0x0c), Register(0x68)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
#       Ident("__frame_pointer")
21 0c 68 

# t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
# 82a66 Copy32 [Register(0x68), Register(0x34)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
21 68 34 

# 82a69 AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000004=4)]
#       t3f2a <- te825 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4)) }
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 4))
32 34 04 00 00 00 

# t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# Ident("temp_hi")
# 82a6f Copy32 [Register(0x64), Register(0x38)]
#       t41f5 <- temp_hi U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
#       Ident("temp_hi")
21 64 38 

# mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
# Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
# 82a72 Store32_1 [Register(0x38), Register(0x34)]
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
23 38 34 

# 82a75 Store32_2 []
#       mem[t3f2a] <- t41f5 U32 Some('/lutcomp/programs/lib/mul.j':(91,5))
#       Assign { target: LocalFieldDeref("temp64", "hi"), var_type: None, value: Ident("temp_hi") }
24 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# Ident("__frame_pointer")
# 82a76 Copy32 [Register(0x0c), Register(0x68)]
#       te825 <- __frame_pointer U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
#       Ident("__frame_pointer")
21 0c 68 

# t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
# 82a79 Copy32 [Register(0x68), Register(0x34)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
21 68 34 

# 82a7c AddImm32IgnoreCarry [Register(0x34), Constant32(0x00000000=0)]
#       t4a94 <- te825 Add Number(0n0/0x00000000u32) Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
#       Arithmetic(Add, Ident("__frame_pointer"), Number(USIZE, 0))
32 34 00 00 00 00 

# tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# AddressOf(Ident("temp64"))
# 82a82 Copy32 [Register(0x34), Register(0x38)]
#       tf4b2 <- t4a94 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
#       AddressOf(Ident("temp64"))
21 34 38 

# tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "tac13 <- c U32 Some('/lutcomp/programs/lib/mul.j':(92,5))\nVoidExpression { expression: Call(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] }) }\nCall(Call { function: \"add_U64\", parameters: [Ident(\"c\"), AddressOf(Ident(\"temp64\")), Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x40), Register(0x40)], resolved: None }
# inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82a85 Copy32 [Register(0x40), Register(0x30)]
#       inline_mul32_64_add_U64_1_a <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 40 30 

# inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82a88 Copy32 [Register(0x38), Register(0x34)]
#       inline_mul32_64_add_U64_1_b <- tf4b2 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 38 34 

# inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
# VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
# Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
# 82a8b Copy32 [Register(0x40), Register(0x38)]
#       inline_mul32_64_add_U64_1_c <- tac13 U32 Some('/lutcomp/programs/lib/mul.j':(92,5))
#       VoidExpression { expression: Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] }) }
#       Call(Call { function: "add_U64", parameters: [Ident("c"), AddressOf(Ident("temp64")), Ident("c")] })
21 40 38 

# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(7,5))\nAssign { target: Ident(\"lo\"), var_type: Some(Number(USIZE)), value: PtrFieldDeref(\"a\", \"lo\") }\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
# Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
# PtrFieldDeref("a", "lo")
# 82a8e Load32 [Register(0x30), Register(0x3c)]
#       inline_mul32_64_add_U64_1_lo <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(7,5))
#       Assign { target: Ident("lo"), var_type: Some(Number(USIZE)), value: PtrFieldDeref("a", "lo") }
#       PtrFieldDeref("a", "lo")
22 30 3c 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"hi\"), PtrFieldDeref(\"b\", \"hi\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 82a91 Copy32 [Register(0x38), Register(0x40)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 38 40 

# 82a94 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 40 04 00 00 00 

# inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
# 82a9a Copy32 [Register(0x30), Register(0x44)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
21 30 44 

# 82a9d AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t144a <- inline_mul32_64_add_U64_1_a Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }, Number(USIZE, 4))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("a", "hi")
# 82aa3 Load32 [Register(0x44), Register(0x48)]
#       inline_mul32_64_add_U64_1_te24c <- mem[inline_mul32_64_add_U64_1_t144a] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("a", "hi")
22 44 48 

# inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
# 82aa6 Copy32 [Register(0x34), Register(0x44)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
21 34 44 

# 82aa9 AddImm32IgnoreCarry [Register(0x44), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t809 <- inline_mul32_64_add_U64_1_b Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("b") }, Number(USIZE, 4))
32 44 04 00 00 00 

# inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# PtrFieldDeref("b", "hi")
# 82aaf Load32 [Register(0x44), Register(0x44)]
#       inline_mul32_64_add_U64_1_t153d <- mem[inline_mul32_64_add_U64_1_t809] U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
#       PtrFieldDeref("b", "hi")
22 44 44 

# inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
# 82ab2 ClearCarry []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
03 

# 82ab3 AddCarry32_1 [Register(0x48), Register(0x44), Register(0x44)]
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
30 48 44 44 

# 82ab7 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_t6f1c <- inline_mul32_64_add_U64_1_te24c Add Var(inline_mul32_64_add_U64_1_t153d) Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
#       Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi"))
31 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
# 82ab8 Store32_1 [Register(0x44), Register(0x40)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
23 44 40 

# 82abb Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_t6f1c U32 Some('/lutcomp/programs/lib/U64.j':(8,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "hi"), PtrFieldDeref("b", "hi")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("a") }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_tbeec <- inline_mul32_64_add_U64_1_a U32 Some('/lutcomp/programs/lib/U64.j':(9,5))\nAssign { target: PtrFieldDeref(\"c\", \"lo\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\")) }\nArithmetic(Add, PtrFieldDeref(\"a\", \"lo\"), PtrFieldDeref(\"b\", \"lo\"))\nPtrFieldDeref(\"a\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"a\") }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x30), Register(0x30)], resolved: None }
# inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("a", "lo")
# 82abc Load32 [Register(0x30), Register(0x40)]
#       inline_mul32_64_add_U64_1_td868 <- mem[inline_mul32_64_add_U64_1_tbeec] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("a", "lo")
22 30 40 

# inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# PtrFieldDeref("b", "lo")
# 82abf Load32 [Register(0x34), Register(0x30)]
#       inline_mul32_64_add_U64_1_td5bf <- mem[inline_mul32_64_add_U64_1_b] U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
#       PtrFieldDeref("b", "lo")
22 34 30 

# inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
# 82ac2 ClearCarry []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
03 

# 82ac3 AddCarry32_1 [Register(0x40), Register(0x30), Register(0x30)]
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
30 40 30 30 

# 82ac7 AddCarry32_2 []
#       inline_mul32_64_add_U64_1_ta95f <- inline_mul32_64_add_U64_1_td868 Add Var(inline_mul32_64_add_U64_1_td5bf) Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
#       Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo"))
31 

# mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
# Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
# 82ac8 Store32_1 [Register(0x30), Register(0x38)]
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
23 30 38 

# 82acb Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t8956] <- inline_mul32_64_add_U64_1_ta95f U32 Some('/lutcomp/programs/lib/U64.j':(9,5))
#       Assign { target: PtrFieldDeref("c", "lo"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("a", "lo"), PtrFieldDeref("b", "lo")) }
24 

# inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") } }
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t8956 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\nPtrFieldDeref(\"c\", \"lo\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") } }\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# PtrFieldDeref("c", "lo")
# 82acc Load32 [Register(0x38), Register(0x34)]
#       inline_mul32_64_add_U64_1_t90ac <- mem[inline_mul32_64_add_U64_1_t8956] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       PtrFieldDeref("c", "lo")
22 38 34 

# inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# Ident("lo")
# 82acf Copy32 [Register(0x3c), Register(0x30)]
#       inline_mul32_64_add_U64_1_t1506 <- inline_mul32_64_add_U64_1_lo U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
#       Ident("lo")
21 3c 30 

# if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
# 82ad2 Cmp8 [Register(0x33), Register(0x37)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
15 33 37 

# 82ad5 Cmp8IfZero [Register(0x32), Register(0x36)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 32 36 

# 82ad8 Cmp8IfZero [Register(0x31), Register(0x35)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 31 35 

# 82adb Cmp8IfZero [Register(0x30), Register(0x34)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
16 30 34 

# 82ade JcImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_else_0_2)]
#       if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
#       Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }
71 05 2b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_mul32_64_add_U64_1_t90ac < inline_mul32_64_add_U64_1_t1506 then 'inline_mul32_64_add_U64_1_add_U64_if_true_0_1' else 'inline_mul32_64_add_U64_1_add_U64_if_else_0_2' Some('/lutcomp/programs/lib/U64.j':(10,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }, [Assign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }])], else_block: [] }\nComparison { op: LessThan, left: PtrFieldDeref(\"c\", \"lo\"), right: Ident(\"lo\") }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_add_U64_if_true_0_1)], resolved: None }
# :inline_mul32_64_add_U64_1_add_U64_if_true_0_1 Some('/lutcomp/programs/lib/U64.j':(10,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: PtrFieldDeref("c", "lo"), right: Ident("lo") }, [Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }])], else_block: [] }
# inline_mul32_64_add_U64_1_add_U64_if_true_0_1
# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 82ae2 Copy32 [Register(0x38), Register(0x40)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 38 40 

# 82ae5 AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 40 04 00 00 00 

# inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }
# Ident("c")
# optimized away noop copy Instruction { source: "inline_mul32_64_add_U64_1_t2558 <- inline_mul32_64_add_U64_1_c U32 Some('/lutcomp/programs/lib/U64.j':(10,5))\nAssign { target: PtrFieldDeref(\"c\", \"hi\"), var_type: None, value: Arithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1)) }\nArithmetic(Add, PtrFieldDeref(\"c\", \"hi\"), Number(USIZE, 1))\nPtrFieldDeref(\"c\", \"hi\")\nCast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4)) }\nArithmetic(Add, Cast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }, Number(USIZE, 4))\nCast { old_type: Some(Ptr(Struct(\"U64\"))), new_type: Number(USIZE), value: Ident(\"c\") }\nIdent(\"c\")\n", opcode: Copy32, args: [Register(0x38), Register(0x38)], resolved: None }
# inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
# 82aeb Copy32 [Register(0x38), Register(0x40)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
21 38 40 

# 82aee AddImm32IgnoreCarry [Register(0x40), Constant32(0x00000004=4)]
#       inline_mul32_64_add_U64_1_t1335 <- inline_mul32_64_add_U64_1_t2558 Add Number(0n4/0x00000004u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("U64"))), new_type: Number(USIZE), value: Ident("c") }, Number(USIZE, 4))
32 40 04 00 00 00 

# inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# PtrFieldDeref("c", "hi")
# 82af4 Load32 [Register(0x40), Register(0x30)]
#       inline_mul32_64_add_U64_1_tf677 <- mem[inline_mul32_64_add_U64_1_t1335] U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
#       PtrFieldDeref("c", "hi")
22 40 30 

# inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
# 82af7 AddImm32IgnoreCarry [Register(0x30), Constant32(0x00000001=1)]
#       inline_mul32_64_add_U64_1_tcbd1 <- inline_mul32_64_add_U64_1_tf677 Add Number(0n1/0x00000001u32) Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
#       Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1))
32 30 01 00 00 00 

# mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
# Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
# 82afd Store32_1 [Register(0x30), Register(0x40)]
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
23 30 40 

# 82b00 Store32_2 []
#       mem[inline_mul32_64_add_U64_1_t1335] <- inline_mul32_64_add_U64_1_tcbd1 U32 Some('/lutcomp/programs/lib/U64.j':(10,5))
#       Assign { target: PtrFieldDeref("c", "hi"), var_type: None, value: Arithmetic(Add, PtrFieldDeref("c", "hi"), Number(USIZE, 1)) }
24 

# goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# 82b01 JmpImm [Label24(inline_mul32_64_add_U64_1_add_U64_if_end_0)]
#       goto inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
70 05 2b 08 

# :inline_mul32_64_add_U64_1_add_U64_if_else_0_2 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_else_0_2
# :inline_mul32_64_add_U64_1_add_U64_if_end_0 Some('/lutcomp/programs/lib/U64.j':(10,5))
# inline_mul32_64_add_U64_1_add_U64_if_end_0
# goto inline_mul32_64_add_U64_1_function_end_add_U64 None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_mul32_64_add_U64_1_function_end_add_U64 None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_mul32_64_add_U64_1_function_end_add_U64)], resolved: None }
# :inline_mul32_64_add_U64_1_function_end_add_U64 None
# inline_mul32_64_add_U64_1_function_end_add_U64
# __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
# Return { value: None }
# 82b05 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       __frame_pointer <- __frame_pointer Add Number(0n8/0x00000008u32) None
#       Return { value: None }
32 0c 08 00 00 00 

# return None None
# Return { value: None }
# 82b0b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000008=8)]
#       Dealloc 8 bytes from stack
32 0c 08 00 00 00 

# 82b11 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_mul32_64 None
# function_end_mul32_64
# Unreachable None
# 82b13 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec32
# Ret None
# Arg0=a
# Var a (Arg0 a Number(USIZE)) Reg(U32) Some([112, 113, 114, 115])
# Var b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_a (Arg0 a Number(USIZE)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a (Arg0 a Number(USIZE)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 (t1539 Index("a", Number(U8, 1))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 (t1c22 Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 (t2574 Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 (t3f28 Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e (t3f9e Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f (t577f Index("a", Number(U8, 2))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c (t5b7c Index("a", Number(U8, 3))) Reg(U8) Some([120])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed (t5eed Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 (t6274 Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 (t8119 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 (t8772 Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 (t8792 Ident("a")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 (t8e91 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 (t9450 Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) Reg(U8) Some([122])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 (t96e8 Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 (ta620 Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([122])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 (te046 Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 (tea96 Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))) Reg(U8) Some([121])
# Var inline_print_dec32_div32_by10_47_t1c61 (t1c61 AddressOf(Ident("prod"))) Reg(U32) Some([124, 125, 126, 127]) [108, 17, 15, 0]
# Var inline_print_dec32_div32_by10_47_t45ae (t45ae Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_tb354 (tb354 LocalFieldDeref("prod", "hi")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_div32_by10_47_tbbe3 (tbbe3 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987500), Number(USIZE, 4)) }) Reg(U32) Some([116, 117, 118, 119]) [112, 17, 15, 0]
# Var inline_print_dec32_div32_by10_47_tef1a (tef1a Number(USIZE, 3435973837)) Reg(U32) Some([128, 129, 130, 131]) [205, 204, 204, 204]
# Var inline_print_dec32_mul32_by10_14_a (Arg0 a Number(USIZE)) Reg(U32) Some([112, 113, 114, 115])
# Var inline_print_dec32_mul32_by10_14_b (Local b Number(USIZE) Reg(U32)) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_mul32_by10_14_t7eaf (t7eaf Arithmetic(Add, Ident("b"), Ident("a"))) Reg(U32) Some([112, 113, 114, 115])
# Var inline_print_dec32_mul32_by10_14_t8792 (t8792 Ident("a")) Reg(U32) Some([112, 113, 114, 115])
# Var inline_print_dec32_mul32_by10_14_tace9 (tace9 Ident("b")) Reg(U32) Some([116, 117, 118, 119])
# Var inline_print_dec32_putc_29_c (Arg0 c Number(U8)) Reg(U8) Some([132])
# Var inline_print_dec32_putc_29_t0 (static "lcd_enable" addr) Reg(U32) Some([116, 117, 118, 119]) [96, 16, 15, 0]
# Var inline_print_dec32_putc_29_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([120])
# Var inline_print_dec32_putc_29_tac13 (tac13 Ident("c")) Reg(U8) Some([132])
# Var inline_print_dec32_putc_29_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([121]) [0]
# Var t1a60 (t1a60 Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))) Reg(U8) Some([132])
# Var t86e2 (t86e2 Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) Reg(U32) Some([112, 113, 114, 115])
# Var t8792 (t8792 Ident("a")) Reg(U32) Some([124, 125, 126, 127])
# Var t9c15 (t9c15 Number(USIZE, 256)) Reg(U32) Some([116, 117, 118, 119]) [0, 1, 0, 0]
# Var tace9 (tace9 Ident("b")) Reg(U32) Some([116, 117, 118, 119])
# Var tdd9e (tdd9e Index("a", Number(U8, 0))) Reg(U8) Some([132])
# 82b18 Copy32 [Register(0x00), Register(0x70)]
#       Save function parameter 'a' registers [0, 1, 2, 3] to locals [112, 113, 114, 115].
21 00 70 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Ident("a")
# 82b1b Copy32 [Register(0x70), Register(0x7c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Ident("a")
21 70 7c 

# t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# Number(USIZE, 256)
# 82b1e LoadImm32 [Register(0x74), Constant32(0x00000100=256)]
#       t9c15 <- 0n256/0x00000100u32  Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
#       Number(USIZE, 256)
20 74 00 01 00 00 

# if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
# 82b24 Cmp8 [Register(0x77), Register(0x7f)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
15 77 7f 

# 82b27 Cmp8IfZero [Register(0x76), Register(0x7e)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 76 7e 

# 82b2a Cmp8IfZero [Register(0x75), Register(0x7d)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 75 7d 

# 82b2d Cmp8IfZero [Register(0x74), Register(0x7c)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
16 74 7c 

# 82b30 JcImm [Label24(print_dec32_if_else_0_2)]
#       if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
#       Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }
71 56 2b 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if t8792 < t9c15 then 'print_dec32_if_true_0_1' else 'print_dec32_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(142,5))\nIfElse { if_blocks: [(Comparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Index(\"a\", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }\nComparison { op: LessThan, left: Ident(\"a\"), right: Number(USIZE, 256) }\n", opcode: JmpImm, args: [Label24(print_dec32_if_true_0_1)], resolved: None }
# :print_dec32_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# IfElse { if_blocks: [(Comparison { op: LessThan, left: Ident("a"), right: Number(USIZE, 256) }, [VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }, Return { value: None }])], else_block: [] }
# print_dec32_if_true_0_1
# tdd9e <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
# Index("a", Number(U8, 0))
# 82b34 Copy8 [Register(0x70), Register(0x84)]
#       tdd9e <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
#       Index("a", Number(U8, 0))
0b 70 84 

# None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
# Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
# 82b37 Copy8 [Register(0x84), Register(0x00)]
#       Arg0[a]=tdd9e None <= call print_dec8(tdd9e,) Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] }) }
#       Call(Call { function: "print_dec8", parameters: [Index("a", Number(U8, 0))] })
0b 84 00 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 82b3a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 82b40 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 4a 2b 08 00 

# 82b46 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 0c 2d 08 

# 82b4a AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# return None Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# Return { value: None }
# 82b50 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# 82b52 JmpImm [Label24(print_dec32_if_end_0)]
#       goto print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
70 56 2b 08 

# :print_dec32_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_else_0_2
# :print_dec32_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(142,5))
# print_dec32_if_end_0
# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# Ident("a")
# 82b56 Copy32 [Register(0x70), Register(0x7c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
#       Ident("a")
21 70 7c 

# inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
# Call(Call { function: "div32_by10", parameters: [Ident("a")] })
# 82b59 Copy32 [Register(0x7c), Register(0x74)]
#       inline_print_dec32_div32_by10_47_a <- t8792 U32 Some('/lutcomp/programs/lib/rpnlib.j':(147,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Call(Call { function: "div32_by10", parameters: [Ident("a")] }) }
#       Call(Call { function: "div32_by10", parameters: [Ident("a")] })
21 7c 74 

# inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# Number(USIZE, 3435973837)
# 82b5c LoadImm32 [Register(0x80), Constant32(0xcccccccd=3435973837)]
#       inline_print_dec32_div32_by10_47_tef1a <- 0xcccccccdu32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       Number(USIZE, 3435973837)
20 80 cd cc cc cc 

# inline_print_dec32_div32_by10_47_t1c61 <- 0n987500/0x000f116cu32  Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# AddressOf(Ident("prod"))
# Number(USIZE, 987500)
# 82b62 LoadImm32 [Register(0x7c), Constant32(0x000f116c=987500)]
#       inline_print_dec32_div32_by10_47_t1c61 <- 0n987500/0x000f116cu32  Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
#       AddressOf(Ident("prod"))
#       Number(USIZE, 987500)
20 7c 6c 11 0f 00 

# None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
# VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
# Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
# 82b68 Copy32 [Register(0x74), Register(0x00)]
#       Arg0[a]=inline_print_dec32_div32_by10_47_a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 74 00 

# 82b6b Copy32 [Register(0x80), Register(0x04)]
#       Arg1[b]=inline_print_dec32_div32_by10_47_tef1a None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 80 04 

# 82b6e Copy32 [Register(0x7c), Register(0x08)]
#       Arg2[c]=inline_print_dec32_div32_by10_47_t1c61 None <= call mul32_64(inline_print_dec32_div32_by10_47_a,inline_print_dec32_div32_by10_47_tef1a,inline_print_dec32_div32_by10_47_t1c61,) Some('/lutcomp/programs/lib/div.j':(130,5))
#       VoidExpression { expression: Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] }) }
#       Call(Call { function: "mul32_64", parameters: [Ident("a"), Number(USIZE, 3435973837), AddressOf(Ident("prod"))] })
21 7c 08 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}
# Registers to save: []
# 82b71 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:mul32_64))
32 0c fc ff ff ff 

# 82b77 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:mul32_64))
25 0c 81 2b 08 00 

# 82b7d JmpImm [Label24(:mul32_64)]
#       PseudoCall(Label24(:mul32_64))
70 98 26 08 

# 82b81 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:mul32_64))
32 0c 04 00 00 00 

# inline_print_dec32_div32_by10_47_tbbe3 <- 0n987504/0x000f1170u32  Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987500), Number(USIZE, 4)) }
# Number(USIZE, 987504)
# 82b87 LoadImm32 [Register(0x74), Constant32(0x000f1170=987504)]
#       inline_print_dec32_div32_by10_47_tbbe3 <- 0n987504/0x000f1170u32  Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(USIZE)), value: Arithmetic(Add, Number(USIZE, 987500), Number(USIZE, 4)) }
#       Number(USIZE, 987504)
20 74 70 11 0f 00 

# inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tbbe3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# LocalFieldDeref("prod", "hi")
# 82b8d Load32 [Register(0x74), Register(0x74)]
#       inline_print_dec32_div32_by10_47_tb354 <- mem[inline_print_dec32_div32_by10_47_tbbe3] U32 Some('/lutcomp/programs/lib/div.j':(131,5))
#       Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
#       Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
#       LocalFieldDeref("prod", "hi")
22 74 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a <- inline_print_dec32_div32_by10_47_tb354 U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\nCall(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
# Index("a", Number(U8, 0))
# 82b90 Copy8 [Register(0x74), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
#       Index("a", Number(U8, 0))
0b 74 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
# 82b93 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
04 00 03 

# 82b96 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x7a), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3))
1e 04 00 7a 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
# 82b9b Copy8 [Register(0x79), Register(0x74)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f28 U8 Some('/lutcomp/programs/lib/div.j':(112,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 0)), Number(U8, 3)) }
0b 79 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
# Index("a", Number(U8, 1))
# 82b9e Copy8 [Register(0x75), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
#       Index("a", Number(U8, 1))
0b 75 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
# 82ba1 LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
04 00 03 

# 82ba4 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x78), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3))
1e 04 00 78 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 U8 Some('/lutcomp/programs/lib/div.j':(113,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
# 82ba9 Copy8 [Register(0x79), Register(0x75)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t6274 U8 Some('/lutcomp/programs/lib/div.j':(113,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 1)), Number(U8, 3)) }
0b 79 75 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
# Index("a", Number(U8, 2))
# 82bac Copy8 [Register(0x76), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
#       Index("a", Number(U8, 2))
0b 76 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
# 82baf LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
04 00 03 

# 82bb2 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x79), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3))
1e 04 00 79 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
# 82bb7 Copy8 [Register(0x79), Register(0x76)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t96e8 U8 Some('/lutcomp/programs/lib/div.j':(114,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 2)), Number(U8, 3)) }
0b 79 76 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
# Index("a", Number(U8, 3))
# 82bba Copy8 [Register(0x77), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
#       Index("a", Number(U8, 3))
0b 77 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
# 82bbd LoadImm8 [Register(0x00), Constant8(0x03=3)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
04 00 03 

# 82bc0 Shift8 [Constant8(0x04=4), Register(0x00), Register(0x78), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c RotateRight Number(0n3/0x03u8) Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
#       Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3))
1e 04 00 78 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
# 82bc5 Copy8 [Register(0x79), Register(0x77)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t3f9e U8 Some('/lutcomp/programs/lib/div.j':(115,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(RotateRight, Index("a", Number(U8, 3)), Number(U8, 3)) }
0b 79 77 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
# Index("a", Number(U8, 0))
# 82bc8 Copy8 [Register(0x74), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
#       Index("a", Number(U8, 0))
0b 74 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
# 82bcb Copy8 [Register(0x7a), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
0b 7a 79 

# 82bce AndImm8 [Register(0x79), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31))
18 79 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 U8 Some('/lutcomp/programs/lib/div.j':(117,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
# 82bd1 Copy8 [Register(0x79), Register(0x74)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_te046 U8 Some('/lutcomp/programs/lib/div.j':(117,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 0)), Number(U8, 31)) }
0b 79 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Index("a", Number(U8, 0))
# 82bd4 Copy8 [Register(0x74), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Index("a", Number(U8, 0))
0b 74 7a 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
# Index("a", Number(U8, 1))
# 82bd7 Copy8 [Register(0x75), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
#       Index("a", Number(U8, 1))
0b 75 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
# 82bda Copy8 [Register(0x78), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
0b 78 79 

# 82bdd AndImm8 [Register(0x79), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))
18 79 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620) Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
# 82be0 Or8 [Register(0x7a), Register(0x79), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tdd9e BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_ta620) Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224)))
1c 7a 79 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
# Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
# 82be4 Copy8 [Register(0x79), Register(0x74)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x00..0x01] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8772 U8 Some('/lutcomp/programs/lib/div.j':(118,5))
#       Assign { target: Index("a", Number(U8, 0)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 0)), Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 224))) }
0b 79 74 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
# Index("a", Number(U8, 1))
# 82be7 Copy8 [Register(0x75), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
#       Index("a", Number(U8, 1))
0b 75 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
# 82bea Copy8 [Register(0x78), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
0b 78 79 

# 82bed AndImm8 [Register(0x79), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31))
18 79 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
# 82bf0 Copy8 [Register(0x79), Register(0x75)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8e91 U8 Some('/lutcomp/programs/lib/div.j':(119,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 1)), Number(U8, 31)) }
0b 79 75 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Index("a", Number(U8, 1))
# 82bf3 Copy8 [Register(0x75), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Index("a", Number(U8, 1))
0b 75 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
# Index("a", Number(U8, 2))
# 82bf6 Copy8 [Register(0x76), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
#       Index("a", Number(U8, 2))
0b 76 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
# 82bf9 AndImm8 [Register(0x79), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))
18 79 e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed) Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
# 82bfc Or8 [Register(0x78), Register(0x79), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1539 BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5eed) Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224)))
1c 78 79 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
# Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
# 82c00 Copy8 [Register(0x79), Register(0x75)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x01..0x02] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_tea96 U8 Some('/lutcomp/programs/lib/div.j':(120,5))
#       Assign { target: Index("a", Number(U8, 1)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 1)), Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 224))) }
0b 79 75 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
# Index("a", Number(U8, 2))
# 82c03 Copy8 [Register(0x76), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
#       Index("a", Number(U8, 2))
0b 76 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
# 82c06 AndImm8 [Register(0x79), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31))
18 79 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
# 82c09 Copy8 [Register(0x79), Register(0x76)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t1c22 U8 Some('/lutcomp/programs/lib/div.j':(121,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 2)), Number(U8, 31)) }
0b 79 76 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Index("a", Number(U8, 2))
# 82c0c Copy8 [Register(0x76), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Index("a", Number(U8, 2))
0b 76 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
# Index("a", Number(U8, 3))
# 82c0f Copy8 [Register(0x77), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
#       Index("a", Number(U8, 3))
0b 77 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
# 82c12 Copy8 [Register(0x78), Register(0x7a)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
0b 78 7a 

# 82c15 AndImm8 [Register(0x7a), Constant8(0xe0=224)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n224/0xe0u8) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))
18 7a e0 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450) Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
# 82c18 Or8 [Register(0x79), Register(0x7a), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t577f BitwiseOr Var(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t9450) Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
#       Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224)))
1c 79 7a 79 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 U8 Some('/lutcomp/programs/lib/div.j':(122,5))
# Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
# 82c1c Copy8 [Register(0x79), Register(0x76)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x02..0x03] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t2574 U8 Some('/lutcomp/programs/lib/div.j':(122,5))
#       Assign { target: Index("a", Number(U8, 2)), var_type: None, value: Arithmetic(Or, Index("a", Number(U8, 2)), Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 224))) }
0b 79 76 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
# Index("a", Number(U8, 3))
# 82c1f Copy8 [Register(0x77), Register(0x78)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
#       Index("a", Number(U8, 3))
0b 77 78 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
# 82c22 Copy8 [Register(0x78), Register(0x79)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
0b 78 79 

# 82c25 AndImm8 [Register(0x79), Constant8(0x1f=31)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t5b7c BitwiseAnd Number(0n31/0x1fu8) Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
#       Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31))
18 79 1f 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
# Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
# 82c28 Copy8 [Register(0x79), Register(0x77)]
#       inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a[0x03..0x04] <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8119 U8 Some('/lutcomp/programs/lib/div.j':(123,5))
#       Assign { target: Index("a", Number(U8, 3)), var_type: None, value: Arithmetic(And, Index("a", Number(U8, 3)), Number(U8, 31)) }
0b 79 77 

# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_a U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# optimized away noop copy Instruction { source: "inline_print_dec32_div32_by10_47_t45ae <- inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_t8792 U32 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 Some('/lutcomp/programs/lib/div.j':(124,5))
# Return { value: Some(Ident("a")) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 Some('/lutcomp/programs/lib/div.j':(124,5))\nReturn { value: Some(Ident(\"a\")) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3)], resolved: None }
# :inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3 None
# inline_print_dec32_div32_by10_47_inline_div32_by10_shiftright3_46_function_end_shiftright3
# b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# optimized away noop copy Instruction { source: "b <- inline_print_dec32_div32_by10_47_t45ae U32 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# goto inline_print_dec32_div32_by10_47_function_end_div32_by10 Some('/lutcomp/programs/lib/div.j':(131,5))
# Return { value: Some(Call(Call { function: "shiftright3", parameters: [LocalFieldDeref("prod", "hi")] })) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_div32_by10_47_function_end_div32_by10 Some('/lutcomp/programs/lib/div.j':(131,5))\nReturn { value: Some(Call(Call { function: \"shiftright3\", parameters: [LocalFieldDeref(\"prod\", \"hi\")] })) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_div32_by10_47_function_end_div32_by10)], resolved: None }
# :inline_print_dec32_div32_by10_47_function_end_div32_by10 None
# inline_print_dec32_div32_by10_47_function_end_div32_by10
# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(148,5))\nVoidExpression { expression: Call(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec32\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
# VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec32", parameters: [Ident("b")] })
# 82c2b Copy32 [Register(0x74), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
21 74 00 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132]
# 82c2e Push8 [Register(0x84)]
#       Saving reg0x84 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 84 

# 82c30 Push8 [Register(0x83)]
#       Saving reg0x83 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 83 

# 82c32 Push8 [Register(0x82)]
#       Saving reg0x82 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 82 

# 82c34 Push8 [Register(0x81)]
#       Saving reg0x81 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 81 

# 82c36 Push8 [Register(0x80)]
#       Saving reg0x80 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 80 

# 82c38 Push8 [Register(0x7f)]
#       Saving reg0x7f before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7f 

# 82c3a Push8 [Register(0x7e)]
#       Saving reg0x7e before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7e 

# 82c3c Push8 [Register(0x7d)]
#       Saving reg0x7d before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7d 

# 82c3e Push8 [Register(0x7c)]
#       Saving reg0x7c before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7c 

# 82c40 Push8 [Register(0x7a)]
#       Saving reg0x7a before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 7a 

# 82c42 Push8 [Register(0x79)]
#       Saving reg0x79 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 79 

# 82c44 Push8 [Register(0x78)]
#       Saving reg0x78 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 78 

# 82c46 Push8 [Register(0x77)]
#       Saving reg0x77 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 77 

# 82c48 Push8 [Register(0x76)]
#       Saving reg0x76 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 76 

# 82c4a Push8 [Register(0x75)]
#       Saving reg0x75 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 75 

# 82c4c Push8 [Register(0x74)]
#       Saving reg0x74 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 74 

# 82c4e Push8 [Register(0x73)]
#       Saving reg0x73 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 73 

# 82c50 Push8 [Register(0x72)]
#       Saving reg0x72 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 72 

# 82c52 Push8 [Register(0x71)]
#       Saving reg0x71 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 71 

# 82c54 Push8 [Register(0x70)]
#       Saving reg0x70 before None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
09 70 

# 82c56 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec32))
32 0c fc ff ff ff 

# 82c5c StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec32))
25 0c 66 2c 08 00 

# 82c62 JmpImm [Label24(:print_dec32)]
#       PseudoCall(Label24(:print_dec32))
70 18 2b 08 

# 82c66 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec32))
32 0c 04 00 00 00 

# 82c6c Pop8 [Register(0x70)]
#       Restoring reg0x70 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 70 

# 82c6e Pop8 [Register(0x71)]
#       Restoring reg0x71 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 71 

# 82c70 Pop8 [Register(0x72)]
#       Restoring reg0x72 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 72 

# 82c72 Pop8 [Register(0x73)]
#       Restoring reg0x73 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 73 

# 82c74 Pop8 [Register(0x74)]
#       Restoring reg0x74 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 74 

# 82c76 Pop8 [Register(0x75)]
#       Restoring reg0x75 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 75 

# 82c78 Pop8 [Register(0x76)]
#       Restoring reg0x76 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 76 

# 82c7a Pop8 [Register(0x77)]
#       Restoring reg0x77 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 77 

# 82c7c Pop8 [Register(0x78)]
#       Restoring reg0x78 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 78 

# 82c7e Pop8 [Register(0x79)]
#       Restoring reg0x79 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 79 

# 82c80 Pop8 [Register(0x7a)]
#       Restoring reg0x7a after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7a 

# 82c82 Pop8 [Register(0x7c)]
#       Restoring reg0x7c after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7c 

# 82c84 Pop8 [Register(0x7d)]
#       Restoring reg0x7d after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7d 

# 82c86 Pop8 [Register(0x7e)]
#       Restoring reg0x7e after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7e 

# 82c88 Pop8 [Register(0x7f)]
#       Restoring reg0x7f after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 7f 

# 82c8a Pop8 [Register(0x80)]
#       Restoring reg0x80 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 80 

# 82c8c Pop8 [Register(0x81)]
#       Restoring reg0x81 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 81 

# 82c8e Pop8 [Register(0x82)]
#       Restoring reg0x82 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 82 

# 82c90 Pop8 [Register(0x83)]
#       Restoring reg0x83 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 83 

# 82c92 Pop8 [Register(0x84)]
#       Restoring reg0x84 after None <= call print_dec32(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(148,5))
#       VoidExpression { expression: Call(Call { function: "print_dec32", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec32", parameters: [Ident("b")] })
0a 84 

# t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Ident("a")
# 82c94 Copy32 [Register(0x70), Register(0x7c)]
#       t8792 <- a U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Ident("a")
21 70 7c 

# tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })) }\nArithmetic(Subtract, Ident(\"a\"), Call(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] }))\nCall(Call { function: \"mul32_by10\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
# 82c97 Copy32 [Register(0x74), Register(0x70)]
#       inline_print_dec32_mul32_by10_14_a <- tace9 U32 Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
#       Call(Call { function: "mul32_by10", parameters: [Ident("b")] })
21 74 70 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(49,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82c9a ClearCarry []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 82c9b AddCarry32_1 [Register(0x70), Register(0x70), Register(0x70)]
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 70 70 70 

# 82c9f AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_a <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(49,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(50,5))\nAssign { target: Ident(\"b\"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident(\"a\"), Ident(\"a\")) }\nArithmetic(Add, Ident(\"a\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
# Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
# Arithmetic(Add, Ident("a"), Ident("a"))
# 82ca0 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
03 

# 82ca1 AddCarry32_1 [Register(0x70), Register(0x70), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
30 70 70 74 

# 82ca5 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_t8792 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(50,5))
#       Assign { target: Ident("b"), var_type: Some(Number(USIZE)), value: Arithmetic(Add, Ident("a"), Ident("a")) }
#       Arithmetic(Add, Ident("a"), Ident("a"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(51,5))\nAssign { target: Ident(\"b\"), var_type: None, value: Arithmetic(Add, Ident(\"b\"), Ident(\"b\")) }\nArithmetic(Add, Ident(\"b\"), Ident(\"b\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
# Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
# Arithmetic(Add, Ident("b"), Ident("b"))
# 82ca6 ClearCarry []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
03 

# 82ca7 AddCarry32_1 [Register(0x74), Register(0x74), Register(0x74)]
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
30 74 74 74 

# 82cab AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_b <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_tace9) Some('/lutcomp/programs/lib/mul.j':(51,5))
#       Assign { target: Ident("b"), var_type: None, value: Arithmetic(Add, Ident("b"), Ident("b")) }
#       Arithmetic(Add, Ident("b"), Ident("b"))
31 

# inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("b")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_tace9 <- inline_print_dec32_mul32_by10_14_b U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"b\")\n", opcode: Copy32, args: [Register(0x74), Register(0x74)], resolved: None }
# inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# Ident("a")
# optimized away noop copy Instruction { source: "inline_print_dec32_mul32_by10_14_t8792 <- inline_print_dec32_mul32_by10_14_a U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\nArithmetic(Add, Ident(\"b\"), Ident(\"a\"))\nIdent(\"a\")\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Arithmetic(Add, Ident("b"), Ident("a"))
# 82cac ClearCarry []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
03 

# 82cad AddCarry32_1 [Register(0x74), Register(0x70), Register(0x70)]
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
30 74 70 70 

# 82cb1 AddCarry32_2 []
#       inline_print_dec32_mul32_by10_14_t7eaf <- inline_print_dec32_mul32_by10_14_tace9 Add Var(inline_print_dec32_mul32_by10_14_t8792) Some('/lutcomp/programs/lib/mul.j':(52,5))
#       Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
#       Arithmetic(Add, Ident("b"), Ident("a"))
31 

# t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# optimized away noop copy Instruction { source: "t86e2 <- inline_print_dec32_mul32_by10_14_t7eaf U32 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: Copy32, args: [Register(0x70), Register(0x70)], resolved: None }
# goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))
# Return { value: Some(Arithmetic(Add, Ident("b"), Ident("a"))) }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_mul32_by10_14_function_end_mul32_by10 Some('/lutcomp/programs/lib/mul.j':(52,5))\nReturn { value: Some(Arithmetic(Add, Ident(\"b\"), Ident(\"a\"))) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_mul32_by10_14_function_end_mul32_by10)], resolved: None }
# :inline_print_dec32_mul32_by10_14_function_end_mul32_by10 None
# inline_print_dec32_mul32_by10_14_function_end_mul32_by10
# a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
# Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
# 82cb2 Copy32 [Register(0x70), Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
21 70 00 

# 82cb5 Invert8 [Register(0x00)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 00 

# 82cb7 Invert8 [Register(0x01)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 01 

# 82cb9 Invert8 [Register(0x02)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 02 

# 82cbb Invert8 [Register(0x03)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
01 03 

# 82cbd AddImm32IgnoreCarry [Register(0x00), Constant32(0x00000001=1)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
32 00 01 00 00 00 

# 82cc3 ClearCarry []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
03 

# 82cc4 AddCarry32_1 [Register(0x7c), Register(0x00), Register(0x70)]
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
30 7c 00 70 

# 82cc8 AddCarry32_2 []
#       a <- t8792 Subtract Var(t86e2) Some('/lutcomp/programs/lib/rpnlib.j':(149,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] })) }
#       Arithmetic(Subtract, Ident("a"), Call(Call { function: "mul32_by10", parameters: [Ident("b")] }))
31 

# tdd9e <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
# Index("a", Number(U8, 0))
# 82cc9 Copy8 [Register(0x70), Register(0x84)]
#       tdd9e <- a[0x00..0x01] U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
#       Index("a", Number(U8, 0))
0b 70 84 

# t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
# 82ccc LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
04 00 30 

# 82ccf Add8NoCarryIn [Register(0x84), Register(0x00), Register(0x84)]
#       t1a60 <- tdd9e Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
#       Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))
14 84 00 84 

# inline_print_dec32_putc_29_c <- t1a60 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Index("a", Number(U8, 0)), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_c <- t1a60 U8 Some('/lutcomp/programs/lib/rpnlib.j':(151,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Index(\"a\", Number(U8, 0)), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# None <= call io_write0(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82cd3 Out0 [Register(0x84)]
#       IoWrite0
68 84 

# inline_print_dec32_putc_29_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 82cd5 LoadImm32 [Register(0x74), Constant32(0x000f1060=987232)]
#       inline_print_dec32_putc_29_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 74 60 10 0f 00 

# inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 82cdb Load8 [Register(0x74), Register(0x78)]
#       inline_print_dec32_putc_29_t76c7 <- mem[inline_print_dec32_putc_29_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 74 78 

# inline_print_dec32_putc_29_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 82cde LoadImm8 [Register(0x79), Constant8(0x00=0)]
#       inline_print_dec32_putc_29_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 79 00 

# if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_tb36e then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 82ce1 Cmp8 [Register(0x78), Register(0x79)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_tb36e then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 78 79 

# 82ce4 JzImm [Label24(inline_print_dec32_putc_29_putc_if_else_0_2)]
#       if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_tb36e then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 05 2d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec32_putc_29_t76c7 != inline_print_dec32_putc_29_tb36e then 'inline_print_dec32_putc_29_putc_if_true_0_1' else 'inline_print_dec32_putc_29_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_putc_if_true_0_1)], resolved: None }
# :inline_print_dec32_putc_29_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec32_putc_29_putc_if_true_0_1
# inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec32_putc_29_tac13 <- inline_print_dec32_putc_29_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x84), Register(0x84)], resolved: None }
# None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82ce8 Copy8 [Register(0x84), Register(0x00)]
#       Arg0[ch]=inline_print_dec32_putc_29_tac13 None <= call lcd_putc(inline_print_dec32_putc_29_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 84 00 

# Registers used by this function: {112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: []
# 82ceb AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82cf1 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c fb 2c 08 00 

# 82cf7 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 82cfb AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 82d01 JmpImm [Label24(inline_print_dec32_putc_29_putc_if_end_0)]
#       goto inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 05 2d 08 

# :inline_print_dec32_putc_29_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_else_0_2
# :inline_print_dec32_putc_29_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec32_putc_29_putc_if_end_0
# goto inline_print_dec32_putc_29_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec32_putc_29_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec32_putc_29_function_end_putc)], resolved: None }
# :inline_print_dec32_putc_29_function_end_putc None
# inline_print_dec32_putc_29_function_end_putc
# return None None
# Return { value: None }
# 82d05 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec32 None
# function_end_print_dec32
# Unreachable None
# 82d07 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :print_dec8
# Ret None
# Arg0=a
# Var a (Arg0 a Number(U8)) Reg(U8) Some([133])
# Var b (Local b Number(U8) Reg(U8)) Reg(U8) Some([134])
# Var inline_print_dec8_putc_30_c (Arg0 c Number(U8)) Reg(U8) Some([133])
# Var inline_print_dec8_putc_30_t0 (static "lcd_enable" addr) Reg(U32) Some([136, 137, 138, 139]) [96, 16, 15, 0]
# Var inline_print_dec8_putc_30_t76c7 (t76c7 Ident("lcd_enable")) Reg(U8) Some([134])
# Var inline_print_dec8_putc_30_tac13 (tac13 Ident("c")) Reg(U8) Some([133])
# Var inline_print_dec8_putc_30_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([140]) [0]
# Var t6cb (t6cb Arithmetic(Multiply, Ident("b"), Number(U8, 10))) Reg(U8) Some([133])
# Var t6db1 (t6db1 Arithmetic(Add, Ident("a"), Number(U8, 48))) Reg(U8) Some([133])
# Var t8792 (t8792 Ident("a")) Reg(U8) Some([140])
# Var tace9 (tace9 Ident("b")) Reg(U8) Some([134])
# Var td7b5 (td7b5 Number(U8, 10)) Reg(U8) Some([134]) [10]
# 82d0c Copy8 [Register(0x00), Register(0x85)]
#       Save function parameter 'a' registers [0] to locals [133].
0b 00 85 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# Ident("a")
# 82d0f Copy8 [Register(0x85), Register(0x8c)]
#       t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
#       Ident("a")
0b 85 8c 

# td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# Number(U8, 10)
# 82d12 LoadImm8 [Register(0x86), Constant8(0x0a=10)]
#       td7b5 <- 0n10/0x0au8  Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
#       Number(U8, 10)
04 86 0a 

# if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
# 82d15 Cmp8 [Register(0x86), Register(0x8c)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
15 86 8c 

# 82d18 JcImm [Label24(print_dec8_if_true_0_1)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
71 20 2d 08 

# 82d1c JmpImm [Label24(print_dec8_if_else_0_2)]
#       if t8792 >= td7b5 then 'print_dec8_if_true_0_1' else 'print_dec8_if_else_0_2' Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
#       Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }
70 76 2d 08 

# :print_dec8_if_true_0_1 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# IfElse { if_blocks: [(Comparison { op: GreaterThanOrEqual, left: Ident("a"), right: Number(U8, 10) }, [Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }, VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }, Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }])], else_block: [] }
# print_dec8_if_true_0_1
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 10))
# Ident("a")
# 82d20 Copy8 [Register(0x85), Register(0x8c)]
#       t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
#       Ident("a")
0b 85 8c 

# b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
# Arithmetic(Divide, Ident("a"), Number(U8, 10))
# 82d23 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
04 00 0a 

# 82d26 Divide8 [Register(0x8c), Register(0x00), Register(0x86)]
#       b <- t8792 Divide Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("b"), var_type: Some(Number(U8)), value: Arithmetic(Divide, Ident("a"), Number(U8, 10)) }
#       Arithmetic(Divide, Ident("a"), Number(U8, 10))
17 8c 00 86 

# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nVoidExpression { expression: Call(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] }) }\nCall(Call { function: \"print_dec8\", parameters: [Ident(\"b\")] })\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x86), Register(0x86)], resolved: None }
# None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
# Call(Call { function: "print_dec8", parameters: [Ident("b")] })
# 82d2a Copy8 [Register(0x86), Register(0x00)]
#       Arg0[a]=tace9 None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0b 86 00 

# Registers used by this function: {133, 134, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [133, 134, 136, 137, 138, 139, 140]
# 82d2d Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8c 

# 82d2f Push8 [Register(0x8b)]
#       Saving reg0x8b before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8b 

# 82d31 Push8 [Register(0x8a)]
#       Saving reg0x8a before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 8a 

# 82d33 Push8 [Register(0x89)]
#       Saving reg0x89 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 89 

# 82d35 Push8 [Register(0x88)]
#       Saving reg0x88 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 88 

# 82d37 Push8 [Register(0x86)]
#       Saving reg0x86 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 86 

# 82d39 Push8 [Register(0x85)]
#       Saving reg0x85 before None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
09 85 

# 82d3b AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:print_dec8))
32 0c fc ff ff ff 

# 82d41 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:print_dec8))
25 0c 4b 2d 08 00 

# 82d47 JmpImm [Label24(:print_dec8)]
#       PseudoCall(Label24(:print_dec8))
70 0c 2d 08 

# 82d4b AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:print_dec8))
32 0c 04 00 00 00 

# 82d51 Pop8 [Register(0x85)]
#       Restoring reg0x85 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 85 

# 82d53 Pop8 [Register(0x86)]
#       Restoring reg0x86 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 86 

# 82d55 Pop8 [Register(0x88)]
#       Restoring reg0x88 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 88 

# 82d57 Pop8 [Register(0x89)]
#       Restoring reg0x89 after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 89 

# 82d59 Pop8 [Register(0x8a)]
#       Restoring reg0x8a after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8a 

# 82d5b Pop8 [Register(0x8b)]
#       Restoring reg0x8b after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8b 

# 82d5d Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call print_dec8(tace9,) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       VoidExpression { expression: Call(Call { function: "print_dec8", parameters: [Ident("b")] }) }
#       Call(Call { function: "print_dec8", parameters: [Ident("b")] })
0a 8c 

# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Ident("a")
# 82d5f Copy8 [Register(0x85), Register(0x8c)]
#       t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Ident("a")
0b 85 8c 

# tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 10))
# Ident("b")
# optimized away noop copy Instruction { source: "tace9 <- b U8 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))\nAssign { target: Ident(\"a\"), var_type: None, value: Arithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10))) }\nArithmetic(Subtract, Ident(\"a\"), Arithmetic(Multiply, Ident(\"b\"), Number(U8, 10)))\nArithmetic(Multiply, Ident(\"b\"), Number(U8, 10))\nIdent(\"b\")\n", opcode: Copy8, args: [Register(0x86), Register(0x86)], resolved: None }
# t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# Arithmetic(Multiply, Ident("b"), Number(U8, 10))
# 82d62 LoadImm8 [Register(0x00), Constant8(0x0a=10)]
#       t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 10))
04 00 0a 

# 82d65 Mul8_8 [Register(0x86), Register(0x00), Register(0x85)]
#       t6cb <- tace9 Multiply Number(0n10/0x0au8) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
#       Arithmetic(Multiply, Ident("b"), Number(U8, 10))
10 86 00 85 

# a <- t8792 Subtract Var(t6cb) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
# Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
# 82d69 Copy8 [Register(0x85), Register(0x00)]
#       a <- t8792 Subtract Var(t6cb) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
0b 85 00 

# 82d6c Negate8 [Register(0x00)]
#       a <- t8792 Subtract Var(t6cb) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
02 00 

# 82d6e Add8NoCarryIn [Register(0x8c), Register(0x00), Register(0x85)]
#       a <- t8792 Subtract Var(t6cb) Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
#       Assign { target: Ident("a"), var_type: None, value: Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10))) }
#       Arithmetic(Subtract, Ident("a"), Arithmetic(Multiply, Ident("b"), Number(U8, 10)))
14 8c 00 85 

# goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# 82d72 JmpImm [Label24(print_dec8_if_end_0)]
#       goto print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
70 76 2d 08 

# :print_dec8_if_else_0_2 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_else_0_2
# :print_dec8_if_end_0 Some('/lutcomp/programs/lib/rpnlib.j':(155,5))
# print_dec8_if_end_0
# t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# Ident("a")
# 82d76 Copy8 [Register(0x85), Register(0x8c)]
#       t8792 <- a U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
#       Ident("a")
0b 85 8c 

# t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# Arithmetic(Add, Ident("a"), Number(U8, 48))
# 82d79 LoadImm8 [Register(0x00), Constant8(0x30=48)]
#       t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
04 00 30 

# 82d7c Add8NoCarryIn [Register(0x8c), Register(0x00), Register(0x85)]
#       t6db1 <- t8792 Add Number(0n48/0x30u8) Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
#       VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
#       Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
#       Arithmetic(Add, Ident("a"), Number(U8, 48))
14 8c 00 85 

# inline_print_dec8_putc_30_c <- t6db1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))
# VoidExpression { expression: Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] }) }
# Call(Call { function: "putc", parameters: [Arithmetic(Add, Ident("a"), Number(U8, 48))] })
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_c <- t6db1 U8 Some('/lutcomp/programs/lib/rpnlib.j':(161,5))\nVoidExpression { expression: Call(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] }) }\nCall(Call { function: \"putc\", parameters: [Arithmetic(Add, Ident(\"a\"), Number(U8, 48))] })\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(35,5))\nVoidExpression { expression: Call(Call { function: \"io_write0\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"io_write0\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# None <= call io_write0(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(35,5))
# VoidExpression { expression: Call(Call { function: "io_write0", parameters: [Ident("c")] }) }
# Call(Call { function: "io_write0", parameters: [Ident("c")] })
# 82d80 Out0 [Register(0x85)]
#       IoWrite0
68 85 

# inline_print_dec8_putc_30_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 82d82 LoadImm32 [Register(0x88), Constant32(0x000f1060=987232)]
#       inline_print_dec8_putc_30_t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
20 88 60 10 0f 00 

# inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Ident("lcd_enable")
# 82d88 Load8 [Register(0x88), Register(0x86)]
#       inline_print_dec8_putc_30_t76c7 <- mem[inline_print_dec8_putc_30_t0] U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Ident("lcd_enable")
05 88 86 

# inline_print_dec8_putc_30_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# Number(U8, 0)
# 82d8b LoadImm8 [Register(0x8c), Constant8(0x00=0)]
#       inline_print_dec8_putc_30_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
#       Number(U8, 0)
04 8c 00 

# if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_tb36e then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
# 82d8e Cmp8 [Register(0x86), Register(0x8c)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_tb36e then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
15 86 8c 

# 82d91 JzImm [Label24(inline_print_dec8_putc_30_putc_if_else_0_2)]
#       if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_tb36e then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
#       Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }
72 b6 2d 08 

# Optimized away unconditional jump to the next instruction: Instruction { source: "if inline_print_dec8_putc_30_t76c7 != inline_print_dec8_putc_30_tb36e then 'inline_print_dec8_putc_30_putc_if_true_0_1' else 'inline_print_dec8_putc_30_putc_if_else_0_2' Some('/lutcomp/programs/lib/stdio.j':(36,5))\nIfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }])], else_block: [] }\nComparison { op: NotEquals, left: Ident(\"lcd_enable\"), right: Number(U8, 0) }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_putc_if_true_0_1)], resolved: None }
# :inline_print_dec8_putc_30_putc_if_true_0_1 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# IfElse { if_blocks: [(Comparison { op: NotEquals, left: Ident("lcd_enable"), right: Number(U8, 0) }, [VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }])], else_block: [] }
# inline_print_dec8_putc_30_putc_if_true_0_1
# inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# Ident("c")
# optimized away noop copy Instruction { source: "inline_print_dec8_putc_30_tac13 <- inline_print_dec8_putc_30_c U8 Some('/lutcomp/programs/lib/stdio.j':(36,5))\nVoidExpression { expression: Call(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] }) }\nCall(Call { function: \"lcd_putc\", parameters: [Ident(\"c\")] })\nIdent(\"c\")\n", opcode: Copy8, args: [Register(0x85), Register(0x85)], resolved: None }
# None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
# VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
# Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
# 82d95 Copy8 [Register(0x85), Register(0x00)]
#       Arg0[ch]=inline_print_dec8_putc_30_tac13 None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0b 85 00 

# Registers used by this function: {133, 134, 136, 137, 138, 139, 140}
# Registers used by callee tree: {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 140, 141, 142, 143, 144, 145, 146, 147, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 224, 225, 226, 227, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255}
# Registers to save: [140]
# 82d98 Push8 [Register(0x8c)]
#       Saving reg0x8c before None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
09 8c 

# 82d9a AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_putc))
32 0c fc ff ff ff 

# 82da0 StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_putc))
25 0c aa 2d 08 00 

# 82da6 JmpImm [Label24(:lcd_putc)]
#       PseudoCall(Label24(:lcd_putc))
70 20 23 08 

# 82daa AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_putc))
32 0c 04 00 00 00 

# 82db0 Pop8 [Register(0x8c)]
#       Restoring reg0x8c after None <= call lcd_putc(inline_print_dec8_putc_30_tac13,) Some('/lutcomp/programs/lib/stdio.j':(36,5))
#       VoidExpression { expression: Call(Call { function: "lcd_putc", parameters: [Ident("c")] }) }
#       Call(Call { function: "lcd_putc", parameters: [Ident("c")] })
0a 8c 

# goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# 82db2 JmpImm [Label24(inline_print_dec8_putc_30_putc_if_end_0)]
#       goto inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
70 b6 2d 08 

# :inline_print_dec8_putc_30_putc_if_else_0_2 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_else_0_2
# :inline_print_dec8_putc_30_putc_if_end_0 Some('/lutcomp/programs/lib/stdio.j':(36,5))
# inline_print_dec8_putc_30_putc_if_end_0
# goto inline_print_dec8_putc_30_function_end_putc None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_print_dec8_putc_30_function_end_putc None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_print_dec8_putc_30_function_end_putc)], resolved: None }
# :inline_print_dec8_putc_30_function_end_putc None
# inline_print_dec8_putc_30_function_end_putc
# return None None
# Return { value: None }
# 82db6 JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_print_dec8 None
# function_end_print_dec8
# Unreachable None
# 82db8 Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

# :stdio_init
# Ret None
# Var inline_stdio_init_queue_init_35_tb36e (tb36e Number(U8, 0)) Reg(U8) Some([141]) [0]
# Var inline_stdio_init_queue_init_35_tb702 (tb702 Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }) Reg(U32) Some([144, 145, 146, 147]) [100, 17, 15, 0]
# Var inline_stdio_init_queue_init_35_tc1ff (tc1ff Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }) Reg(U32) Some([144, 145, 146, 147]) [104, 17, 15, 0]
# Var t0 (static "lcd_enable" addr) Reg(U32) Some([148, 149, 150, 151]) [96, 16, 15, 0]
# Var t1 (static "keyboard_enable" addr) Reg(U32) Some([148, 149, 150, 151]) [8, 16, 15, 0]
# Var tfcd (tfcd Number(U8, 1)) Reg(U8) Some([152]) [1]
# t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
# 82dbd LoadImm32 [Register(0x94), Constant32(0x000f1060=987232)]
#       t0 <- 0n987232/0x000f1060u32  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
20 94 60 10 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 82dc3 LoadImm8 [Register(0x98), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 98 01 

# mem[t0] <- tfcd U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
# Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
# 82dc6 Store8 [Register(0x98), Register(0x94)]
#       mem[t0] <- tfcd U8 Some('/lutcomp/programs/lib/stdio.j':(11,5))
#       Assign { target: Ident("lcd_enable"), var_type: None, value: Number(U8, 1) }
06 98 94 

# t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
# 82dc9 LoadImm32 [Register(0x94), Constant32(0x000f1008=987144)]
#       t1 <- 0n987144/0x000f1008u32  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
20 94 08 10 0f 00 

# tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
# Number(U8, 1)
# 82dcf LoadImm8 [Register(0x98), Constant8(0x01=1)]
#       tfcd <- 0n1/0x01u8  Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
#       Number(U8, 1)
04 98 01 

# mem[t1] <- tfcd U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
# Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
# 82dd2 Store8 [Register(0x98), Register(0x94)]
#       mem[t1] <- tfcd U8 Some('/lutcomp/programs/lib/stdio.j':(12,5))
#       Assign { target: Ident("keyboard_enable"), var_type: None, value: Number(U8, 1) }
06 98 94 

# inline_stdio_init_queue_init_35_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987492/0x000f1164u32 `.
# 82dd5 LoadImm32 [Register(0x90), Constant32(0x000f1164=987492)]
#       inline_stdio_init_queue_init_35_tb702 <- 0n987492/0x000f1164u32  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 256))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tb702 <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n256/0x00000100u32)` with constant `inline_stdio_init_queue_init_35_tb702 <- 0n987492/0x000f1164u32 `.
20 90 64 11 0f 00 

# inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82ddb LoadImm8 [Register(0x8d), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 8d 00 

# mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
# Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
# 82dde Store8 [Register(0x8d), Register(0x90)]
#       mem[inline_stdio_init_queue_init_35_tb702] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(8,5))
#       Assign { target: PtrFieldDeref("s", "first"), var_type: None, value: Number(U8, 0) }
06 8d 90 

# inline_stdio_init_queue_init_35_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
# Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
# # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987496/0x000f1168u32 `.
# 82de1 LoadImm32 [Register(0x90), Constant32(0x000f1168=987496)]
#       inline_stdio_init_queue_init_35_tc1ff <- 0n987496/0x000f1168u32  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Cast { old_type: Some(Number(USIZE)), new_type: Ptr(Number(U8)), value: Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260)) }
#       Arithmetic(Add, Cast { old_type: Some(Ptr(Struct("Queue"))), new_type: Number(USIZE), value: Ident("s") }, Number(USIZE, 260))
#       # In IlFunctionId("stdio_init"), replacing `inline_stdio_init_queue_init_35_tc1ff <- inline_stdio_init_queue_init_35_t4d4f Add Number(0n260/0x00000104u32)` with constant `inline_stdio_init_queue_init_35_tc1ff <- 0n987496/0x000f1168u32 `.
20 90 68 11 0f 00 

# inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# Number(U8, 0)
# 82de7 LoadImm8 [Register(0x8d), Constant8(0x00=0)]
#       inline_stdio_init_queue_init_35_tb36e <- 0n0/0x00u8  Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
#       Number(U8, 0)
04 8d 00 

# mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
# Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
# 82dea Store8 [Register(0x8d), Register(0x90)]
#       mem[inline_stdio_init_queue_init_35_tc1ff] <- inline_stdio_init_queue_init_35_tb36e U8 Some('/lutcomp/programs/lib/Queue.j':(9,5))
#       Assign { target: PtrFieldDeref("s", "last"), var_type: None, value: Number(U8, 0) }
06 8d 90 

# goto inline_stdio_init_queue_init_35_function_end_queue_init None
# Return { value: None }
# Optimized away unconditional jump to the next instruction: Instruction { source: "goto inline_stdio_init_queue_init_35_function_end_queue_init None\nReturn { value: None }\n", opcode: JmpImm, args: [Label24(inline_stdio_init_queue_init_35_function_end_queue_init)], resolved: None }
# :inline_stdio_init_queue_init_35_function_end_queue_init None
# inline_stdio_init_queue_init_35_function_end_queue_init
# None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
# VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
# Call(Call { function: "lcd_init", parameters: [] })
# Registers used by this function: {141, 144, 145, 146, 147, 148, 149, 150, 151, 152}
# Registers used by callee tree: {140, 141, 142, 143, 144, 145, 146, 147, 205, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241}
# Registers to save: [141, 144, 145, 146, 147]
# 82ded Push8 [Register(0x93)]
#       Saving reg0x93 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 93 

# 82def Push8 [Register(0x92)]
#       Saving reg0x92 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 92 

# 82df1 Push8 [Register(0x91)]
#       Saving reg0x91 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 91 

# 82df3 Push8 [Register(0x90)]
#       Saving reg0x90 before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 90 

# 82df5 Push8 [Register(0x8d)]
#       Saving reg0x8d before None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
09 8d 

# 82df7 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:lcd_init))
32 0c fc ff ff ff 

# 82dfd StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:lcd_init))
25 0c 07 2e 08 00 

# 82e03 JmpImm [Label24(:lcd_init)]
#       PseudoCall(Label24(:lcd_init))
70 d5 21 08 

# 82e07 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:lcd_init))
32 0c 04 00 00 00 

# 82e0d Pop8 [Register(0x8d)]
#       Restoring reg0x8d after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 8d 

# 82e0f Pop8 [Register(0x90)]
#       Restoring reg0x90 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 90 

# 82e11 Pop8 [Register(0x91)]
#       Restoring reg0x91 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 91 

# 82e13 Pop8 [Register(0x92)]
#       Restoring reg0x92 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 92 

# 82e15 Pop8 [Register(0x93)]
#       Restoring reg0x93 after None <= call lcd_init() Some('/lutcomp/programs/lib/stdio.j':(14,5))
#       VoidExpression { expression: Call(Call { function: "lcd_init", parameters: [] }) }
#       Call(Call { function: "lcd_init", parameters: [] })
0a 93 

# None <= call KeyBoard_init() Some('/lutcomp/programs/lib/stdio.j':(15,5))
# VoidExpression { expression: Call(Call { function: "KeyBoard_init", parameters: [] }) }
# Call(Call { function: "KeyBoard_init", parameters: [] })
# Registers used by this function: {141, 144, 145, 146, 147, 148, 149, 150, 151, 152}
# Registers used by callee tree: {16, 20, 21, 22, 23}
# Registers to save: []
# 82e17 AddImm32IgnoreCarry [Register(0x0c), Constant32(0xfffffffc=4294967292)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c fc ff ff ff 

# 82e1d StoreImm32 [Register(0x0c), PcOffset(0x0000000a)]
#       PseudoCall(Label24(:KeyBoard_init))
25 0c 27 2e 08 00 

# 82e23 JmpImm [Label24(:KeyBoard_init)]
#       PseudoCall(Label24(:KeyBoard_init))
70 27 08 08 

# 82e27 AddImm32IgnoreCarry [Register(0x0c), Constant32(0x00000004=4)]
#       PseudoCall(Label24(:KeyBoard_init))
32 0c 04 00 00 00 

# return None None
# Return { value: None }
# 82e2d JmpMem [Register(0x0c)]
#       PseudoReturn
75 0c 

# :function_end_stdio_init None
# function_end_stdio_init
# Unreachable None
# 82e2f Halt [Constant32(0x10000000=268435456)]
#       Unreachable None
7e 00 00 00 10 

